{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { global } from '@loaders.gl/loader-utils';\nimport { DEFAULT_LOADER_OPTIONS } from '../constants';\nimport { NullLog } from './loggers';\n\nvar isPureObject = function isPureObject(value) {\n  return value && _typeof(value) === 'object' && value.constructor === {}.constructor;\n};\n\nexport var getGlobalLoaderState = function getGlobalLoaderState() {\n  global.loaders = global.loaders || {};\n  var loaders = global.loaders;\n  loaders._state = loaders._state || {};\n  return loaders._state;\n};\n\nvar getGlobalLoaderOptions = function getGlobalLoaderOptions() {\n  var state = getGlobalLoaderState();\n  state.globalOptions = state.globalOptions || _objectSpread({}, DEFAULT_LOADER_OPTIONS);\n  return state.globalOptions;\n};\n\nexport function setGlobalOptions(options) {\n  var state = getGlobalLoaderState();\n  var globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = mergeOptionsInternal(globalOptions, options);\n}\nexport function mergeOptions(loader, options, url) {\n  var topOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  validateLoaderOptions(loader, options, topOptions);\n  return mergeOptionsInternal(loader, options, url);\n}\n\nfunction validateLoaderOptions(loader, options) {\n  var topOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_LOADER_OPTIONS;\n  var log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : console;\n\n  if (topOptions) {\n    for (var key in options) {\n      if (_typeof(options[key]) !== 'object' && !topOptions[key]) {\n        log.warn(\"Top-level loader option \".concat(key, \" not recognized\"));\n      }\n    }\n  }\n\n  var idOptions = options && options[loader.id] || {};\n  var loaderOptions = loader.options && loader.options[loader.id] || {};\n  var deprecatedOptions = loader.defaultOptions && loader.defaultOptions[loader.id] || {};\n\n  for (var _key in idOptions) {\n    if (!(_key in loaderOptions)) {\n      if (_key in deprecatedOptions) {\n        log.warn(\"\".concat(loader.name, \" loader option \").concat(loader.id, \".\").concat(_key, \" deprecated, use \").concat(deprecatedOptions[_key]));\n      } else {\n        log.warn(\"\".concat(loader.name, \" loader option \").concat(loader.id, \".\").concat(_key, \" not recognized\"));\n      }\n    }\n  }\n}\n\nfunction mergeOptionsInternal(loader, options, url) {\n  var loaderDefaultOptions = loader.options || {};\n\n  var mergedOptions = _objectSpread({}, loaderDefaultOptions);\n\n  addUrlOptions(mergedOptions, url);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (var key in options) {\n    if (key in options) {\n      var value = options[key];\n\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = _objectSpread(_objectSpread({}, mergedOptions[key]), options[key]);\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/merge-options.js"],"names":["isPureObject","value","getGlobalLoaderState","global","loaders","getGlobalLoaderOptions","state","globalOptions","mergeOptionsInternal","topOptions","validateLoaderOptions","DEFAULT_LOADER_OPTIONS","log","console","options","idOptions","loader","loaderOptions","deprecatedOptions","key","loaderDefaultOptions","mergedOptions","addUrlOptions","mergeNestedFields","url"],"mappings":"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","sourcesContent":["import {global} from '@loaders.gl/loader-utils';\nimport {DEFAULT_LOADER_OPTIONS} from '../constants';\nimport {NullLog} from './loggers';\n\nconst isPureObject = value =>\n  value && typeof value === 'object' && value.constructor === {}.constructor;\n\n// Helper to reliably get global loader state\n// Wraps initialization of global variable in function to defeat overly agressive tree-shakers\nexport const getGlobalLoaderState = () => {\n  // @ts-ignore\n  global.loaders = global.loaders || {};\n  // @ts-ignore\n  const {loaders} = global;\n\n  // Add _state object to keep separate from modules added to global.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n};\n\n// Store global loader options on the global object to increase chances of cross loaders-version interoperability\n// NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n// Set global loader options\nexport function setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = mergeOptionsInternal(globalOptions, options);\n}\n\n// Merges options with global opts and loader defaults, also injects baseUri\nexport function mergeOptions(loader, options, url, topOptions = null) {\n  validateLoaderOptions(loader, options, topOptions);\n  return mergeOptionsInternal(loader, options, url);\n}\n\n/**\n * Warn for unsupported options\n * @param {*} loader\n * @param {object} options\n * @param {object | null} topOptions\n * @param {*} log\n */\n// eslint-disable-next-line complexity\nfunction validateLoaderOptions(\n  loader,\n  options,\n  topOptions = DEFAULT_LOADER_OPTIONS,\n  // eslint-disable-next-line\n  log = console\n) {\n  // Check top level options\n  if (topOptions) {\n    for (const key in options) {\n      // Only check non-object valued top-level keys\n      if (typeof options[key] !== 'object' && !topOptions[key]) {\n        log.warn(`Top-level loader option ${key} not recognized`);\n      }\n    }\n  }\n\n  // Get the scoped, loader specific options from the user supplied options\n  const idOptions = (options && options[loader.id]) || {};\n\n  // Get scoped, loader specific default and deprecated options from the selected loader\n  const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n  const deprecatedOptions = (loader.defaultOptions && loader.defaultOptions[loader.id]) || {};\n\n  // Validate loader specific options\n  for (const key in idOptions) {\n    if (!(key in loaderOptions)) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        log.warn(\n          `${loader.name} loader option ${loader.id}.${key} deprecated, use ${\n            deprecatedOptions[key]\n          }`\n        );\n        // TODO - auto set updated option?\n      } else {\n        log.warn(`${loader.name} loader option ${loader.id}.${key} not recognized`);\n      }\n    }\n  }\n}\n\nfunction mergeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}