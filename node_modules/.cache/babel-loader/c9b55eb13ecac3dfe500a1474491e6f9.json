{"ast":null,"code":"var DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nvar MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\nexport function parseMIMEType(mimeString) {\n  if (typeof mimeString !== 'string') {\n    return '';\n  }\n\n  var matches = mimeString.match(MIME_TYPE_PATTERN);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return mimeString;\n}\nexport function parseMIMETypeFromURL(dataUrl) {\n  if (typeof dataUrl !== 'string') {\n    return '';\n  }\n\n  var matches = dataUrl.match(DATA_URL_PATTERN);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return '';\n}","map":{"version":3,"sources":["../../../../src/lib/utils/mime-type-utils.js"],"names":["DATA_URL_PATTERN","MIME_TYPE_PATTERN","matches","mimeString","dataUrl"],"mappings":"AAGA,IAAMA,gBAAgB,GAAtB,gCAAA;AACA,IAAMC,iBAAiB,GAAvB,sBAAA;AAEA,OAAO,SAAA,aAAA,CAAA,UAAA,EAAmC;AACxC,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,WAAA,EAAA;AACD;;AAGD,MAAMC,OAAO,GAAGC,UAAU,CAAVA,KAAAA,CAAhB,iBAAgBA,CAAhB;;AACA,MAAA,OAAA,EAAa;AACX,WAAOD,OAAO,CAAd,CAAc,CAAd;AACD;;AAED,SAAA,UAAA;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,OAAA,EAAuC;AAC5C,MAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/B,WAAA,EAAA;AACD;;AAGD,MAAMA,OAAO,GAAGE,OAAO,CAAPA,KAAAA,CAAhB,gBAAgBA,CAAhB;;AACA,MAAA,OAAA,EAAa;AACX,WAAOF,OAAO,CAAd,CAAc,CAAd;AACD;;AAED,SAAA,EAAA;AACD","sourcesContent":["// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\nexport function parseMIMEType(mimeString) {\n  if (typeof mimeString !== 'string') {\n    return '';\n  }\n\n  // If resource is a data url, extract any embedded mime type\n  const matches = mimeString.match(MIME_TYPE_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return mimeString;\n}\n\nexport function parseMIMETypeFromURL(dataUrl) {\n  if (typeof dataUrl !== 'string') {\n    return '';\n  }\n\n  // If resource is a data URL, extract any embedded mime type\n  const matches = dataUrl.match(DATA_URL_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}