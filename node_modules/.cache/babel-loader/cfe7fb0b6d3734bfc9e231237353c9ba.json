{"ast":null,"code":"import constrainFeatureMovement from './constrain_feature_movement';\nimport * as Constants from '../constants';\nexport default function (features, delta) {\n  const constrainedDelta = constrainFeatureMovement(features.map(feature => feature.toGeoJSON()), delta);\n  features.forEach(feature => {\n    const currentCoordinates = feature.getCoordinates();\n\n    const moveCoordinate = coord => {\n      const point = {\n        lng: coord[0] + constrainedDelta.lng,\n        lat: coord[1] + constrainedDelta.lat\n      };\n      return [point.lng, point.lat];\n    };\n\n    const moveRing = ring => ring.map(coord => moveCoordinate(coord));\n\n    const moveMultiPolygon = multi => multi.map(ring => moveRing(ring));\n\n    let nextCoordinates;\n\n    if (feature.type === Constants.geojsonTypes.POINT) {\n      nextCoordinates = moveCoordinate(currentCoordinates);\n    } else if (feature.type === Constants.geojsonTypes.LINE_STRING || feature.type === Constants.geojsonTypes.MULTI_POINT) {\n      nextCoordinates = currentCoordinates.map(moveCoordinate);\n    } else if (feature.type === Constants.geojsonTypes.POLYGON || feature.type === Constants.geojsonTypes.MULTI_LINE_STRING) {\n      nextCoordinates = currentCoordinates.map(moveRing);\n    } else if (feature.type === Constants.geojsonTypes.MULTI_POLYGON) {\n      nextCoordinates = currentCoordinates.map(moveMultiPolygon);\n    }\n\n    feature.incomingCoords(nextCoordinates);\n  });\n}","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-gl-draw/src/lib/move_features.js"],"names":["constrainFeatureMovement","Constants","features","delta","constrainedDelta","map","feature","toGeoJSON","forEach","currentCoordinates","getCoordinates","moveCoordinate","coord","point","lng","lat","moveRing","ring","moveMultiPolygon","multi","nextCoordinates","type","geojsonTypes","POINT","LINE_STRING","MULTI_POINT","POLYGON","MULTI_LINE_STRING","MULTI_POLYGON","incomingCoords"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,8BAArC;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AAEA,eAAe,UAASC,QAAT,EAAmBC,KAAnB,EAA0B;AACvC,QAAMC,gBAAgB,GAAGJ,wBAAwB,CAACE,QAAQ,CAACG,GAAT,CAAaC,OAAO,IAAIA,OAAO,CAACC,SAAR,EAAxB,CAAD,EAA+CJ,KAA/C,CAAjD;AAEAD,EAAAA,QAAQ,CAACM,OAAT,CAAkBF,OAAD,IAAa;AAC5B,UAAMG,kBAAkB,GAAGH,OAAO,CAACI,cAAR,EAA3B;;AAEA,UAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,YAAMC,KAAK,GAAG;AACZC,QAAAA,GAAG,EAAEF,KAAK,CAAC,CAAD,CAAL,GAAWR,gBAAgB,CAACU,GADrB;AAEZC,QAAAA,GAAG,EAAEH,KAAK,CAAC,CAAD,CAAL,GAAWR,gBAAgB,CAACW;AAFrB,OAAd;AAIA,aAAO,CAACF,KAAK,CAACC,GAAP,EAAYD,KAAK,CAACE,GAAlB,CAAP;AACD,KAND;;AAOA,UAAMC,QAAQ,GAAGC,IAAI,IAAIA,IAAI,CAACZ,GAAL,CAASO,KAAK,IAAID,cAAc,CAACC,KAAD,CAAhC,CAAzB;;AACA,UAAMM,gBAAgB,GAAGC,KAAK,IAAIA,KAAK,CAACd,GAAN,CAAUY,IAAI,IAAID,QAAQ,CAACC,IAAD,CAA1B,CAAlC;;AAEA,QAAIG,eAAJ;;AACA,QAAId,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBC,KAA5C,EAAmD;AACjDH,MAAAA,eAAe,GAAGT,cAAc,CAACF,kBAAD,CAAhC;AACD,KAFD,MAEO,IAAIH,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBE,WAAxC,IAAuDlB,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBG,WAAnG,EAAgH;AACrHL,MAAAA,eAAe,GAAGX,kBAAkB,CAACJ,GAAnB,CAAuBM,cAAvB,CAAlB;AACD,KAFM,MAEA,IAAIL,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBI,OAAxC,IAAmDpB,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBK,iBAA/F,EAAkH;AACvHP,MAAAA,eAAe,GAAGX,kBAAkB,CAACJ,GAAnB,CAAuBW,QAAvB,CAAlB;AACD,KAFM,MAEA,IAAIV,OAAO,CAACe,IAAR,KAAiBpB,SAAS,CAACqB,YAAV,CAAuBM,aAA5C,EAA2D;AAChER,MAAAA,eAAe,GAAGX,kBAAkB,CAACJ,GAAnB,CAAuBa,gBAAvB,CAAlB;AACD;;AAEDZ,IAAAA,OAAO,CAACuB,cAAR,CAAuBT,eAAvB;AACD,GAzBD;AA0BD","sourcesContent":["import constrainFeatureMovement from './constrain_feature_movement';\nimport * as Constants from '../constants';\n\nexport default function(features, delta) {\n  const constrainedDelta = constrainFeatureMovement(features.map(feature => feature.toGeoJSON()), delta);\n\n  features.forEach((feature) => {\n    const currentCoordinates = feature.getCoordinates();\n\n    const moveCoordinate = (coord) => {\n      const point = {\n        lng: coord[0] + constrainedDelta.lng,\n        lat: coord[1] + constrainedDelta.lat\n      };\n      return [point.lng, point.lat];\n    };\n    const moveRing = ring => ring.map(coord => moveCoordinate(coord));\n    const moveMultiPolygon = multi => multi.map(ring => moveRing(ring));\n\n    let nextCoordinates;\n    if (feature.type === Constants.geojsonTypes.POINT) {\n      nextCoordinates = moveCoordinate(currentCoordinates);\n    } else if (feature.type === Constants.geojsonTypes.LINE_STRING || feature.type === Constants.geojsonTypes.MULTI_POINT) {\n      nextCoordinates = currentCoordinates.map(moveCoordinate);\n    } else if (feature.type === Constants.geojsonTypes.POLYGON || feature.type === Constants.geojsonTypes.MULTI_LINE_STRING) {\n      nextCoordinates = currentCoordinates.map(moveRing);\n    } else if (feature.type === Constants.geojsonTypes.MULTI_POLYGON) {\n      nextCoordinates = currentCoordinates.map(moveMultiPolygon);\n    }\n\n    feature.incomingCoords(nextCoordinates);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}