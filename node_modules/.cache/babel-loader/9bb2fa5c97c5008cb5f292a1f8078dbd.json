{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers } from '../javascript-utils/memory-copy-utils';\nexport function forEach(_x, _x2) {\n  return _forEach.apply(this, arguments);\n}\n\nfunction _forEach() {\n  _forEach = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(iterator, visitor) {\n    var _yield$iterator$next, done, value, cancel;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 3;\n            return iterator.next();\n\n          case 3:\n            _yield$iterator$next = _context.sent;\n            done = _yield$iterator$next.done;\n            value = _yield$iterator$next.value;\n\n            if (!done) {\n              _context.next = 9;\n              break;\n            }\n\n            iterator[\"return\"]();\n            return _context.abrupt(\"return\");\n\n          case 9:\n            cancel = visitor(value);\n\n            if (!cancel) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 0;\n            break;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _forEach.apply(this, arguments);\n}\n\nexport function concatenateChunksAsync(_x3) {\n  return _concatenateChunksAsync.apply(this, arguments);\n}\n\nfunction _concatenateChunksAsync() {\n  _concatenateChunksAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(asyncIterator) {\n    var arrayBuffer, string, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            arrayBuffer = new ArrayBuffer(0);\n            string = '';\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 4;\n            _iterator = _asyncIterator(asyncIterator);\n\n          case 6:\n            _context2.next = 8;\n            return _iterator.next();\n\n          case 8:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 12;\n            return _step.value;\n\n          case 12:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 19;\n              break;\n            }\n\n            chunk = _value;\n\n            if (typeof chunk === 'string') {\n              string += chunk;\n            } else {\n              arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n            }\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context2.next = 6;\n            break;\n\n          case 19:\n            _context2.next = 25;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context2.next = 30;\n              break;\n            }\n\n            _context2.next = 30;\n            return _iterator[\"return\"]();\n\n          case 30:\n            _context2.prev = 30;\n\n            if (!_didIteratorError) {\n              _context2.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context2.finish(30);\n\n          case 34:\n            return _context2.finish(25);\n\n          case 35:\n            return _context2.abrupt(\"return\", string || arrayBuffer);\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _concatenateChunksAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/iterator-utils/async-iteration.js"],"names":["done","value","iterator","cancel","visitor","arrayBuffer","string","chunk","concatenateArrayBuffers"],"mappings":"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","sourcesContent":["import {concatenateArrayBuffers} from '../javascript-utils/memory-copy-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * Supports strings and ArrayBuffers\n *\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateChunksAsync(asyncIterator) {\n  let arrayBuffer = new ArrayBuffer(0);\n  let string = '';\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      string += chunk;\n    } else {\n      arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n    }\n  }\n  return string || arrayBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}