{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nvar CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\nexport function getIonTilesetMetadata(_x, _x2) {\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nfunction _getIonTilesetMetadata() {\n  _getIonTilesetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(accessToken, assetId) {\n    var assets, _iterator, _step, item, ionAssetMetadata, type, url;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (assetId) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return getIonAssets(accessToken);\n\n          case 3:\n            assets = _context.sent;\n            _iterator = _createForOfIteratorHelper(assets.items);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                item = _step.value;\n\n                if (item.type === '3DTILES') {\n                  assetId = item.id;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 6:\n            _context.next = 8;\n            return getIonAssetMetadata(accessToken, assetId);\n\n          case 8:\n            ionAssetMetadata = _context.sent;\n            type = ionAssetMetadata.type, url = ionAssetMetadata.url;\n            assert(type === '3DTILES' && url);\n            ionAssetMetadata.headers = {\n              Authorization: \"Bearer \".concat(ionAssetMetadata.accessToken)\n            };\n            return _context.abrupt(\"return\", ionAssetMetadata);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nexport function getIonAssets(_x3) {\n  return _getIonAssets.apply(this, arguments);\n}\n\nfunction _getIonAssets() {\n  _getIonAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(accessToken) {\n    var url, headers, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            assert(accessToken);\n            url = CESIUM_ION_URL;\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            _context2.next = 5;\n            return fetchFile(url, {\n              headers: headers,\n              \"throws\": true\n            });\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return response.json();\n\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getIonAssets.apply(this, arguments);\n}\n\nexport function getIonAssetMetadata(_x4, _x5) {\n  return _getIonAssetMetadata.apply(this, arguments);\n}\n\nfunction _getIonAssetMetadata() {\n  _getIonAssetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(accessToken, assetId) {\n    var headers, url, response, metadata, tilesetInfo;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            assert(accessToken, assetId);\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            url = \"\".concat(CESIUM_ION_URL, \"/\").concat(assetId);\n            _context3.next = 5;\n            return fetchFile(\"\".concat(url), {\n              headers: headers,\n              \"throws\": true\n            });\n\n          case 5:\n            response = _context3.sent;\n            _context3.next = 8;\n            return response.json();\n\n          case 8:\n            metadata = _context3.sent;\n            _context3.next = 11;\n            return fetchFile(\"\".concat(url, \"/endpoint\"), {\n              headers: headers,\n              \"throws\": true\n            });\n\n          case 11:\n            response = _context3.sent;\n            _context3.next = 14;\n            return response.json();\n\n          case 14:\n            tilesetInfo = _context3.sent;\n            metadata = _objectSpread(_objectSpread({}, metadata), tilesetInfo);\n            return _context3.abrupt(\"return\", metadata);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getIonAssetMetadata.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/ion/ion.js"],"names":["CESIUM_ION_URL","assets","getIonAssets","item","assetId","ionAssetMetadata","getIonAssetMetadata","type","url","assert","Authorization","headers","response","fetchFile","metadata","tilesetInfo"],"mappings":"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","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {headers, throws: true});\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {headers, throws: true});\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {headers, throws: true});\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}