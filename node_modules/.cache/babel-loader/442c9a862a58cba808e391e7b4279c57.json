{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nvar defaultProps = {\n  count: 0,\n  texture: null\n};\n\nvar TriangleLayer = function (_Layer) {\n  _inherits(TriangleLayer, _Layer);\n\n  function TriangleLayer() {\n    _classCallCheck(this, TriangleLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TriangleLayer).apply(this, arguments));\n  }\n\n  _createClass(TriangleLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        vs: vs,\n        fs: fs,\n        modules: [project32]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          noAlloc: true\n        },\n        texCoords: {\n          size: 2,\n          noAlloc: true\n        }\n      });\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var vertexCount = this.props.vertexCount;\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: vertexCount\n        })\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var model = this.state.model;\n      var _this$props = this.props,\n          texture = _this$props.texture,\n          maxTexture = _this$props.maxTexture,\n          colorTexture = _this$props.colorTexture,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold,\n          colorDomain = _this$props.colorDomain;\n      model.setUniforms(_objectSpread({}, uniforms, {\n        texture: texture,\n        maxTexture: maxTexture,\n        colorTexture: colorTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      })).draw();\n    }\n  }]);\n\n  return TriangleLayer;\n}(Layer);\n\nexport { TriangleLayer as default };\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["defaultProps","count","texture","TriangleLayer","Layer","vs","fs","modules","gl","attributeManager","positions","size","noAlloc","texCoords","model","vertexCount","id","geometry","drawMode","uniforms","maxTexture","colorTexture","intensity","threshold","colorDomain"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAA,KAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAAA,KAAA,EAAA,SAAA,QAAA,eAAA;AACA,OAAA,EAAA,MAAA,8BAAA;AACA,OAAA,EAAA,MAAA,gCAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EADc,CAAA;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;;IAKqBC,a;;;;;;;;;;;iCACN;AACX,aAAO;AAACE,QAAAA,EAAE,EAAH,EAAA;AAAKC,QAAAA,EAAE,EAAP,EAAA;AAASC,QAAAA,OAAO,EAAE,CAAA,SAAA;AAAlB,OAAP;AACD;;;sCAEiB;AAAA,UACTC,EADS,GACH,KADG,OACH,CADG,EAAA;AAEhB,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACAA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AAACC,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,OAAO,EAAE;AAAnB,SADQ;AAEnBC,QAAAA,SAAS,EAAE;AAACF,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,OAAO,EAAE;AAAnB;AAFQ,OAArBH;AAIA,WAAA,QAAA,CAAc;AACZK,QAAAA,KAAK,EAAE,KAAA,SAAA,CAAA,EAAA;AADK,OAAd;AAGD;;;8BAESN,E,EAAI;AAAA,UACLO,WADK,GACU,KADV,KACU,CADV,WAAA;AAGZ,aAAO,IAAA,KAAA,CAAA,EAAA,EAEL,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB,KAAlB,UAAkB,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAA,KAAA,CAD+B,EAAA;AAEnCC,QAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,UAAAA,QAAQ,EADa,CAAA;AAErBH,UAAAA,WAAW,EAAXA;AAFqB,SAAb;AAFyB,OAArC,CAFK,CAAP;AAUD;;;+BAEgB;AAAA,UAAXI,QAAW,GAAA,IAAA,CAAXA,QAAW;AAAA,UACRL,KADQ,GACC,KADD,KACC,CADD,KAAA;AAAA,UAAA,WAAA,GAGgE,KAHhE,KAAA;AAAA,UAGRZ,OAHQ,GAAA,WAAA,CAAA,OAAA;AAAA,UAGCkB,UAHD,GAAA,WAAA,CAAA,UAAA;AAAA,UAGaC,YAHb,GAAA,WAAA,CAAA,YAAA;AAAA,UAG2BC,SAH3B,GAAA,WAAA,CAAA,SAAA;AAAA,UAGsCC,SAHtC,GAAA,WAAA,CAAA,SAAA;AAAA,UAGiDC,WAHjD,GAAA,WAAA,CAAA,WAAA;AAIfV,MAAAA,KAAK,CAALA,WAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAAA;AAGIZ,QAAAA,OAAO,EAHXY,OAAAA;AAIIM,QAAAA,UAAU,EAJdN,UAAAA;AAKIO,QAAAA,YAAY,EALhBP,YAAAA;AAMIQ,QAAAA,SAAS,EANbR,SAAAA;AAOIS,QAAAA,SAAS,EAPbT,SAAAA;AAQIU,QAAAA,WAAW,EAAXA;AARJV,OAAAA,CAAAA,EAAAA,IAAAA;AAWD;;;;EA/CwCV,K;;SAAtBD,a;AAkDrBA,aAAa,CAAbA,SAAAA,GAAAA,eAAAA;AACAA,aAAa,CAAbA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nconst defaultProps = {\n  count: 0, // number of triangles to be rendered\n  texture: null\n};\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount\n        })\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, colorDomain} = this.props;\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}