{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar invariant_1 = require(\"@turf/invariant\");\n\nvar helpers_1 = require(\"@turf/helpers\"); //http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\n\n\nfunction distance(from, to, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var coordinates1 = invariant_1.getCoord(from);\n  var coordinates2 = invariant_1.getCoord(to);\n  var dLat = helpers_1.degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = helpers_1.degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n  var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\n\nexports.default = distance;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/mapbox-gl-controls/node_modules/@turf/distance/index.js"],"names":["Object","defineProperty","exports","value","invariant_1","require","helpers_1","distance","from","to","options","coordinates1","getCoord","coordinates2","dLat","degreesToRadians","dLon","lat1","lat2","a","Math","pow","sin","cos","radiansToLength","atan2","sqrt","units","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAvB,C,CACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASE,QAAT,CAAkBC,IAAlB,EAAwBC,EAAxB,EAA4BC,OAA5B,EAAqC;AACjC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIC,YAAY,GAAGP,WAAW,CAACQ,QAAZ,CAAqBJ,IAArB,CAAnB;AACA,MAAIK,YAAY,GAAGT,WAAW,CAACQ,QAAZ,CAAqBH,EAArB,CAAnB;AACA,MAAIK,IAAI,GAAGR,SAAS,CAACS,gBAAV,CAA4BF,YAAY,CAAC,CAAD,CAAZ,GAAkBF,YAAY,CAAC,CAAD,CAA1D,CAAX;AACA,MAAIK,IAAI,GAAGV,SAAS,CAACS,gBAAV,CAA4BF,YAAY,CAAC,CAAD,CAAZ,GAAkBF,YAAY,CAAC,CAAD,CAA1D,CAAX;AACA,MAAIM,IAAI,GAAGX,SAAS,CAACS,gBAAV,CAA2BJ,YAAY,CAAC,CAAD,CAAvC,CAAX;AACA,MAAIO,IAAI,GAAGZ,SAAS,CAACS,gBAAV,CAA2BF,YAAY,CAAC,CAAD,CAAvC,CAAX;AACA,MAAIM,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASR,IAAI,GAAG,CAAhB,CAAT,EAA6B,CAA7B,IACJM,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASN,IAAI,GAAG,CAAhB,CAAT,EAA6B,CAA7B,IAAkCI,IAAI,CAACG,GAAL,CAASN,IAAT,CAAlC,GAAmDG,IAAI,CAACG,GAAL,CAASL,IAAT,CADvD;AAEA,SAAOZ,SAAS,CAACkB,eAAV,CAA0B,IAAIJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,IAAL,CAAUP,CAAV,CAAX,EAAyBC,IAAI,CAACM,IAAL,CAAU,IAAIP,CAAd,CAAzB,CAA9B,EAA0ET,OAAO,CAACiB,KAAlF,CAAP;AACH;;AACDzB,OAAO,CAAC0B,OAAR,GAAkBrB,QAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\nvar helpers_1 = require(\"@turf/helpers\");\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = invariant_1.getCoord(from);\n    var coordinates2 = invariant_1.getCoord(to);\n    var dLat = helpers_1.degreesToRadians((coordinates2[1] - coordinates1[1]));\n    var dLon = helpers_1.degreesToRadians((coordinates2[0] - coordinates1[0]));\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexports.default = distance;\n"]},"metadata":{},"sourceType":"script"}