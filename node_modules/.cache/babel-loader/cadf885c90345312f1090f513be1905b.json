{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { formatValue, equals as _equals, config } from '../lib/common';\nimport { degrees, radians, clamp } from '../lib/common';\nimport Vector3 from './vector3';\nimport * as vec3 from 'gl-matrix/vec3';\nvar EPSILON = 0.000001;\nvar EARTH_RADIUS_METERS = 6.371e6;\n\nvar SphericalCoordinates = function () {\n  function SphericalCoordinates() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$phi = _ref.phi,\n        phi = _ref$phi === void 0 ? 0 : _ref$phi,\n        _ref$theta = _ref.theta,\n        theta = _ref$theta === void 0 ? 0 : _ref$theta,\n        _ref$radius = _ref.radius,\n        radius = _ref$radius === void 0 ? 1 : _ref$radius,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? undefined : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? undefined : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? undefined : _ref$altitude,\n        _ref$radiusScale = _ref.radiusScale,\n        radiusScale = _ref$radiusScale === void 0 ? EARTH_RADIUS_METERS : _ref$radiusScale;\n\n    _classCallCheck(this, SphericalCoordinates);\n\n    this.phi = phi;\n    this.theta = theta;\n    this.radius = radius || altitude || 1;\n    this.radiusScale = radiusScale || 1;\n\n    if (bearing !== undefined) {\n      this.bearing = bearing;\n    }\n\n    if (pitch !== undefined) {\n      this.pitch = pitch;\n    }\n\n    this.check();\n  }\n\n  _createClass(SphericalCoordinates, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(_ref2) {\n      var _ref2$printTypes = _ref2.printTypes,\n          printTypes = _ref2$printTypes === void 0 ? false : _ref2$printTypes;\n      var f = formatValue;\n      return \"\".concat(printTypes ? 'Spherical' : '', \"[rho:\").concat(f(this.radius), \",theta:\").concat(f(this.theta), \",phi:\").concat(f(this.phi), \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return _equals(this.radius, other.radius) && _equals(this.theta, other.theta) && _equals(this.phi, other.phi);\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(other) {\n      return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n    }\n  }, {\n    key: \"set\",\n    value: function set(radius, phi, theta) {\n      this.radius = radius;\n      this.phi = phi;\n      this.theta = theta;\n      return this.check();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new SphericalCoordinates().copy(this);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(other) {\n      this.radius = other.radius;\n      this.phi = other.phi;\n      this.theta = other.theta;\n      return this.check();\n    }\n  }, {\n    key: \"fromLngLatZ\",\n    value: function fromLngLatZ(_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 3),\n          lng = _ref4[0],\n          lat = _ref4[1],\n          z = _ref4[2];\n\n      this.radius = 1 + z / this.radiusScale;\n      this.phi = radians(lat);\n      this.theta = radians(lng);\n    }\n  }, {\n    key: \"fromVector3\",\n    value: function fromVector3(v) {\n      this.radius = vec3.length(v);\n\n      if (this.radius > 0) {\n        this.theta = Math.atan2(v[0], v[1]);\n        this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1));\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      return new Vector3(0, 0, this.radius).rotateX({\n        radians: this.theta\n      }).rotateZ({\n        radians: this.phi\n      });\n    }\n  }, {\n    key: \"makeSafe\",\n    value: function makeSafe() {\n      this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n      return this;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n        throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"bearing\",\n    get: function get() {\n      return 180 - degrees(this.phi);\n    },\n    set: function set(v) {\n      this.phi = Math.PI - radians(v);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return degrees(this.theta);\n    },\n    set: function set(v) {\n      this.theta = radians(v);\n    }\n  }, {\n    key: \"longitude\",\n    get: function get() {\n      return degrees(this.phi);\n    }\n  }, {\n    key: \"latitude\",\n    get: function get() {\n      return degrees(this.theta);\n    }\n  }, {\n    key: \"lng\",\n    get: function get() {\n      return degrees(this.phi);\n    }\n  }, {\n    key: \"lat\",\n    get: function get() {\n      return degrees(this.theta);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return (this.radius - 1) * this.radiusScale;\n    }\n  }]);\n\n  return SphericalCoordinates;\n}();\n\nexport { SphericalCoordinates as default };","map":{"version":3,"sources":["../../../src/classes/spherical-coordinates.js"],"names":["equals","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","phi","theta","radius","bearing","undefined","pitch","altitude","radiusScale","printTypes","f","other","degrees","v","Math","radians","lng","lat","z","vec3","clamp","Number"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport Vector3 from './vector3';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing = undefined,\n    pitch = undefined,\n    altitude = undefined,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}