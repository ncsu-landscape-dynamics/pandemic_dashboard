{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport BinSorter from './utils/bin-sorter';\nimport { pointToDensityGridDataCPU } from './cpu-grid-layer/grid-aggregator';\n\nvar GridAggregationLayer = function (_AggregationLayer) {\n  _inherits(GridAggregationLayer, _AggregationLayer);\n\n  function GridAggregationLayer() {\n    _classCallCheck(this, GridAggregationLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridAggregationLayer).apply(this, arguments));\n  }\n\n  _createClass(GridAggregationLayer, [{\n    key: \"initializeState\",\n    value: function initializeState(_ref) {\n      var dimensions = _ref.dimensions;\n      var gl = this.context.gl;\n\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"initializeState\", this).call(this, dimensions);\n\n      this.setState({\n        layerData: {},\n        gpuGridAggregator: new GPUGridAggregator(gl, {\n          id: \"\".concat(this.id, \"-gpu-aggregator\")\n        }),\n        cpuGridAggregator: pointToDensityGridDataCPU\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this.updateAggregationState(opts);\n      var _this$state = this.state,\n          aggregationDataDirty = _this$state.aggregationDataDirty,\n          aggregationWeightsDirty = _this$state.aggregationWeightsDirty,\n          gpuAggregation = _this$state.gpuAggregation;\n\n      if (this.getNumInstances() <= 0) {\n        return;\n      }\n\n      var aggregationDirty = false;\n\n      if (aggregationDataDirty || gpuAggregation && aggregationWeightsDirty) {\n        this._updateAggregation(opts);\n\n        aggregationDirty = true;\n      }\n\n      if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n        this._updateWeightBins();\n\n        this._uploadAggregationResults();\n\n        aggregationDirty = true;\n      }\n\n      this.setState({\n        aggregationDirty: aggregationDirty\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var count = this.state.weights.count;\n\n      if (count && count.aggregationBuffer) {\n        count.aggregationBuffer[\"delete\"]();\n      }\n\n      var gpuGridAggregator = this.state.gpuGridAggregator;\n\n      if (gpuGridAggregator) {\n        gpuGridAggregator[\"delete\"]();\n      }\n\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaders) {\n      if (this.state.gpuAggregation) {\n        this.state.gpuGridAggregator.updateShaders(shaders);\n      }\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      log.assert(false);\n    }\n  }, {\n    key: \"allocateResources\",\n    value: function allocateResources(numRow, numCol) {\n      if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n        var dataBytes = numCol * numRow * 4 * 4;\n        var gl = this.context.gl;\n        var weights = this.state.weights;\n\n        for (var name in weights) {\n          var weight = weights[name];\n\n          if (weight.aggregationBuffer) {\n            weight.aggregationBuffer[\"delete\"]();\n          }\n\n          weight.aggregationBuffer = new Buffer(gl, {\n            byteLength: dataBytes,\n            accessor: {\n              size: 4,\n              type: 5126,\n              divisor: 1\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref2) {\n      var aggregationData = _ref2.aggregationData,\n          maxMinData = _ref2.maxMinData,\n          maxData = _ref2.maxData,\n          minData = _ref2.minData;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = aggregationData;\n        count.maxMinData = maxMinData;\n        count.maxData = maxData;\n        count.minData = minData;\n      }\n    }\n  }, {\n    key: \"_updateAggregation\",\n    value: function _updateAggregation(opts) {\n      var _this$state2 = this.state,\n          cpuGridAggregator = _this$state2.cpuGridAggregator,\n          gpuGridAggregator = _this$state2.gpuGridAggregator,\n          gridOffset = _this$state2.gridOffset,\n          posOffset = _this$state2.posOffset,\n          _this$state2$translat = _this$state2.translation,\n          translation = _this$state2$translat === void 0 ? [0, 0] : _this$state2$translat,\n          _this$state2$scaling = _this$state2.scaling,\n          scaling = _this$state2$scaling === void 0 ? [0, 0, 0] : _this$state2$scaling,\n          boundingBox = _this$state2.boundingBox,\n          projectPoints = _this$state2.projectPoints,\n          gpuAggregation = _this$state2.gpuAggregation,\n          numCol = _this$state2.numCol,\n          numRow = _this$state2.numRow;\n      var props = opts.props;\n      var viewport = this.context.viewport;\n      var attributes = this.getAttributes();\n      var vertexCount = this.getNumInstances();\n\n      if (!gpuAggregation) {\n        var result = cpuGridAggregator(props, {\n          gridOffset: gridOffset,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          viewport: viewport,\n          posOffset: posOffset,\n          boundingBox: boundingBox\n        });\n        this.setState({\n          layerData: result\n        });\n      } else {\n        var weights = this.state.weights;\n        gpuGridAggregator.run({\n          weights: weights,\n          cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n          numCol: numCol,\n          numRow: numRow,\n          translation: translation,\n          scaling: scaling,\n          vertexCount: vertexCount,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          moduleSettings: this.getModuleSettings()\n        });\n      }\n    }\n  }, {\n    key: \"_updateWeightBins\",\n    value: function _updateWeightBins() {\n      var getValue = this.state.getValue;\n      var sortedBins = new BinSorter(this.state.layerData.data || [], {\n        getValue: getValue\n      });\n      this.setState({\n        sortedBins: sortedBins\n      });\n    }\n  }, {\n    key: \"_uploadAggregationResults\",\n    value: function _uploadAggregationResults() {\n      var _this$state3 = this.state,\n          numCol = _this$state3.numCol,\n          numRow = _this$state3.numRow;\n      var data = this.state.layerData.data;\n      var _this$state$sortedBin = this.state.sortedBins,\n          aggregatedBins = _this$state$sortedBin.aggregatedBins,\n          minValue = _this$state$sortedBin.minValue,\n          maxValue = _this$state$sortedBin.maxValue,\n          totalCount = _this$state$sortedBin.totalCount;\n      var ELEMENTCOUNT = 4;\n      var aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      var aggregationData = new Float32Array(aggregationSize).fill(0);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = aggregatedBins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var bin = _step.value;\n          var _data$bin$i = data[bin.i],\n              lonIdx = _data$bin$i.lonIdx,\n              latIdx = _data$bin$i.latIdx;\n          var value = bin.value,\n              counts = bin.counts;\n          var cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n          aggregationData[cellIndex] = value;\n          aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n      var maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n      var minData = new Float32Array([minValue, 0, 0, totalCount]);\n      this.updateResults({\n        aggregationData: aggregationData,\n        maxMinData: maxMinData,\n        maxData: maxData,\n        minData: minData\n      });\n    }\n  }]);\n\n  return GridAggregationLayer;\n}(AggregationLayer);\n\nexport { GridAggregationLayer as default };\nGridAggregationLayer.layerName = 'GridAggregationLayer';","map":{"version":3,"sources":["../../src/grid-aggregation-layer.js"],"names":["GridAggregationLayer","AggregationLayer","dimensions","gl","layerData","gpuGridAggregator","id","cpuGridAggregator","pointToDensityGridDataCPU","opts","aggregationDataDirty","aggregationWeightsDirty","gpuAggregation","aggregationDirty","count","shaders","log","numRow","numCol","dataBytes","weights","weight","byteLength","accessor","size","type","divisor","aggregationData","maxMinData","maxData","minData","gridOffset","posOffset","translation","scaling","boundingBox","projectPoints","props","viewport","attributes","vertexCount","result","cellSize","moduleSettings","getValue","sortedBins","data","aggregatedBins","minValue","maxValue","totalCount","ELEMENTCOUNT","aggregationSize","bin","lonIdx","latIdx","value","counts","cellIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {Buffer} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport BinSorter from './utils/bin-sorter';\nimport {pointToDensityGridDataCPU} from './cpu-grid-layer/grid-aggregator';\n\nexport default class GridAggregationLayer extends AggregationLayer {\n  initializeState({dimensions}) {\n    const {gl} = this.context;\n    super.initializeState(dimensions);\n    this.setState({\n      // CPU aggregation results\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {id: `${this.id}-gpu-aggregator`}),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts) {\n    // get current attributes\n    super.updateState(opts);\n\n    this.updateAggregationState(opts);\n\n    const {aggregationDataDirty, aggregationWeightsDirty, gpuAggregation} = this.state;\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n    let aggregationDirty = false;\n    // CPU aggregation is two steps\n    // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n    // For GPU aggregation both above steps are combined into one step\n\n    // step-1\n    if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n      this._updateAggregation(opts);\n      aggregationDirty = true;\n    }\n    // step-2 (Applicalbe for CPU aggregation only)\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n      this._uploadAggregationResults();\n      aggregationDirty = true;\n    }\n\n    this.setState({aggregationDirty});\n  }\n\n  finalizeState() {\n    const {count} = this.state.weights;\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n    const {gpuGridAggregator} = this.state;\n    if (gpuGridAggregator) {\n      gpuGridAggregator.delete();\n    }\n    super.finalizeState();\n  }\n\n  updateShaders(shaders) {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  // Methods that can be overriden by subclasses for customizations\n\n  updateAggregationState(opts) {\n    // Sublayers should implement this method.\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {weights} = this.state;\n      for (const name in weights) {\n        const weight = weights[name];\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: GL.FLOAT,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults({aggregationData, maxMinData, maxData, minData}) {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  // Private\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {props} = opts;\n    const {viewport} = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {weights} = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {getValue} = this.state;\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {getValue});\n    this.setState({sortedBins});\n  }\n\n  _uploadAggregationResults() {\n    const {numCol, numRow} = this.state;\n    const {data} = this.state.layerData;\n    const {aggregatedBins, minValue, maxValue, totalCount} = this.state.sortedBins;\n\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n    for (const bin of aggregatedBins) {\n      const {lonIdx, latIdx} = data[bin.i];\n      const {value, counts} = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({aggregationData, maxMinData, maxData, minData});\n  }\n}\n\nGridAggregationLayer.layerName = 'GridAggregationLayer';\n"]},"metadata":{},"sourceType":"module"}