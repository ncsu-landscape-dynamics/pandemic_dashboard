{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport assert from '../utils/assert';\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_LIGHTS_PUNCTUAL } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  var extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  var _iterator = _createForOfIteratorHelper(json.nodes || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n      var nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n      if (nodeExtension) {\n        node.light = nodeExtension.light;\n      }\n\n      gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function encode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n\n  if (json.lights) {\n    var extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  if (gltfScenegraph.json.lights) {\n    var _iterator2 = _createForOfIteratorHelper(gltfScenegraph.json.lights),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var light = _step2.value;\n        var node = light.node;\n        gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    delete gltfScenegraph.json.lights;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_lights_punctual.js"],"names":["gltfScenegraph","json","extension","node","nodeExtension","assert","light"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAA,MAAA,MAAA,iBAAA;AACA,OAAA,cAAA,MAAA,oBAAA;AACA,SAAA,mBAAA,QAAA,mBAAA;AAEA,OAAO,SAAA,MAAA,CAAA,QAAA,EAAA,OAAA,EAAmC;AACxC,MAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AADwC,MAEjCC,IAFiC,GAEzBD,cAFyB,CAAA,IAAA;AAKxC,MAAME,SAAS,GAAGF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CAAlB;;AACA,MAAA,SAAA,EAAe;AACbA,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,MAAAA,GAA6BE,SAAS,CAAtCF,MAAAA;AACAA,IAAAA,cAAc,CAAdA,eAAAA,CAAAA,mBAAAA;AACD;;AATuC,MAAA,SAAA,GAAA,0BAAA,CAarBC,IAAI,CAAJA,KAAAA,IAbqB,EAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AAaxC,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAqC;AAAA,UAA1BE,IAA0B,GAAA,KAAA,CAAA,KAAA;AACnC,UAAMC,aAAa,GAAGJ,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAtB,mBAAsBA,CAAtB;;AACA,UAAA,aAAA,EAAmB;AACjBG,QAAAA,IAAI,CAAJA,KAAAA,GAAaC,aAAa,CAA1BD,KAAAA;AACD;;AACDH,MAAAA,cAAc,CAAdA,qBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA;AACD;AAnBuC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;AAoBzC;AAGD,OAAO,SAAA,MAAA,CAAA,QAAA,EAAA,OAAA,EAAmC;AACxC,MAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AADwC,MAEjCC,IAFiC,GAEzBD,cAFyB,CAAA,IAAA;;AAIxC,MAAIC,IAAI,CAAR,MAAA,EAAiB;AACf,QAAMC,SAAS,GAAGF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CAAlB;AACAK,IAAAA,MAAM,CAAC,CAACH,SAAS,CAAjBG,MAAM,CAANA;AACAH,IAAAA,SAAS,CAATA,MAAAA,GAAmBD,IAAI,CAAvBC,MAAAA;AACA,WAAOD,IAAI,CAAX,MAAA;AACD;;AAID,MAAID,cAAc,CAAdA,IAAAA,CAAJ,MAAA,EAAgC;AAAA,QAAA,UAAA,GAAA,0BAAA,CACVA,cAAc,CAAdA,IAAAA,CADU,MAAA,CAAA;AAAA,QAAA,MAAA;;AAAA,QAAA;AAC9B,WAAA,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAgD;AAAA,YAArCM,KAAqC,GAAA,MAAA,CAAA,KAAA;AAC9C,YAAMH,IAAI,GAAGG,KAAK,CAAlB,IAAA;AACAN,QAAAA,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAAA,KAAAA;AACD;AAJ6B,KAAA,CAAA,OAAA,GAAA,EAAA;AAAA,MAAA,UAAA,CAAA,CAAA,CAAA,GAAA;AAAA,KAAA,SAAA;AAAA,MAAA,UAAA,CAAA,CAAA;AAAA;;AAK9B,WAAOA,cAAc,CAAdA,IAAAA,CAAP,MAAA;AACD;AACF","sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport assert from '../utils/assert';\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_LIGHTS_PUNCTUAL} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport function encode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  if (gltfScenegraph.json.lights) {\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}