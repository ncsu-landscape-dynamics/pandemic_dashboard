{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { mergeOptions } from '../loader-utils/merge-options';\nimport { getAsyncIteratorFromData } from '../loader-utils/get-data';\nimport { getLoaderContext } from '../loader-utils/get-loader-context';\nimport { selectLoader } from './select-loader';\nexport function parseInBatches(_x2, _x3, _x4, _x5) {\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {\n    var loader, context;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loader = selectLoader(null, loaders, options, {\n              url: url\n            });\n            options = mergeOptions(loader, options, url);\n            context = getLoaderContext({\n              url: url,\n              loaders: loaders\n            }, options);\n            _context.next = 6;\n            return parseWithLoaderInBatches(loader, data, options, context);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatches(_x6, _x7, _x8, _x9) {\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatches() {\n  _parseWithLoaderInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(loader, data, options, context) {\n    var inputIterator, outputIterator, metadataBatch, makeMetadataBatchIterator, _makeMetadataBatchIterator;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _makeMetadataBatchIterator = function _makeMetadataBatchIte2() {\n              _makeMetadataBatchIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2(iterator) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return metadataBatch;\n\n                      case 2:\n                        return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            makeMetadataBatchIterator = function _makeMetadataBatchIte(_x) {\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            if (loader.parseInBatches) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error('loader does not support parseInBatches');\n\n          case 4:\n            _context3.next = 6;\n            return getAsyncIteratorFromData(data);\n\n          case 6:\n            inputIterator = _context3.sent;\n            _context3.next = 9;\n            return loader.parseInBatches(inputIterator, options, context, loader);\n\n          case 9:\n            outputIterator = _context3.sent;\n\n            if (options.metadata) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", outputIterator);\n\n          case 12:\n            metadataBatch = {\n              batchType: 'metadata',\n              metadata: {\n                _loader: loader,\n                _context: context\n              },\n              data: [],\n              bytesUsed: 0\n            };\n            return _context3.abrupt(\"return\", makeMetadataBatchIterator(outputIterator));\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.js"],"names":["Array","isLoaderObject","url","options","loaders","loader","selectLoader","mergeOptions","context","getLoaderContext","parseWithLoaderInBatches","inputIterator","getAsyncIteratorFromData","outputIterator","metadataBatch","batchType","metadata","_loader","_context","data","bytesUsed","makeMetadataBatchIterator"],"mappings":"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","sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {mergeOptions} from '../loader-utils/merge-options';\nimport {getAsyncIteratorFromData} from '../loader-utils/get-data';\nimport {getLoaderContext} from '../loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n// import {makeTextDecoderIterator} from '../../iterator-utils/text-iterators';\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(null, loaders, options, {url});\n\n  // Normalize options\n  options = mergeOptions(loader, options, url);\n\n  const context = getLoaderContext({url, loaders}, options);\n\n  return await parseWithLoaderInBatches(loader, data, options, context);\n}\n\nasync function parseWithLoaderInBatches(loader, data, options, context) {\n  if (!loader.parseInBatches) {\n    // TODO - call parse and emit a single batch (plus metadata batch)\n    throw new Error('loader does not support parseInBatches');\n  }\n\n  // Create async iterator adapter for data, and concatenate result\n  const inputIterator = await getAsyncIteratorFromData(data);\n  // Converts ArrayBuffer chunks to text chunks (leaves text chunks alone)\n  // if (loader.text) {\n  //   inputIterator = makeTextDecoderIterator(inputIterator);\n  // }\n  const outputIterator = await loader.parseInBatches(inputIterator, options, context, loader);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n"]},"metadata":{},"sourceType":"module"}