{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { Vector3 } from '@math.gl/core';\nimport { GL } from '../constants';\nimport assert from '../utils/assert';\nimport primitiveIterator from '../iterators/primitive-iterator';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { getPositions } from './get-attribute-from-geometry';\nexport default function computeVertexNormals(_ref) {\n  var mode = _ref.mode,\n      indices = _ref.indices,\n      attributes = _ref.attributes;\n  assert(getPrimitiveModeType(mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  var _getPositions = getPositions({\n    mode: mode,\n    indices: indices,\n    attributes: attributes\n  }),\n      positions = _getPositions.values;\n\n  var normals = new Float32Array(positions.length);\n  var vectorA = new Vector3();\n  var vectorB = new Vector3();\n  var vectorC = new Vector3();\n  var vectorCB = new Vector3();\n  var vectorAB = new Vector3();\n\n  var _iterator = _createForOfIteratorHelper(primitiveIterator({\n    mode: mode,\n    indices: indices,\n    attributes: attributes\n  })),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n      vectorA.fromArray(positions, primitive.i1 * 3);\n      vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n      vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n      vectorCB.subVectors(vectorC, vectorB);\n      vectorAB.subVectors(vectorA, vectorB);\n      var normal = vectorCB.cross(vectorAB);\n      normal.normalize();\n      var primitiveIndex = primitive.primitiveIndex;\n      normals[primitiveIndex * 9 + 0] = normal.x;\n      normals[primitiveIndex * 9 + 1] = normal.y;\n      normals[primitiveIndex * 9 + 2] = normal.z;\n      normals[primitiveIndex * 9 + 3] = normal.x;\n      normals[primitiveIndex * 9 + 4] = normal.y;\n      normals[primitiveIndex * 9 + 5] = normal.z;\n      normals[primitiveIndex * 9 + 6] = normal.x;\n      normals[primitiveIndex * 9 + 7] = normal.y;\n      normals[primitiveIndex * 9 + 8] = normal.z;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return normals;\n}","map":{"version":3,"sources":["../../../../src/geometry/attributes/compute-vertex-normals.js"],"names":["mode","indices","attributes","assert","getPrimitiveModeType","GL","positions","getPositions","normals","vectorA","vectorB","vectorC","vectorCB","vectorAB","primitive","primitiveIterator","normal","primitiveIndex"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport assert from '../utils/assert';\nimport primitiveIterator from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\n// eslint-disable-next-line max-statements\nexport default function computeVertexNormals({mode, indices, attributes}) {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions({mode, indices, attributes});\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of primitiveIterator({mode, indices, attributes})) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"]},"metadata":{},"sourceType":"module"}