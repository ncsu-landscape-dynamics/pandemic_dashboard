{"ast":null,"code":"export var AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\nexport function getSum(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\nexport function getMax(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\nexport function getMin(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\nexport function getValueFunc(aggregation, accessor) {\n  var op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return function (pts) {\n        return getMin(pts, accessor);\n      };\n\n    case AGGREGATION_OPERATION.SUM:\n      return function (pts) {\n        return getSum(pts, accessor);\n      };\n\n    case AGGREGATION_OPERATION.MEAN:\n      return function (pts) {\n        return getMean(pts, accessor);\n      };\n\n    case AGGREGATION_OPERATION.MAX:\n      return function (pts) {\n        return getMax(pts, accessor);\n      };\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utils/aggregation-operation-utils.js"],"names":["AGGREGATION_OPERATION","SUM","MEAN","MIN","MAX","accu","cur","filtered","pts","Number","op","getMin","getSum","getMean","getMax"],"mappings":"AAoBA,OAAO,IAAMA,qBAAqB,GAAG;AACnCC,EAAAA,GAAG,EADgC,CAAA;AAEnCC,EAAAA,IAAI,EAF+B,CAAA;AAGnCC,EAAAA,GAAG,EAHgC,CAAA;AAInCC,EAAAA,GAAG,EAAE;AAJ8B,CAA9B;;AAOP,SAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAA+B;AAC7B,SAAOC,IAAI,GAAX,GAAA;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAA+B;AAC7B,SAAOC,GAAG,GAAHA,IAAAA,GAAAA,GAAAA,GAAP,IAAA;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAA+B;AAC7B,SAAOA,GAAG,GAAHA,IAAAA,GAAAA,GAAAA,GAAP,IAAA;AACD;;AAED,OAAO,SAAA,OAAA,CAAA,GAAA,EAAA,QAAA,EAAgC;AACrC,MAAMC,QAAQ,GAAGC,GAAG,CAAHA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAAyBC,MAAM,CAAhD,QAAiBD,CAAjB;AAEA,SAAOD,QAAQ,CAARA,MAAAA,GAAkBA,QAAQ,CAARA,MAAAA,CAAAA,UAAAA,EAAAA,CAAAA,IAAiCA,QAAQ,CAA3DA,MAAAA,GAAP,IAAA;AACD;AAED,OAAO,SAAA,MAAA,CAAA,GAAA,EAAA,QAAA,EAA+B;AACpC,MAAMA,QAAQ,GAAGC,GAAG,CAAHA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAAyBC,MAAM,CAAhD,QAAiBD,CAAjB;AAEA,SAAOD,QAAQ,CAARA,MAAAA,GAAkBA,QAAQ,CAARA,MAAAA,CAAAA,UAAAA,EAAlBA,CAAkBA,CAAlBA,GAAP,IAAA;AACD;AAED,OAAO,SAAA,MAAA,CAAA,GAAA,EAAA,QAAA,EAA+B;AACpC,MAAMA,QAAQ,GAAGC,GAAG,CAAHA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAAyBC,MAAM,CAAhD,QAAiBD,CAAjB;AAEA,SAAOD,QAAQ,CAARA,MAAAA,GAAkBA,QAAQ,CAARA,MAAAA,CAAAA,UAAAA,EAA4B,CAA9CA,QAAkBA,CAAlBA,GAAP,IAAA;AACD;AAED,OAAO,SAAA,MAAA,CAAA,GAAA,EAAA,QAAA,EAA+B;AACpC,MAAMA,QAAQ,GAAGC,GAAG,CAAHA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAAyBC,MAAM,CAAhD,QAAiBD,CAAjB;AAEA,SAAOD,QAAQ,CAARA,MAAAA,GAAkBA,QAAQ,CAARA,MAAAA,CAAAA,UAAAA,EAAlBA,QAAkBA,CAAlBA,GAAP,IAAA;AACD;AAGD,OAAO,SAAA,YAAA,CAAA,WAAA,EAAA,QAAA,EAA6C;AAClD,MAAMG,EAAE,GAAGV,qBAAqB,CAArBA,WAAqB,CAArBA,IAAsCA,qBAAqB,CAAtE,GAAA;;AACA,UAAA,EAAA;AACE,SAAKA,qBAAqB,CAA1B,GAAA;AACE,aAAO,UAAA,GAAA,EAAG;AAAA,eAAIW,MAAM,CAAA,GAAA,EAAV,QAAU,CAAV;AAAV,OAAA;;AACF,SAAKX,qBAAqB,CAA1B,GAAA;AACE,aAAO,UAAA,GAAA,EAAG;AAAA,eAAIY,MAAM,CAAA,GAAA,EAAV,QAAU,CAAV;AAAV,OAAA;;AACF,SAAKZ,qBAAqB,CAA1B,IAAA;AACE,aAAO,UAAA,GAAA,EAAG;AAAA,eAAIa,OAAO,CAAA,GAAA,EAAX,QAAW,CAAX;AAAV,OAAA;;AACF,SAAKb,qBAAqB,CAA1B,GAAA;AACE,aAAO,UAAA,GAAA,EAAG;AAAA,eAAIc,MAAM,CAAA,GAAA,EAAV,QAAU,CAAV;AAAV,OAAA;;AACF;AACE,aAAA,IAAA;AAVJ;AAYD","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\n\nexport function getSum(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\n\nexport function getMax(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\n\nexport function getMin(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\n\n// Function to convert from aggregation/accessor props (like colorAggregation and getColorWeight) to getValue prop (like getColorValue)\nexport function getValueFunc(aggregation, accessor) {\n  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return pts => getMin(pts, accessor);\n    case AGGREGATION_OPERATION.SUM:\n      return pts => getSum(pts, accessor);\n    case AGGREGATION_OPERATION.MEAN:\n      return pts => getMean(pts, accessor);\n    case AGGREGATION_OPERATION.MAX:\n      return pts => getMax(pts, accessor);\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}