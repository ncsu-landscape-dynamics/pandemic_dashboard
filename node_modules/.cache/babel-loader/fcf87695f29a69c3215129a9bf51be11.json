{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { CullingVolume, Plane, AxisAlignedBoundingBox } from '@math.gl/culling';\nvar TILE_SIZE = 512;\nvar MAX_MAPS = 3;\n\nvar OSMNode = function () {\n  function OSMNode(x, y, z) {\n    _classCallCheck(this, OSMNode);\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  _createClass(OSMNode, [{\n    key: \"update\",\n    value: function update(params) {\n      var viewport = params.viewport,\n          cullingVolume = params.cullingVolume,\n          elevationBounds = params.elevationBounds,\n          minZ = params.minZ,\n          maxZ = params.maxZ,\n          offset = params.offset;\n      var boundingVolume = this.getBoundingVolume(elevationBounds, offset);\n      var isInside = cullingVolume.computeVisibility(boundingVolume);\n\n      if (isInside < 0) {\n        return false;\n      }\n\n      if (!this.childVisible) {\n        var z = this.z;\n\n        if (z < maxZ && z >= minZ) {\n          var distance = boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale / viewport.height;\n          z += Math.floor(Math.log2(distance));\n        }\n\n        if (z >= maxZ) {\n          this.selected = true;\n          return true;\n        }\n      }\n\n      this.selected = false;\n      this.childVisible = true;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n          child.update(params);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getSelected\",\n    value: function getSelected() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (this.selected) {\n        result.push(this);\n      }\n\n      if (this._children) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this._children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var node = _step2.value;\n            node.getSelected(result);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getBoundingVolume\",\n    value: function getBoundingVolume(zRange, worldOffset) {\n      var scale = Math.pow(2, this.z);\n      var extent = TILE_SIZE / scale;\n      var originX = this.x * extent + worldOffset * TILE_SIZE;\n      var originY = TILE_SIZE - (this.y + 1) * extent;\n      return new AxisAlignedBoundingBox([originX, originY, zRange[0]], [originX + extent, originY + extent, zRange[1]]);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      if (!this._children) {\n        var x = this.x * 2;\n        var y = this.y * 2;\n        var z = this.z + 1;\n        this._children = [new OSMNode(x, y, z), new OSMNode(x, y + 1, z), new OSMNode(x + 1, y, z), new OSMNode(x + 1, y + 1, z)];\n      }\n\n      return this._children;\n    }\n  }]);\n\n  return OSMNode;\n}();\n\nexport function getOSMTileIndices(viewport, maxZ, zRange) {\n  var planes = Object.values(viewport.getFrustumPlanes()).map(function (_ref) {\n    var normal = _ref.normal,\n        distance = _ref.distance;\n    return new Plane(normal.clone().negate(), distance);\n  });\n  var cullingVolume = new CullingVolume(planes);\n  var unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  var elevationMin = zRange && zRange[0] * unitsPerMeter || 0;\n  var elevationMax = zRange && zRange[1] * unitsPerMeter || 0;\n  var minZ = viewport.pitch <= 60 ? maxZ : 0;\n  var root = new OSMNode(0, 0, 0);\n  var traversalParams = {\n    viewport: viewport,\n    cullingVolume: cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ: minZ,\n    maxZ: maxZ,\n    offset: 0\n  };\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    traversalParams.offset = -1;\n\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n\n    traversalParams.offset = 1;\n\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}","map":{"version":3,"sources":["../../../src/tile-layer/tile-2d-traversal.js"],"names":["TILE_SIZE","MAX_MAPS","OSMNode","x","y","z","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","offset","boundingVolume","isInside","distance","Math","child","result","node","zRange","worldOffset","scale","extent","originX","originY","planes","normal","unitsPerMeter","elevationMin","elevationMax","root","traversalParams"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport {CullingVolume, Plane, AxisAlignedBoundingBox} from '@math.gl/culling';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  update(params) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, offset} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset);\n\n    // First, check if this tile is visible\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  getBoundingVolume(zRange, worldOffset) {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\nexport function getOSMTileIndices(viewport, maxZ, zRange) {\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"]},"metadata":{},"sourceType":"module"}