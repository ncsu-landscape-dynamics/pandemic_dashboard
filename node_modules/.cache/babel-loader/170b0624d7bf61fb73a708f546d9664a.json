{"ast":null,"code":"import ModeInterface from './mode_interface';\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\nconst eventKeys = Object.keys(eventMapper);\nexport default function (modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n  return function (ctx, startOpts = {}) {\n    let state = {};\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n\n    function wrapper(eh) {\n      return function (e) {\n        mode[eh](state, e);\n      };\n    }\n\n    return {\n      start() {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n\n        eventKeys.forEach(key => {\n          const modeHandler = eventMapper[key];\n\n          let selector = () => false;\n\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n\n          this.on(key, selector, wrapper(modeHandler));\n        });\n      },\n\n      stop() {\n        mode.onStop(state);\n      },\n\n      trash() {\n        mode.onTrash(state);\n      },\n\n      combineFeatures() {\n        mode.onCombineFeatures(state);\n      },\n\n      uncombineFeatures() {\n        mode.onUncombineFeatures(state);\n      },\n\n      render(geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n\n    };\n  };\n}","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-gl-draw/src/modes/object_to_mode.js"],"names":["ModeInterface","eventMapper","drag","click","mousemove","mousedown","mouseup","mouseout","keyup","keydown","touchstart","touchmove","touchend","tap","eventKeys","Object","keys","modeObject","modeObjectKeys","ctx","startOpts","state","mode","reduce","m","k","wrapper","eh","e","start","onSetup","forEach","key","modeHandler","selector","on","stop","onStop","trash","onTrash","combineFeatures","onCombineFeatures","uncombineFeatures","onUncombineFeatures","render","geojson","push","toDisplayFeatures"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,QADY;AAElBC,EAAAA,KAAK,EAAE,SAFW;AAGlBC,EAAAA,SAAS,EAAE,aAHO;AAIlBC,EAAAA,SAAS,EAAE,aAJO;AAKlBC,EAAAA,OAAO,EAAE,WALS;AAMlBC,EAAAA,QAAQ,EAAE,YANQ;AAOlBC,EAAAA,KAAK,EAAE,SAPW;AAQlBC,EAAAA,OAAO,EAAE,WARS;AASlBC,EAAAA,UAAU,EAAE,cATM;AAUlBC,EAAAA,SAAS,EAAE,aAVO;AAWlBC,EAAAA,QAAQ,EAAE,YAXQ;AAYlBC,EAAAA,GAAG,EAAE;AAZa,CAApB;AAeA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYf,WAAZ,CAAlB;AAEA,eAAe,UAASgB,UAAT,EAAqB;AAClC,QAAMC,cAAc,GAAGH,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAvB;AAEA,SAAO,UAASE,GAAT,EAAcC,SAAS,GAAG,EAA1B,EAA8B;AACnC,QAAIC,KAAK,GAAG,EAAZ;AAEA,UAAMC,IAAI,GAAGJ,cAAc,CAACK,MAAf,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3CD,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOR,UAAU,CAACQ,CAAD,CAAjB;AACA,aAAOD,CAAP;AACD,KAHY,EAGV,IAAIxB,aAAJ,CAAkBmB,GAAlB,CAHU,CAAb;;AAKA,aAASO,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,aAAO,UAASC,CAAT,EAAY;AACjBN,QAAAA,IAAI,CAACK,EAAD,CAAJ,CAASN,KAAT,EAAgBO,CAAhB;AACD,OAFD;AAGD;;AAED,WAAO;AACLC,MAAAA,KAAK,GAAG;AACNR,QAAAA,KAAK,GAAGC,IAAI,CAACQ,OAAL,CAAaV,SAAb,CAAR,CADM,CAC2B;AAEjC;AACA;AACA;AACA;AACA;;AACAN,QAAAA,SAAS,CAACiB,OAAV,CAAmBC,GAAD,IAAS;AACzB,gBAAMC,WAAW,GAAGhC,WAAW,CAAC+B,GAAD,CAA/B;;AACA,cAAIE,QAAQ,GAAG,MAAM,KAArB;;AACA,cAAIjB,UAAU,CAACgB,WAAD,CAAd,EAA6B;AAC3BC,YAAAA,QAAQ,GAAG,MAAM,IAAjB;AACD;;AACD,eAAKC,EAAL,CAAQH,GAAR,EAAaE,QAAb,EAAuBR,OAAO,CAACO,WAAD,CAA9B;AACD,SAPD;AASD,OAlBI;;AAmBLG,MAAAA,IAAI,GAAG;AACLd,QAAAA,IAAI,CAACe,MAAL,CAAYhB,KAAZ;AACD,OArBI;;AAsBLiB,MAAAA,KAAK,GAAG;AACNhB,QAAAA,IAAI,CAACiB,OAAL,CAAalB,KAAb;AACD,OAxBI;;AAyBLmB,MAAAA,eAAe,GAAG;AAChBlB,QAAAA,IAAI,CAACmB,iBAAL,CAAuBpB,KAAvB;AACD,OA3BI;;AA4BLqB,MAAAA,iBAAiB,GAAG;AAClBpB,QAAAA,IAAI,CAACqB,mBAAL,CAAyBtB,KAAzB;AACD,OA9BI;;AA+BLuB,MAAAA,MAAM,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACpBxB,QAAAA,IAAI,CAACyB,iBAAL,CAAuB1B,KAAvB,EAA8BwB,OAA9B,EAAuCC,IAAvC;AACD;;AAjCI,KAAP;AAmCD,GAjDD;AAkDD","sourcesContent":["import ModeInterface from './mode_interface';\n\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\n\nconst eventKeys = Object.keys(eventMapper);\n\nexport default function(modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n\n  return function(ctx, startOpts = {}) {\n    let state = {};\n\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n\n    function wrapper(eh) {\n      return function(e) {\n        mode[eh](state, e);\n      };\n    }\n\n    return {\n      start() {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n        eventKeys.forEach((key) => {\n          const modeHandler = eventMapper[key];\n          let selector = () => false;\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n          this.on(key, selector, wrapper(modeHandler));\n        });\n\n      },\n      stop() {\n        mode.onStop(state);\n      },\n      trash() {\n        mode.onTrash(state);\n      },\n      combineFeatures() {\n        mode.onCombineFeatures(state);\n      },\n      uncombineFeatures() {\n        mode.onUncombineFeatures(state);\n      },\n      render(geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}