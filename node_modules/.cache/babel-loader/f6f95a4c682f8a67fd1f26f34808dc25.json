{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar inherits = require('inherits');\n\nvar isnumeric = require('is-numeric');\n\nvar css = require('dom-css');\n\nmodule.exports = Range;\ninherits(Range, EventEmitter);\n\nfunction Range(root, opts, theme, uuid) {\n  if (!(this instanceof Range)) return new Range(root, opts, theme, uuid);\n  var self = this;\n  var scaleValue, scaleValueInverse, logmin, logmax, logsign;\n\n  var container = require('./container')(root, opts.label);\n\n  require('./label')(container, opts.label, theme);\n\n  if (!!opts.step && !!opts.steps) {\n    throw new Error('Cannot specify both step and steps. Got step = ' + opts.step + ', steps = ', opts.steps);\n  }\n\n  var input = container.appendChild(document.createElement('input'));\n  input.type = 'range';\n  input.className = 'control-panel-range-' + uuid; // Create scale functions for converting to/from the desired scale:\n\n  if (opts.scale === 'log') {\n    scaleValue = function (x) {\n      return logsign * Math.exp(Math.log(logmin) + (Math.log(logmax) - Math.log(logmin)) * x / 100);\n    };\n\n    scaleValueInverse = function (y) {\n      return (Math.log(y * logsign) - Math.log(logmin)) * 100 / (Math.log(logmax) - Math.log(logmin));\n    };\n  } else {\n    scaleValue = scaleValueInverse = function (x) {\n      return x;\n    };\n  } // Get initial value:\n\n\n  if (opts.scale === 'log') {\n    // Get options or set defaults:\n    opts.max = isnumeric(opts.max) ? opts.max : 100;\n    opts.min = isnumeric(opts.min) ? opts.min : 0.1; // Check if all signs are valid:\n\n    if (opts.min * opts.max <= 0) {\n      throw new Error('Log range min/max must have the same sign and not equal zero. Got min = ' + opts.min + ', max = ' + opts.max);\n    } else {\n      // Pull these into separate variables so that opts can define the *slider* mapping\n      logmin = opts.min;\n      logmax = opts.max;\n      logsign = opts.min > 0 ? 1 : -1; // Got the sign so force these positive:\n\n      logmin = Math.abs(logmin);\n      logmax = Math.abs(logmax); // These are now simply 0-100 to which we map the log range:\n\n      opts.min = 0;\n      opts.max = 100; // Step is invalid for a log range:\n\n      if (isnumeric(opts.step)) {\n        throw new Error('Log may only use steps (integer number of steps), not a step value. Got step =' + opts.step);\n      } // Default step is simply 1 in linear slider space:\n\n\n      opts.step = 1;\n    }\n\n    opts.initial = scaleValueInverse(isnumeric(opts.initial) ? opts.initial : scaleValue((opts.min + opts.max) * 0.5));\n\n    if (opts.initial * scaleValueInverse(opts.max) <= 0) {\n      throw new Error('Log range initial value must have the same sign as min/max and must not equal zero. Got initial value = ' + opts.initial);\n    }\n  } else {\n    // If linear, this is much simpler:\n    opts.max = isnumeric(opts.max) ? opts.max : 100;\n    opts.min = isnumeric(opts.min) ? opts.min : 0;\n    opts.step = isnumeric(opts.step) ? opts.step : (opts.max - opts.min) / 100;\n    opts.initial = isnumeric(opts.initial) ? opts.initial : (opts.min + opts.max) * 0.5;\n  } // If we got a number of steps, use that instead:\n\n\n  if (isnumeric(opts.steps)) {\n    opts.step = isnumeric(opts.steps) ? (opts.max - opts.min) / opts.steps : opts.step;\n  } // Quantize the initial value to the requested step:\n\n\n  var initialStep = Math.round((opts.initial - opts.min) / opts.step);\n  opts.initial = opts.min + opts.step * initialStep; // Set value on the input itself:\n\n  input.min = opts.min;\n  input.max = opts.max;\n  input.step = opts.step;\n  input.value = opts.initial;\n  css(input, {\n    width: '47.5%'\n  });\n\n  var value = require('./value')(container, scaleValue(opts.initial), theme, '11%');\n\n  setTimeout(function () {\n    self.emit('initialized', parseFloat(input.value));\n  });\n\n  input.oninput = function (data) {\n    var scaledValue = scaleValue(parseFloat(data.target.value));\n    value.innerHTML = scaledValue;\n    self.emit('input', scaledValue);\n  };\n}","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/control-panel/components/range.js"],"names":["EventEmitter","require","inherits","isnumeric","css","module","exports","Range","root","opts","theme","uuid","self","scaleValue","scaleValueInverse","logmin","logmax","logsign","container","label","step","steps","Error","input","appendChild","document","createElement","type","className","scale","x","Math","exp","log","y","max","min","abs","initial","initialStep","round","value","width","setTimeout","emit","parseFloat","oninput","data","scaledValue","target","innerHTML"],"mappings":"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","sourcesContent":["var EventEmitter = require('events').EventEmitter\nvar inherits = require('inherits')\nvar isnumeric = require('is-numeric')\nvar css = require('dom-css')\n\nmodule.exports = Range\ninherits(Range, EventEmitter)\n\nfunction Range (root, opts, theme, uuid) {\n  if (!(this instanceof Range)) return new Range(root, opts, theme, uuid)\n  var self = this\n  var scaleValue, scaleValueInverse, logmin, logmax, logsign\n\n  var container = require('./container')(root, opts.label)\n  require('./label')(container, opts.label, theme)\n\n  if (!!opts.step && !!opts.steps) {\n    throw new Error('Cannot specify both step and steps. Got step = ' + opts.step + ', steps = ', opts.steps)\n  }\n\n  var input = container.appendChild(document.createElement('input'))\n  input.type = 'range'\n  input.className = 'control-panel-range-' + uuid\n\n  // Create scale functions for converting to/from the desired scale:\n  if (opts.scale === 'log') {\n    scaleValue = function (x) {\n      return logsign * Math.exp(Math.log(logmin) + (Math.log(logmax) - Math.log(logmin)) * x / 100)\n    }\n    scaleValueInverse = function (y) {\n      return (Math.log(y * logsign) - Math.log(logmin)) * 100 / (Math.log(logmax) - Math.log(logmin))\n    }\n  } else {\n    scaleValue = scaleValueInverse = function (x) { return x }\n  }\n\n  // Get initial value:\n  if (opts.scale === 'log') {\n    // Get options or set defaults:\n    opts.max = (isnumeric(opts.max)) ? opts.max : 100\n    opts.min = (isnumeric(opts.min)) ? opts.min : 0.1\n\n    // Check if all signs are valid:\n    if (opts.min * opts.max <= 0) {\n      throw new Error('Log range min/max must have the same sign and not equal zero. Got min = ' + opts.min + ', max = ' + opts.max)\n    } else {\n      // Pull these into separate variables so that opts can define the *slider* mapping\n      logmin = opts.min\n      logmax = opts.max\n      logsign = opts.min > 0 ? 1 : -1\n\n      // Got the sign so force these positive:\n      logmin = Math.abs(logmin)\n      logmax = Math.abs(logmax)\n\n      // These are now simply 0-100 to which we map the log range:\n      opts.min = 0\n      opts.max = 100\n\n      // Step is invalid for a log range:\n      if (isnumeric(opts.step)) {\n        throw new Error('Log may only use steps (integer number of steps), not a step value. Got step =' + opts.step)\n      }\n      // Default step is simply 1 in linear slider space:\n      opts.step = 1\n    }\n\n    opts.initial = scaleValueInverse(isnumeric(opts.initial) ? opts.initial : scaleValue((opts.min + opts.max) * 0.5))\n\n    if (opts.initial * scaleValueInverse(opts.max) <= 0) {\n      throw new Error('Log range initial value must have the same sign as min/max and must not equal zero. Got initial value = ' + opts.initial)\n    }\n  } else {\n    // If linear, this is much simpler:\n    opts.max = (isnumeric(opts.max)) ? opts.max : 100\n    opts.min = (isnumeric(opts.min)) ? opts.min : 0\n    opts.step = (isnumeric(opts.step)) ? opts.step : (opts.max - opts.min) / 100\n\n    opts.initial = isnumeric(opts.initial) ? opts.initial : (opts.min + opts.max) * 0.5\n  }\n\n  // If we got a number of steps, use that instead:\n  if (isnumeric(opts.steps)) {\n    opts.step = isnumeric(opts.steps) ? (opts.max - opts.min) / opts.steps : opts.step\n  }\n\n  // Quantize the initial value to the requested step:\n  var initialStep = Math.round((opts.initial - opts.min) / opts.step)\n  opts.initial = opts.min + opts.step * initialStep\n\n  // Set value on the input itself:\n  input.min = opts.min\n  input.max = opts.max\n  input.step = opts.step\n  input.value = opts.initial\n\n  css(input, {\n    width: '47.5%'\n  })\n\n  var value = require('./value')(container, scaleValue(opts.initial), theme, '11%')\n\n  setTimeout(function () {\n    self.emit('initialized', parseFloat(input.value))\n  })\n\n  input.oninput = function (data) {\n    var scaledValue = scaleValue(parseFloat(data.target.value))\n    value.innerHTML = scaledValue\n    self.emit('input', scaledValue)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}