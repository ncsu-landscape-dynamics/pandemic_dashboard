{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { isBlob } from '../../javascript-utils/is-type';\nimport fetchFileReadable from './fetch-file.browser';\nimport { getErrorMessageFromResponse } from './fetch-error-message';\nexport function fetchFile(_x) {\n  return _fetchFile.apply(this, arguments);\n}\n\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url) {\n    var options,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n            if (!isBlob(url)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", fetchFileReadable(url, options));\n\n          case 3:\n            url = resolvePath(url);\n            _context.next = 6;\n            return fetch(url, options);\n\n          case 6:\n            response = _context.sent;\n\n            if (!(!response.ok && options[\"throws\"])) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.t0 = Error;\n            _context.next = 11;\n            return getErrorMessageFromResponse(response);\n\n          case 11:\n            _context.t1 = _context.sent;\n            throw new _context.t0(_context.t1);\n\n          case 13:\n            return _context.abrupt(\"return\", response);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["options","isBlob","fetchFileReadable","url","resolvePath","response","fetch","getErrorMessageFromResponse"],"mappings":";;AACA,SAAA,WAAA,QAAA,0BAAA;AACA,SAAA,MAAA,QAAA,gCAAA;AACA,OAAA,iBAAA,MAAA,sBAAA;AACA,SAAA,2BAAA,QAAA,uBAAA;AAOA,OAAA,SAAA,SAAA,CAAA,EAAA,EAAA;AAAA,SAAA,UAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;0DAAO,SAAA,OAAA,CAAA,GAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,QAAA;AAAA,QAAA,KAAA,GAAA,SAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAA8BA,YAAAA,OAA9B,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,EAA8BA;;AAA9B,gBAAA,CACDC,MAAM,CADL,GACK,CADL,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAEIC,iBAAiB,CAAA,GAAA,EAFrB,OAEqB,CAFrB,CAAA;;AAAA,eAAA,CAAA;AAILC,YAAAA,GAAG,GAAGC,WAAW,CAAjBD,GAAiB,CAAjBA;AAJK,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAMkBG,KAAK,CAAA,GAAA,EANvB,OAMuB,CANvB;;AAAA,eAAA,CAAA;AAMCD,YAAAA,QAND,GAAA,QAAA,CAAA,IAMCA;;AAND,gBAAA,EAOD,CAACA,QAAQ,CAAT,EAAA,IAAgBL,OAAO,CAPtB,QAOsB,CAPtB,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,KAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAQmBO,2BAA2B,CAR9C,QAQ8C,CAR9C;;AAAA,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;AAAA,kBAAA,IAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["/* global fetch */\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport fetchFileReadable from './fetch-file.browser';\nimport {getErrorMessageFromResponse} from './fetch-error-message';\n\n// As fetch but respects pathPrefix and file aliases\n// Reads file data from:\n// * data urls\n// * http/http urls\n// * File/Blob objects\nexport async function fetchFile(url, options = {}) {\n  if (isBlob(url)) {\n    return fetchFileReadable(url, options);\n  }\n  url = resolvePath(url);\n  // TODO - SUPPORT reading from `File` objects\n  const response = await fetch(url, options);\n  if (!response.ok && options.throws) {\n    throw new Error(await getErrorMessageFromResponse(response));\n  }\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}