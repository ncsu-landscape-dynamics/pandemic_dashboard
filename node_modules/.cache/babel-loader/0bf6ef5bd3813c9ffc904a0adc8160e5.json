{"ast":null,"code":"'use strict';\n\nvar Typeahead = require('suggestions');\n\nvar debounce = require('lodash.debounce');\n\nvar extend = require('xtend');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar exceptions = require('./exceptions');\n\nvar MapboxClient = require('@mapbox/mapbox-sdk');\n\nvar mbxGeocoder = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar MapboxEventManager = require('./events');\n\nvar localization = require('./localization');\n\nvar subtag = require('subtag');\n/**\n * A geocoder component using the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/#geocoding)\n * @class MapboxGeocoder\n * @param {Object} options\n * @param {String} options.accessToken Required.\n * @param {String} [options.origin=https://api.mapbox.com] Use to set a custom API origin.\n * @param {Object} [options.mapboxgl] A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if `options.marker` is `true`.\n * @param {Number} [options.zoom=16] On geocoded result what zoom level should the map animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n * @param {Boolean|Object} [options.flyTo=true] If `false`, animating the map to a selected result is disabled. If `true`, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n * @param {String} [options.placeholder=Search] Override the default placeholder attribute value.\n * @param {Object} [options.proximity] a proximity argument: this is\n * a geographical point given as an object with `latitude` and `longitude`\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Boolean} [options.trackProximity=true] If `true`, the geocoder proximity will automatically update based on the map view.\n * @param {Boolean} [options.collapsed=false] If `true`, the geocoder control will collapse until hovered or in focus.\n * @param {Boolean} [options.clearAndBlurOnEsc=false] If `true`, the geocoder control will clear it's contents and blur when user presses the escape key.\n * @param {Boolean} [options.clearOnBlur=false] If `true`, the geocoder control will clear its value when the input blurs.\n * @param {Array} [options.bbox] a bounding box argument: this is\n * a bounding box given as an array in the format `[minX, minY, maxX, maxY]`.\n * Search results will be limited to the bounding box.\n * @param {string} [options.countries] a comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {string} [options.types] a comma seperated list of types that filter\n * results to match those specified. See https://docs.mapbox.com/api/search/#data-types\n * for available types.\n * If reverseGeocode is enabled, you should specify one type. If you configure more than one type, the first type will be used.\n * @param {Number} [options.minLength=2] Minimum number of characters to enter before results are shown.\n * @param {Number} [options.limit=5] Maximum number of results to show.\n * @param {string} [options.language] Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas. Defaults to the browser's language settings.\n * @param {Function} [options.filter] A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n * @param {Function} [options.localGeocoder] A function accepting the query string which performs local geocoding to supplement results from the Mapbox Geocoding API. Expected to return an Array of GeoJSON Features in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format.\n * @param {distance|score} [options.reverseMode=distance] - Set the factors that are used to sort nearby results.\n * @param {boolean} [options.reverseGeocode=false] If `true`, enable reverse geocoding mode. In reverse geocoding, search input is expected to be coordinates in the form `lat, lon`, with suggestions being the reverse geocodes.\n * @param {Boolean} [options.enableEventLogging=true] Allow Mapbox to collect anonymous usage statistics from the plugin.\n * @param {Boolean|Object} [options.marker=true]  If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that `options.mapboxgl` also be set.\n * @param {Function} [options.render] A function that specifies how the results should be rendered in the dropdown menu. This function should accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. Any HTML in the returned string will be rendered.\n * @param {Function} [options.getItemValue] A function that specifies how the selected result should be rendered in the search bar. This function should accept a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. HTML tags in the output string will not be rendered. Defaults to `(item) => item.place_name`.\n * @param {String} [options.mode=mapbox.places] A string specifying the geocoding [endpoint](https://docs.mapbox.com/api/search/#endpoints) to query. Options are `mapbox.places` and `mapbox.places-permanent`. The `mapbox.places-permanent` mode requires an enterprise license for permanent geocodes.\n * @param {Boolean} [options.localGeocoderOnly=false] If `true`, indicates that the `localGeocoder` results should be the only ones returned to the user. If `false`, indicates that the `localGeocoder` results should be combined with those from the Mapbox API with the `localGeocoder` results ranked higher.\n * @example\n * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n * map.addControl(geocoder);\n * @return {MapboxGeocoder} `this`\n *\n */\n\n\nfunction MapboxGeocoder(options) {\n  this._eventEmitter = new EventEmitter();\n  this.options = extend({}, this.options, options);\n  this.inputString = '';\n  this.fresh = true;\n  this.lastSelected = null;\n}\n\nMapboxGeocoder.prototype = {\n  options: {\n    zoom: 16,\n    flyTo: true,\n    trackProximity: true,\n    minLength: 2,\n    reverseGeocode: false,\n    limit: 5,\n    origin: 'https://api.mapbox.com',\n    enableEventLogging: true,\n    marker: true,\n    mapboxgl: null,\n    collapsed: false,\n    clearAndBlurOnEsc: false,\n    clearOnBlur: false,\n    getItemValue: function getItemValue(item) {\n      return item.place_name;\n    },\n    render: function render(item) {\n      var placeName = item.place_name.split(',');\n      return '<div class=\"mapboxgl-ctrl-geocoder--suggestion\"><div class=\"mapboxgl-ctrl-geocoder--suggestion-title\">' + placeName[0] + '</div><div class=\"mapboxgl-ctrl-geocoder--suggestion-address\">' + placeName.splice(1, placeName.length).join(',') + '</div></div>';\n    }\n  },\n\n  /**\n   * Add the geocoder to a container. The container can be either a `mapboxgl.Map`, an `HTMLElement` or a CSS selector string.\n   *\n   * If the container is a [`mapboxgl.Map`](https://docs.mapbox.com/mapbox-gl-js/api/map/), this function will behave identically to [`Map.addControl(geocoder)`](https://docs.mapbox.com/mapbox-gl-js/api/map/#map#addcontrol).\n   * If the container is an instance of [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement), then the geocoder will be appended as a child of that [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement).\n   * If the container is a [CSS selector string](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors), the geocoder will be appended to the element returned from the query.\n   *\n   * This function will throw an error if the container is none of the above.\n   * It will also throw an error if the referenced HTML element cannot be found in the `document.body`.\n   *\n   * For example, if the HTML body contains the element `<div id='geocoder-container'></div>`, the following script will append the geocoder to `#geocoder-container`:\n   *\n   * ```javascript\n   * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n   * geocoder.addTo('#geocoder-container');\n   * ```\n   * @param {String|HTMLElement|mapboxgl.Map} container A reference to the container to which to add the geocoder\n   */\n  addTo: function addTo(container) {\n    function addToExistingContainer(geocoder, container) {\n      if (!document.body.contains(container)) {\n        throw new Error(\"Element provided to #addTo() exists, but is not in the DOM\");\n      }\n\n      var el = geocoder.onAdd(); //returns the input elements, which are then added to the requested html container\n\n      container.appendChild(el);\n    } // if the container is a map, add the control like normal\n\n\n    if (container._controlContainer) {\n      //  it's a mapbox-gl map, add like normal\n      container.addControl(this);\n    } // if the container is an HTMLElement, then set the parent to be that element\n    else if (container instanceof HTMLElement) {\n        addToExistingContainer(this, container);\n      } // if the container is a string, treat it as a CSS query\n      else if (typeof container == 'string') {\n          var parent = document.querySelectorAll(container);\n\n          if (parent.length === 0) {\n            throw new Error(\"Element \", container, \"not found.\");\n          }\n\n          if (parent.length > 1) {\n            throw new Error(\"Geocoder can only be added to a single html element\");\n          }\n\n          addToExistingContainer(this, parent[0]);\n        } else {\n          throw new Error(\"Error: addTo must be a mapbox-gl-js map, an html element, or a CSS selector query for a single html element\");\n        }\n  },\n  onAdd: function onAdd(map) {\n    if (map && typeof map != 'string') {\n      this._map = map;\n    }\n\n    this.setLanguage();\n\n    if (!this.options.localGeocoderOnly) {\n      this.geocoderService = mbxGeocoder(MapboxClient({\n        accessToken: this.options.accessToken,\n        origin: this.options.origin\n      }));\n    }\n\n    if (this.options.localGeocoderOnly && !this.options.localGeocoder) {\n      throw new Error(\"A localGeocoder function must be specified to use localGeocoderOnly mode\");\n    }\n\n    this.eventManager = new MapboxEventManager(this.options);\n    this._onChange = this._onChange.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onPaste = this._onPaste.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._showButton = this._showButton.bind(this);\n    this._hideButton = this._hideButton.bind(this);\n    this._onQueryResult = this._onQueryResult.bind(this);\n    this.clear = this.clear.bind(this);\n    this._updateProximity = this._updateProximity.bind(this);\n    this._collapse = this._collapse.bind(this);\n    this._unCollapse = this._unCollapse.bind(this);\n    this._clear = this._clear.bind(this);\n    this._clearOnBlur = this._clearOnBlur.bind(this);\n    var el = this.container = document.createElement('div');\n    el.className = 'mapboxgl-ctrl-geocoder mapboxgl-ctrl';\n    var searchIcon = this.createIcon('search', '<path d=\"M7.4 2.5c-2.7 0-4.9 2.2-4.9 4.9s2.2 4.9 4.9 4.9c1 0 1.8-.2 2.5-.8l3.7 3.7c.2.2.4.3.8.3.7 0 1.1-.4 1.1-1.1 0-.3-.1-.5-.3-.8L11.4 10c.4-.8.8-1.6.8-2.5.1-2.8-2.1-5-4.8-5zm0 1.6c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2-3.3-1.3-3.3-3.1 1.4-3.3 3.3-3.3z\"/>');\n    this._inputEl = document.createElement('input');\n    this._inputEl.type = 'text';\n    this._inputEl.className = 'mapboxgl-ctrl-geocoder--input';\n    this.setPlaceholder();\n\n    if (this.options.collapsed) {\n      this._collapse();\n\n      this.container.addEventListener('mouseenter', this._unCollapse);\n      this.container.addEventListener('mouseleave', this._collapse);\n\n      this._inputEl.addEventListener('focus', this._unCollapse);\n    }\n\n    if (this.options.collapsed || this.options.clearOnBlur) {\n      this._inputEl.addEventListener('blur', this._onBlur);\n    }\n\n    this._inputEl.addEventListener('keydown', debounce(this._onKeyDown, 200));\n\n    this._inputEl.addEventListener('paste', this._onPaste);\n\n    this._inputEl.addEventListener('change', this._onChange);\n\n    this.container.addEventListener('mouseenter', this._showButton);\n    this.container.addEventListener('mouseleave', this._hideButton);\n\n    this._inputEl.addEventListener('keyup', function (e) {\n      this.eventManager.keyevent(e, this);\n    }.bind(this));\n\n    var actions = document.createElement('div');\n    actions.classList.add('mapboxgl-ctrl-geocoder--pin-right');\n    this._clearEl = document.createElement('button');\n\n    this._clearEl.setAttribute('aria-label', 'Clear');\n\n    this._clearEl.addEventListener('click', this.clear);\n\n    this._clearEl.className = 'mapboxgl-ctrl-geocoder--button';\n    var buttonIcon = this.createIcon('close', '<path d=\"M3.8 2.5c-.6 0-1.3.7-1.3 1.3 0 .3.2.7.5.8L7.2 9 3 13.2c-.3.3-.5.7-.5 1 0 .6.7 1.3 1.3 1.3.3 0 .7-.2 1-.5L9 10.8l4.2 4.2c.2.3.7.3 1 .3.6 0 1.3-.7 1.3-1.3 0-.3-.2-.7-.3-1l-4.4-4L15 4.6c.3-.2.5-.5.5-.8 0-.7-.7-1.3-1.3-1.3-.3 0-.7.2-1 .3L9 7.1 4.8 2.8c-.3-.1-.7-.3-1-.3z\"/>');\n\n    this._clearEl.appendChild(buttonIcon);\n\n    this._loadingEl = this.createIcon('loading', '<path fill=\"#333\" d=\"M4.4 4.4l.8.8c2.1-2.1 5.5-2.1 7.6 0l.8-.8c-2.5-2.5-6.7-2.5-9.2 0z\"/><path opacity=\".1\" d=\"M12.8 12.9c-2.1 2.1-5.5 2.1-7.6 0-2.1-2.1-2.1-5.5 0-7.7l-.8-.8c-2.5 2.5-2.5 6.7 0 9.2s6.6 2.5 9.2 0 2.5-6.6 0-9.2l-.8.8c2.2 2.1 2.2 5.6 0 7.7z\"/>');\n    actions.appendChild(this._clearEl);\n    actions.appendChild(this._loadingEl);\n    el.appendChild(searchIcon);\n    el.appendChild(this._inputEl);\n    el.appendChild(actions);\n    this._typeahead = new Typeahead(this._inputEl, [], {\n      filter: false,\n      minLength: this.options.minLength,\n      limit: this.options.limit\n    });\n    this.setRenderFunction(this.options.render);\n    this._typeahead.getItemValue = this.options.getItemValue;\n    this.mapMarker = null;\n    this._handleMarker = this._handleMarker.bind(this);\n\n    if (this._map) {\n      if (this.options.trackProximity) {\n        this._updateProximity();\n\n        this._map.on('moveend', this._updateProximity);\n      }\n\n      this._mapboxgl = this.options.mapboxgl;\n\n      if (!this._mapboxgl && this.options.marker) {\n        // eslint-disable-next-line no-console\n        console.error(\"No mapboxgl detected in options. Map markers are disabled. Please set options.mapboxgl.\");\n        this.options.marker = false;\n      }\n    }\n\n    return el;\n  },\n  createIcon: function createIcon(name, path) {\n    var icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    icon.setAttribute('class', 'mapboxgl-ctrl-geocoder--icon mapboxgl-ctrl-geocoder--icon-' + name);\n    icon.setAttribute('viewBox', '0 0 18 18');\n    icon.setAttribute('xml:space', 'preserve');\n    icon.setAttribute('width', 18);\n    icon.setAttribute('height', 18); // IE does not have innerHTML for SVG nodes\n\n    if (!('innerHTML' in icon)) {\n      var SVGNodeContainer = document.createElement('div');\n      SVGNodeContainer.innerHTML = '<svg>' + path.valueOf().toString() + '</svg>';\n      var SVGNode = SVGNodeContainer.firstChild,\n          SVGPath = SVGNode.firstChild;\n      icon.appendChild(SVGPath);\n    } else {\n      icon.innerHTML = path;\n    }\n\n    return icon;\n  },\n  onRemove: function onRemove() {\n    this.container.parentNode.removeChild(this.container);\n\n    if (this.options.trackProximity && this._map) {\n      this._map.off('moveend', this._updateProximity);\n    }\n\n    this._removeMarker();\n\n    this._map = null;\n    return this;\n  },\n  _onPaste: function _onPaste(e) {\n    var value = (e.clipboardData || window.clipboardData).getData('text');\n\n    if (value.length >= this.options.minLength) {\n      this._geocode(value);\n    }\n  },\n  _onKeyDown: function _onKeyDown(e) {\n    var ESC_KEY_CODE = 27,\n        TAB_KEY_CODE = 9;\n\n    if (e.keyCode === ESC_KEY_CODE && this.options.clearAndBlurOnEsc) {\n      this._clear(e);\n\n      return this._inputEl.blur();\n    } // if target has shadowRoot, then get the actual active element inside the shadowRoot\n\n\n    var target = e.target && e.target.shadowRoot ? e.target.shadowRoot.activeElement : e.target;\n    var value = target ? target.value : '';\n\n    if (!value) {\n      this.fresh = true; // the user has removed all the text\n\n      if (e.keyCode !== TAB_KEY_CODE) this.clear(e);\n      return this._clearEl.style.display = 'none';\n    } // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n\n\n    if (e.metaKey || [TAB_KEY_CODE, ESC_KEY_CODE, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1) return;\n\n    if (target.value.length >= this.options.minLength) {\n      this._geocode(target.value);\n    }\n  },\n  _showButton: function _showButton() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'block';\n  },\n  _hideButton: function _hideButton() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'none';\n  },\n  _onBlur: function _onBlur(e) {\n    if (this.options.clearOnBlur) {\n      this._clearOnBlur(e);\n    }\n\n    if (this.options.collapsed) {\n      this._collapse();\n    }\n  },\n  _onChange: function _onChange() {\n    var selected = this._typeahead.selected;\n\n    if (selected && JSON.stringify(selected) !== this.lastSelected) {\n      this._clearEl.style.display = 'none';\n\n      if (this.options.flyTo) {\n        var flyOptions;\n\n        if (selected.properties && exceptions[selected.properties.short_code]) {\n          // Certain geocoder search results return (and therefore zoom to fit)\n          // an unexpectedly large bounding box: for example, both Russia and the\n          // USA span both sides of -180/180, or France includes the island of\n          // Reunion in the Indian Ocean. An incomplete list of these exceptions\n          // at ./exceptions.json provides \"reasonable\" bounding boxes as a\n          // short-term solution; this may be amended as necessary.\n          flyOptions = extend({}, this.options.flyTo);\n\n          if (this._map) {\n            this._map.fitBounds(exceptions[selected.properties.short_code].bbox, flyOptions);\n          }\n        } else if (selected.bbox) {\n          var bbox = selected.bbox;\n          flyOptions = extend({}, this.options.flyTo);\n\n          if (this._map) {\n            this._map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], flyOptions);\n          }\n        } else {\n          var defaultFlyOptions = {\n            zoom: this.options.zoom\n          };\n          flyOptions = extend({}, defaultFlyOptions, this.options.flyTo); //  ensure that center is not overriden by custom options\n\n          flyOptions.center = selected.center;\n\n          if (this._map) {\n            this._map.flyTo(flyOptions);\n          }\n        }\n      }\n\n      if (this.options.marker && this._mapboxgl) {\n        this._handleMarker(selected);\n      } // After selecting a feature, re-focus the textarea and set\n      // cursor at start.\n\n\n      this._inputEl.focus();\n\n      this._inputEl.scrollLeft = 0;\n\n      this._inputEl.setSelectionRange(0, 0);\n\n      this.lastSelected = JSON.stringify(selected);\n\n      this._eventEmitter.emit('result', {\n        result: selected\n      });\n\n      this.eventManager.select(selected, this);\n    }\n  },\n  _geocode: function _geocode(searchInput) {\n    this._loadingEl.style.display = 'block';\n\n    this._eventEmitter.emit('loading', {\n      query: searchInput\n    });\n\n    this.inputString = searchInput; // Possible config proprerties to pass to client\n\n    var keys = ['bbox', 'limit', 'proximity', 'countries', 'types', 'language', 'reverseMode', 'mode'];\n    var self = this; // Create config object\n\n    var config = keys.reduce(function (config, key) {\n      if (self.options[key]) {\n        // countries, types, and language need to be passed in as arrays to client\n        // https://github.com/mapbox/mapbox-sdk-js/blob/master/services/geocoding.js#L38-L47\n        ['countries', 'types', 'language'].indexOf(key) > -1 ? config[key] = self.options[key].split(/[\\s,]+/) : config[key] = self.options[key];\n\n        if (key === 'proximity' && self.options[key] && typeof self.options[key].longitude === 'number' && typeof self.options[key].latitude === 'number') {\n          config[key] = [self.options[key].longitude, self.options[key].latitude];\n        }\n      }\n\n      return config;\n    }, {});\n    var request;\n\n    if (this.options.localGeocoderOnly) {\n      request = Promise.resolve();\n    } // check if searchInput resembles coordinates, and if it does,\n    // make the request a reverseGeocode\n    else if (this.options.reverseGeocode && /(-?\\d+\\.?\\d*)[, ]+(-?\\d+\\.?\\d*)[ ]*$/.test(searchInput)) {\n        // parse coordinates\n        var coords = searchInput.split(/[\\s(,)?]+/).map(function (c) {\n          return parseFloat(c, 10);\n        }).reverse(); // client only accepts one type for reverseGeocode, so\n        // use first config type if one, if not default to poi\n\n        config.types ? [config.types[0]] : [\"poi\"];\n        config = extend(config, {\n          query: coords,\n          limit: 1\n        }); // drop proximity which may have been set by trackProximity since it's not supported by the reverseGeocoder\n\n        if ('proximity' in config) {\n          delete config.proximity;\n        }\n\n        request = this.geocoderService.reverseGeocode(config).send();\n      } else {\n        config = extend(config, {\n          query: searchInput\n        });\n        request = this.geocoderService.forwardGeocode(config).send();\n      }\n\n    var localGeocoderRes = [];\n\n    if (this.options.localGeocoder) {\n      localGeocoderRes = this.options.localGeocoder(searchInput);\n\n      if (!localGeocoderRes) {\n        localGeocoderRes = [];\n      }\n    }\n\n    request.then(function (response) {\n      this._loadingEl.style.display = 'none';\n      var res = {};\n\n      if (!response) {\n        res = {\n          type: 'FeatureCollection',\n          features: []\n        };\n      } else if (response.statusCode == '200') {\n        res = response.body;\n        res.request = response.request;\n        res.headers = response.headers;\n      }\n\n      res.config = config;\n\n      if (this.fresh) {\n        this.eventManager.start(this);\n        this.fresh = false;\n      } // supplement Mapbox Geocoding API results with locally populated results\n\n\n      res.features = res.features ? localGeocoderRes.concat(res.features) : localGeocoderRes; // apply results filter if provided\n\n      if (this.options.filter && res.features.length) {\n        res.features = res.features.filter(this.options.filter);\n      }\n\n      if (res.features.length) {\n        this._clearEl.style.display = 'block';\n\n        this._eventEmitter.emit('results', res);\n\n        this._typeahead.update(res.features);\n      } else {\n        this._clearEl.style.display = 'none';\n        this._typeahead.selected = null;\n\n        this._renderNoResults();\n\n        this._eventEmitter.emit('results', res);\n      }\n    }.bind(this));\n    request.catch(function (err) {\n      this._loadingEl.style.display = 'none'; // in the event of an error in the Mapbox Geocoding API still display results from the localGeocoder\n\n      if (localGeocoderRes.length && this.options.localGeocoder) {\n        this._clearEl.style.display = 'block';\n\n        this._typeahead.update(localGeocoderRes);\n      } else {\n        this._clearEl.style.display = 'none';\n        this._typeahead.selected = null;\n\n        this._renderError();\n      }\n\n      this._eventEmitter.emit('results', {\n        features: localGeocoderRes\n      });\n\n      this._eventEmitter.emit('error', {\n        error: err\n      });\n    }.bind(this));\n    return request;\n  },\n\n  /**\n   * Shared logic for clearing input\n   * @param {Event} [ev] the event that triggered the clear, if available\n   * @private\n   *\n   */\n  _clear: function _clear(ev) {\n    if (ev) ev.preventDefault();\n    this._inputEl.value = '';\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    this._onChange();\n\n    this._clearEl.style.display = 'none';\n\n    this._removeMarker();\n\n    this.lastSelected = null;\n\n    this._eventEmitter.emit('clear');\n\n    this.fresh = true;\n  },\n\n  /**\n   * Clear and then focus the input.\n   * @param {Event} [ev] the event that triggered the clear, if available\n   *\n   */\n  clear: function clear(ev) {\n    this._clear(ev);\n\n    this._inputEl.focus();\n  },\n\n  /**\n   * Clear the input, without refocusing it. Used to implement clearOnBlur\n   * constructor option.\n   * @param {Event} [ev] the blur event\n   * @private\n   */\n  _clearOnBlur: function _clearOnBlur(ev) {\n    var ctx = this;\n    /*\n     * If relatedTarget is not found, assume user targeted the suggestions list.\n     * In that case, do not clear on blur. There are other edge cases where\n     * ev.relatedTarget could be null. Clicking on list always results in null\n     * relatedtarget because of upstream behavior in `suggestions`.\n     *\n     * The ideal solution would be to check if ev.relatedTarget is a child of\n     * the list. See issue #258 for details on why we can't do that yet.\n     */\n\n    if (ev.relatedTarget) {\n      ctx._clear(ev);\n    }\n  },\n  _onQueryResult: function _onQueryResult(response) {\n    var results = response.body;\n    if (!results.features.length) return;\n    var result = results.features[0];\n    this._typeahead.selected = result;\n    this._inputEl.value = result.place_name;\n\n    this._onChange();\n  },\n  _updateProximity: function _updateProximity() {\n    // proximity is designed for local scale, if the user is looking at the whole world,\n    // it doesn't make sense to factor in the arbitrary centre of the map\n    if (!this._map) {\n      return;\n    }\n\n    if (this._map.getZoom() > 9) {\n      var center = this._map.getCenter().wrap();\n\n      this.setProximity({\n        longitude: center.lng,\n        latitude: center.lat\n      });\n    } else {\n      this.setProximity(null);\n    }\n  },\n  _collapse: function _collapse() {\n    // do not collapse if input is in focus\n    if (!this._inputEl.value && this._inputEl !== document.activeElement) this.container.classList.add('mapboxgl-ctrl-geocoder--collapsed');\n  },\n  _unCollapse: function _unCollapse() {\n    this.container.classList.remove('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  /**\n   * Set & query the input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  query: function query(searchInput) {\n    this._geocode(searchInput).then(this._onQueryResult);\n\n    return this;\n  },\n  _renderError: function _renderError() {\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error'>There was an error reaching the server</div>\";\n\n    this._renderMessage(errorMessage);\n  },\n  _renderNoResults: function _renderNoResults() {\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error mapbox-gl-geocoder--no-results'>No results found</div>\";\n\n    this._renderMessage(errorMessage);\n  },\n  _renderMessage: function _renderMessage(msg) {\n    this._typeahead.update([]);\n\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    this._typeahead.renderError(msg);\n  },\n\n  /**\n   * Get the text to use as the search bar placeholder\n   *\n   * If placeholder is provided in options, then use options.placeholder\n   * Otherwise, if language is provided in options, then use the localized string of the first language if available\n   * Otherwise use the default\n   *\n   * @returns {String} the value to use as the search bar placeholder\n   * @private\n   */\n  _getPlaceholderText: function _getPlaceholderText() {\n    if (this.options.placeholder) return this.options.placeholder;\n\n    if (this.options.language) {\n      var firstLanguage = this.options.language.split(\",\")[0];\n      var language = subtag.language(firstLanguage);\n      var localizedValue = localization.placeholder[language];\n      if (localizedValue) return localizedValue;\n    }\n\n    return 'Search';\n  },\n\n  /**\n   * Set input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  setInput: function setInput(searchInput) {\n    // Set input value to passed value and clear everything else.\n    this._inputEl.value = searchInput;\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    if (searchInput.length >= this.options.minLength) {\n      this._geocode(searchInput);\n    }\n\n    return this;\n  },\n\n  /**\n   * Set proximity\n   * @param {Object} proximity The new `options.proximity` value. This is a geographical point given as an object with `latitude` and `longitude` properties.\n   * @returns {MapboxGeocoder} this\n   */\n  setProximity: function setProximity(proximity) {\n    this.options.proximity = proximity;\n    return this;\n  },\n\n  /**\n   * Get proximity\n   * @returns {Object} The geocoder proximity\n   */\n  getProximity: function getProximity() {\n    return this.options.proximity;\n  },\n\n  /**\n   * Set the render function used in the results dropdown\n   * @param {Function} fn The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n   * @returns {MapboxGeocoder} this\n   */\n  setRenderFunction: function setRenderFunction(fn) {\n    if (fn && typeof fn == \"function\") {\n      this._typeahead.render = fn;\n    }\n\n    return this;\n  },\n\n  /**\n   * Get the function used to render the results dropdown\n   *\n   * @returns {Function} the render function\n   */\n  getRenderFunction: function getRenderFunction() {\n    return this._typeahead.render;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   *\n   * Look first at the explicitly set options otherwise use the browser's language settings\n   * @param {String} language Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas.\n   * @returns {MapboxGeocoder} this\n   */\n  setLanguage: function setLanguage(language) {\n    var browserLocale = navigator.language || navigator.userLanguage || navigator.browserLanguage;\n    this.options.language = language || this.options.language || browserLocale;\n    return this;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   * @returns {String} The language(s) used by the plugin, if any\n   */\n  getLanguage: function getLanguage() {\n    return this.options.language;\n  },\n\n  /**\n   * Get the zoom level the map will move to when there is no bounding box on the selected result\n   * @returns {Number} the map zoom\n   */\n  getZoom: function getZoom() {\n    return this.options.zoom;\n  },\n\n  /**\n   * Set the zoom level\n   * @param {Number} zoom The zoom level that the map should animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n   * @returns {MapboxGeocoder} this\n   */\n  setZoom: function setZoom(zoom) {\n    this.options.zoom = zoom;\n    return this;\n  },\n\n  /**\n   * Get the parameters used to fly to the selected response, if any\n   * @returns {Boolean|Object} The `flyTo` option\n   */\n  getFlyTo: function getFlyTo() {\n    return this.options.flyTo;\n  },\n\n  /**\n   * Set the flyTo options\n   * @param {Boolean|Object} flyTo If false, animating the map to a selected result is disabled. If true, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n   */\n  setFlyTo: function setFlyTo(flyTo) {\n    this.options.flyTo = flyTo;\n    return this;\n  },\n\n  /**\n   * Get the value of the placeholder string\n   * @returns {String} The input element's placeholder value\n   */\n  getPlaceholder: function getPlaceholder() {\n    return this.options.placeholder;\n  },\n\n  /**\n   * Set the value of the input element's placeholder\n   * @param {String} placeholder the text to use as the input element's placeholder\n   * @returns {MapboxGeocoder} this\n   */\n  setPlaceholder: function setPlaceholder(placeholder) {\n    this.placeholder = placeholder ? placeholder : this._getPlaceholderText();\n    this._inputEl.placeholder = this.placeholder;\n\n    this._inputEl.setAttribute('aria-label', this.placeholder);\n\n    return this;\n  },\n\n  /**\n   * Get the bounding box used by the plugin\n   * @returns {Array<Number>} the bounding box, if any\n   */\n  getBbox: function getBbox() {\n    return this.options.bbox;\n  },\n\n  /**\n   * Set the bounding box to limit search results to\n   * @param {Array<Number>} bbox a bounding box given as an array in the format [minX, minY, maxX, maxY].\n   * @returns {MapboxGeocoder} this\n   */\n  setBbox: function setBbox(bbox) {\n    this.options.bbox = bbox;\n    return this;\n  },\n\n  /**\n   * Get a list of the countries to limit search results to\n   * @returns {String} a comma separated list of countries to limit to, if any\n   */\n  getCountries: function getCountries() {\n    return this.options.countries;\n  },\n\n  /**\n   * Set the countries to limit search results to\n   * @param {String} countries a comma separated list of countries to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setCountries: function setCountries(countries) {\n    this.options.countries = countries;\n    return this;\n  },\n\n  /**\n   * Get a list of the types to limit search results to\n   * @returns {String} a comma separated list of types to limit to\n   */\n  getTypes: function getTypes() {\n    return this.options.types;\n  },\n\n  /**\n   * Set the types to limit search results to\n   * @param {String} countries a comma separated list of types to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setTypes: function setTypes(types) {\n    this.options.types = types;\n    return this;\n  },\n\n  /**\n   * Get the minimum number of characters typed to trigger results used in the plugin\n   * @returns {Number} The minimum length in characters before a search is triggered\n   */\n  getMinLength: function getMinLength() {\n    return this.options.minLength;\n  },\n\n  /**\n   * Set the minimum number of characters typed to trigger results used by the plugin\n   * @param {Number} minLength the minimum length in characters\n   * @returns {MapboxGeocoder} this\n   */\n  setMinLength: function setMinLength(minLength) {\n    this.options.minLength = minLength;\n    if (this._typeahead) this._typeahead.minLength = minLength;\n    return this;\n  },\n\n  /**\n   * Get the limit value for the number of results to display used by the plugin\n   * @returns {Number} The limit value for the number of results to display used by the plugin\n   */\n  getLimit: function getLimit() {\n    return this.options.limit;\n  },\n\n  /**\n   * Set the limit value for the number of results to display used by the plugin\n   * @param {Number} limit the number of search results to return\n   * @returns {MapboxGeocoder}\n   */\n  setLimit: function setLimit(limit) {\n    this.options.limit = limit;\n    if (this._typeahead) this._typeahead.options.limit = limit;\n    return this;\n  },\n\n  /**\n   * Get the filter function used by the plugin\n   * @returns {Function} the filter function\n   */\n  getFilter: function getFilter() {\n    return this.options.filter;\n  },\n\n  /**\n   * Set the filter function used by the plugin.\n   * @param {Function} filter A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n   * @returns {MapboxGeocoder} this\n   */\n  setFilter: function setFilter(filter) {\n    this.options.filter = filter;\n    return this;\n  },\n\n  /**\n   * Set the geocoding endpoint used by the plugin.\n   * @param {Function} origin A function which accepts an HTTPS URL to specify the endpoint to query results from.\n   * @returns {MapboxGeocoder} this\n   */\n  setOrigin: function setOrigin(origin) {\n    this.options.origin = origin;\n    this.geocoderService = mbxGeocoder(MapboxClient({\n      accessToken: this.options.accessToken,\n      origin: this.options.origin\n    }));\n    return this;\n  },\n\n  /**\n   * Get the geocoding endpoint the plugin is currently set to\n   * @returns {Function} the endpoint URL\n   */\n  getOrigin: function getOrigin() {\n    return this.options.origin;\n  },\n\n  /**\n   * Handle the placement of a result marking the selected result\n   * @private\n   * @param {Object} selected the selected geojson feature\n   * @returns {MapboxGeocoder} this\n   */\n  _handleMarker: function _handleMarker(selected) {\n    // clean up any old marker that might be present\n    if (!this._map) {\n      return;\n    }\n\n    this._removeMarker();\n\n    var defaultMarkerOptions = {\n      color: '#4668F2'\n    };\n    var markerOptions = extend({}, defaultMarkerOptions, this.options.marker);\n    this.mapMarker = new this._mapboxgl.Marker(markerOptions);\n\n    if (selected.center) {\n      this.mapMarker.setLngLat(selected.center).addTo(this._map);\n    } else if (selected.geometry && selected.geometry.type && selected.geometry.type === 'Point' && selected.geometry.coordinates) {\n      this.mapMarker.setLngLat(selected.geometry.coordinates).addTo(this._map);\n    }\n\n    return this;\n  },\n\n  /**\n   * Handle the removal of a result marker\n   * @private\n   */\n  _removeMarker: function _removeMarker() {\n    if (this.mapMarker) {\n      this.mapMarker.remove();\n      this.mapMarker = null;\n    }\n  },\n\n  /**\n   * Subscribe to events that happen within the plugin.\n   * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n   *\n   * - __clear__ `Emitted when the input is cleared`\n   * - __loading__ `{ query } Emitted when the geocoder is looking up a query`\n   * - __results__ `{ results } Fired when the geocoder returns a response`\n   * - __result__ `{ result } Fired when input is set`\n   * - __error__ `{ error } Error as string`\n   * @param {Function} fn function that's called when the event is emitted.\n   * @returns {MapboxGeocoder} this;\n   */\n  on: function on(type, fn) {\n    this._eventEmitter.on(type, fn);\n\n    return this;\n  },\n\n  /**\n   * Remove an event\n   * @returns {MapboxGeocoder} this\n   * @param {String} type Event name.\n   * @param {Function} fn Function that should unsubscribe to the event emitted.\n   */\n  off: function off(type, fn) {\n    this._eventEmitter.removeListener(type, fn);\n\n    this.eventManager.remove();\n    return this;\n  }\n};\nmodule.exports = MapboxGeocoder;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-gl-geocoder/lib/index.js"],"names":["Typeahead","require","debounce","extend","EventEmitter","exceptions","MapboxClient","mbxGeocoder","MapboxEventManager","localization","subtag","MapboxGeocoder","options","_eventEmitter","inputString","fresh","lastSelected","prototype","zoom","flyTo","trackProximity","minLength","reverseGeocode","limit","origin","enableEventLogging","marker","mapboxgl","collapsed","clearAndBlurOnEsc","clearOnBlur","getItemValue","item","place_name","render","placeName","split","splice","length","join","addTo","container","addToExistingContainer","geocoder","document","body","contains","Error","el","onAdd","appendChild","_controlContainer","addControl","HTMLElement","parent","querySelectorAll","map","_map","setLanguage","localGeocoderOnly","geocoderService","accessToken","localGeocoder","eventManager","_onChange","bind","_onKeyDown","_onPaste","_onBlur","_showButton","_hideButton","_onQueryResult","clear","_updateProximity","_collapse","_unCollapse","_clear","_clearOnBlur","createElement","className","searchIcon","createIcon","_inputEl","type","setPlaceholder","addEventListener","e","keyevent","actions","classList","add","_clearEl","setAttribute","buttonIcon","_loadingEl","_typeahead","filter","setRenderFunction","mapMarker","_handleMarker","on","_mapboxgl","console","error","name","path","icon","createElementNS","SVGNodeContainer","innerHTML","valueOf","toString","SVGNode","firstChild","SVGPath","onRemove","parentNode","removeChild","off","_removeMarker","value","clipboardData","window","getData","_geocode","ESC_KEY_CODE","TAB_KEY_CODE","keyCode","blur","target","shadowRoot","activeElement","style","display","metaKey","indexOf","selected","JSON","stringify","flyOptions","properties","short_code","fitBounds","bbox","defaultFlyOptions","center","focus","scrollLeft","setSelectionRange","emit","result","select","searchInput","query","keys","self","config","reduce","key","longitude","latitude","request","Promise","resolve","test","coords","c","parseFloat","reverse","types","proximity","send","forwardGeocode","localGeocoderRes","then","response","res","features","statusCode","headers","start","concat","update","_renderNoResults","catch","err","_renderError","ev","preventDefault","ctx","relatedTarget","results","getZoom","getCenter","wrap","setProximity","lng","lat","remove","errorMessage","_renderMessage","msg","renderError","_getPlaceholderText","placeholder","language","firstLanguage","localizedValue","setInput","getProximity","fn","getRenderFunction","browserLocale","navigator","userLanguage","browserLanguage","getLanguage","setZoom","getFlyTo","setFlyTo","getPlaceholder","getBbox","setBbox","getCountries","countries","setCountries","getTypes","setTypes","getMinLength","setMinLength","getLimit","setLimit","getFilter","setFilter","setOrigin","getOrigin","defaultMarkerOptions","color","markerOptions","Marker","setLngLat","geometry","coordinates","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Typeahead = require('suggestions');\nvar debounce = require('lodash.debounce');\nvar extend = require('xtend');\nvar EventEmitter = require('events').EventEmitter;\nvar exceptions = require('./exceptions');\nvar MapboxClient = require('@mapbox/mapbox-sdk');\nvar mbxGeocoder = require('@mapbox/mapbox-sdk/services/geocoding');\nvar MapboxEventManager = require('./events');\nvar localization = require('./localization');\nvar subtag = require('subtag');\n\n/**\n * A geocoder component using the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/#geocoding)\n * @class MapboxGeocoder\n * @param {Object} options\n * @param {String} options.accessToken Required.\n * @param {String} [options.origin=https://api.mapbox.com] Use to set a custom API origin.\n * @param {Object} [options.mapboxgl] A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if `options.marker` is `true`.\n * @param {Number} [options.zoom=16] On geocoded result what zoom level should the map animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n * @param {Boolean|Object} [options.flyTo=true] If `false`, animating the map to a selected result is disabled. If `true`, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n * @param {String} [options.placeholder=Search] Override the default placeholder attribute value.\n * @param {Object} [options.proximity] a proximity argument: this is\n * a geographical point given as an object with `latitude` and `longitude`\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Boolean} [options.trackProximity=true] If `true`, the geocoder proximity will automatically update based on the map view.\n * @param {Boolean} [options.collapsed=false] If `true`, the geocoder control will collapse until hovered or in focus.\n * @param {Boolean} [options.clearAndBlurOnEsc=false] If `true`, the geocoder control will clear it's contents and blur when user presses the escape key.\n * @param {Boolean} [options.clearOnBlur=false] If `true`, the geocoder control will clear its value when the input blurs.\n * @param {Array} [options.bbox] a bounding box argument: this is\n * a bounding box given as an array in the format `[minX, minY, maxX, maxY]`.\n * Search results will be limited to the bounding box.\n * @param {string} [options.countries] a comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {string} [options.types] a comma seperated list of types that filter\n * results to match those specified. See https://docs.mapbox.com/api/search/#data-types\n * for available types.\n * If reverseGeocode is enabled, you should specify one type. If you configure more than one type, the first type will be used.\n * @param {Number} [options.minLength=2] Minimum number of characters to enter before results are shown.\n * @param {Number} [options.limit=5] Maximum number of results to show.\n * @param {string} [options.language] Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas. Defaults to the browser's language settings.\n * @param {Function} [options.filter] A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n * @param {Function} [options.localGeocoder] A function accepting the query string which performs local geocoding to supplement results from the Mapbox Geocoding API. Expected to return an Array of GeoJSON Features in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format.\n * @param {distance|score} [options.reverseMode=distance] - Set the factors that are used to sort nearby results.\n * @param {boolean} [options.reverseGeocode=false] If `true`, enable reverse geocoding mode. In reverse geocoding, search input is expected to be coordinates in the form `lat, lon`, with suggestions being the reverse geocodes.\n * @param {Boolean} [options.enableEventLogging=true] Allow Mapbox to collect anonymous usage statistics from the plugin.\n * @param {Boolean|Object} [options.marker=true]  If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that `options.mapboxgl` also be set.\n * @param {Function} [options.render] A function that specifies how the results should be rendered in the dropdown menu. This function should accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. Any HTML in the returned string will be rendered.\n * @param {Function} [options.getItemValue] A function that specifies how the selected result should be rendered in the search bar. This function should accept a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. HTML tags in the output string will not be rendered. Defaults to `(item) => item.place_name`.\n * @param {String} [options.mode=mapbox.places] A string specifying the geocoding [endpoint](https://docs.mapbox.com/api/search/#endpoints) to query. Options are `mapbox.places` and `mapbox.places-permanent`. The `mapbox.places-permanent` mode requires an enterprise license for permanent geocodes.\n * @param {Boolean} [options.localGeocoderOnly=false] If `true`, indicates that the `localGeocoder` results should be the only ones returned to the user. If `false`, indicates that the `localGeocoder` results should be combined with those from the Mapbox API with the `localGeocoder` results ranked higher.\n * @example\n * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n * map.addControl(geocoder);\n * @return {MapboxGeocoder} `this`\n *\n */\n\nfunction MapboxGeocoder(options) {\n  this._eventEmitter = new EventEmitter();\n  this.options = extend({}, this.options, options);\n  this.inputString = '';\n  this.fresh = true;\n  this.lastSelected = null;\n}\n\nMapboxGeocoder.prototype = {\n  options: {\n    zoom: 16,\n    flyTo: true,\n    trackProximity: true,\n    minLength: 2,\n    reverseGeocode: false,\n    limit: 5,\n    origin: 'https://api.mapbox.com',\n    enableEventLogging: true,\n    marker: true,\n    mapboxgl: null,\n    collapsed: false,\n    clearAndBlurOnEsc: false,\n    clearOnBlur: false,\n    getItemValue: function(item) {\n      return item.place_name\n    },\n    render: function(item) {\n      var placeName = item.place_name.split(',');\n      return '<div class=\"mapboxgl-ctrl-geocoder--suggestion\"><div class=\"mapboxgl-ctrl-geocoder--suggestion-title\">' + placeName[0]+ '</div><div class=\"mapboxgl-ctrl-geocoder--suggestion-address\">' + placeName.splice(1, placeName.length).join(',') + '</div></div>';\n    }\n  },\n\n  /**\n   * Add the geocoder to a container. The container can be either a `mapboxgl.Map`, an `HTMLElement` or a CSS selector string.\n   *\n   * If the container is a [`mapboxgl.Map`](https://docs.mapbox.com/mapbox-gl-js/api/map/), this function will behave identically to [`Map.addControl(geocoder)`](https://docs.mapbox.com/mapbox-gl-js/api/map/#map#addcontrol).\n   * If the container is an instance of [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement), then the geocoder will be appended as a child of that [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement).\n   * If the container is a [CSS selector string](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors), the geocoder will be appended to the element returned from the query.\n   *\n   * This function will throw an error if the container is none of the above.\n   * It will also throw an error if the referenced HTML element cannot be found in the `document.body`.\n   *\n   * For example, if the HTML body contains the element `<div id='geocoder-container'></div>`, the following script will append the geocoder to `#geocoder-container`:\n   *\n   * ```javascript\n   * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n   * geocoder.addTo('#geocoder-container');\n   * ```\n   * @param {String|HTMLElement|mapboxgl.Map} container A reference to the container to which to add the geocoder\n   */\n  addTo: function(container){\n\n    function addToExistingContainer (geocoder, container) {\n      if (!document.body.contains(container)) {\n        throw new Error(\"Element provided to #addTo() exists, but is not in the DOM\")\n      }\n      const el = geocoder.onAdd(); //returns the input elements, which are then added to the requested html container\n      container.appendChild(el);\n    }\n\n    // if the container is a map, add the control like normal\n    if (container._controlContainer){\n      //  it's a mapbox-gl map, add like normal\n      container.addControl(this);\n    }\n    // if the container is an HTMLElement, then set the parent to be that element\n    else if (container instanceof HTMLElement) {\n      addToExistingContainer(this, container);\n    }\n    // if the container is a string, treat it as a CSS query\n    else if (typeof container == 'string'){\n      const parent = document.querySelectorAll(container);\n      if (parent.length === 0){\n        throw new Error(\"Element \", container, \"not found.\")\n      }\n\n      if (parent.length > 1){\n        throw new Error(\"Geocoder can only be added to a single html element\")\n      }\n\n      addToExistingContainer(this, parent[0]);\n    }else{\n      throw new Error(\"Error: addTo must be a mapbox-gl-js map, an html element, or a CSS selector query for a single html element\")\n    }\n  },\n\n  onAdd: function(map) {\n    if (map && typeof map != 'string'){\n      this._map = map;\n    }\n\n    this.setLanguage();\n\n    if (!this.options.localGeocoderOnly){\n      this.geocoderService = mbxGeocoder(\n        MapboxClient({\n          accessToken: this.options.accessToken,\n          origin: this.options.origin\n        })\n      );\n    }\n\n    if (this.options.localGeocoderOnly && !this.options.localGeocoder){\n      throw new Error(\"A localGeocoder function must be specified to use localGeocoderOnly mode\")\n    }\n\n    this.eventManager = new MapboxEventManager(this.options);\n\n    this._onChange = this._onChange.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onPaste = this._onPaste.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._showButton = this._showButton.bind(this);\n    this._hideButton = this._hideButton.bind(this);\n    this._onQueryResult = this._onQueryResult.bind(this);\n    this.clear = this.clear.bind(this);\n    this._updateProximity = this._updateProximity.bind(this);\n    this._collapse = this._collapse.bind(this);\n    this._unCollapse = this._unCollapse.bind(this);\n    this._clear = this._clear.bind(this);\n    this._clearOnBlur = this._clearOnBlur.bind(this);\n\n    var el = (this.container = document.createElement('div'));\n    el.className = 'mapboxgl-ctrl-geocoder mapboxgl-ctrl';\n\n    var searchIcon = this.createIcon('search', '<path d=\"M7.4 2.5c-2.7 0-4.9 2.2-4.9 4.9s2.2 4.9 4.9 4.9c1 0 1.8-.2 2.5-.8l3.7 3.7c.2.2.4.3.8.3.7 0 1.1-.4 1.1-1.1 0-.3-.1-.5-.3-.8L11.4 10c.4-.8.8-1.6.8-2.5.1-2.8-2.1-5-4.8-5zm0 1.6c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2-3.3-1.3-3.3-3.1 1.4-3.3 3.3-3.3z\"/>')\n\n    this._inputEl = document.createElement('input');\n    this._inputEl.type = 'text';\n    this._inputEl.className = 'mapboxgl-ctrl-geocoder--input';\n\n    this.setPlaceholder();\n\n    if (this.options.collapsed) {\n      this._collapse();\n      this.container.addEventListener('mouseenter', this._unCollapse);\n      this.container.addEventListener('mouseleave', this._collapse);\n      this._inputEl.addEventListener('focus', this._unCollapse);\n    }\n\n    if (this.options.collapsed || this.options.clearOnBlur) {\n      this._inputEl.addEventListener('blur', this._onBlur);\n    }\n\n    this._inputEl.addEventListener('keydown', debounce(this._onKeyDown, 200));\n    this._inputEl.addEventListener('paste', this._onPaste);\n    this._inputEl.addEventListener('change', this._onChange);\n    this.container.addEventListener('mouseenter', this._showButton);\n    this.container.addEventListener('mouseleave', this._hideButton);\n    this._inputEl.addEventListener('keyup', function(e){\n      this.eventManager.keyevent(e, this);\n    }.bind(this));\n\n    var actions = document.createElement('div');\n    actions.classList.add('mapboxgl-ctrl-geocoder--pin-right');\n\n    this._clearEl = document.createElement('button');\n    this._clearEl.setAttribute('aria-label', 'Clear');\n    this._clearEl.addEventListener('click', this.clear);\n    this._clearEl.className = 'mapboxgl-ctrl-geocoder--button';\n\n    var buttonIcon = this.createIcon('close', '<path d=\"M3.8 2.5c-.6 0-1.3.7-1.3 1.3 0 .3.2.7.5.8L7.2 9 3 13.2c-.3.3-.5.7-.5 1 0 .6.7 1.3 1.3 1.3.3 0 .7-.2 1-.5L9 10.8l4.2 4.2c.2.3.7.3 1 .3.6 0 1.3-.7 1.3-1.3 0-.3-.2-.7-.3-1l-4.4-4L15 4.6c.3-.2.5-.5.5-.8 0-.7-.7-1.3-1.3-1.3-.3 0-.7.2-1 .3L9 7.1 4.8 2.8c-.3-.1-.7-.3-1-.3z\"/>')\n    this._clearEl.appendChild(buttonIcon);\n\n    this._loadingEl = this.createIcon('loading', '<path fill=\"#333\" d=\"M4.4 4.4l.8.8c2.1-2.1 5.5-2.1 7.6 0l.8-.8c-2.5-2.5-6.7-2.5-9.2 0z\"/><path opacity=\".1\" d=\"M12.8 12.9c-2.1 2.1-5.5 2.1-7.6 0-2.1-2.1-2.1-5.5 0-7.7l-.8-.8c-2.5 2.5-2.5 6.7 0 9.2s6.6 2.5 9.2 0 2.5-6.6 0-9.2l-.8.8c2.2 2.1 2.2 5.6 0 7.7z\"/>');\n\n    actions.appendChild(this._clearEl);\n    actions.appendChild(this._loadingEl);\n\n    el.appendChild(searchIcon);\n    el.appendChild(this._inputEl);\n    el.appendChild(actions);\n\n    this._typeahead = new Typeahead(this._inputEl, [], {\n      filter: false,\n      minLength: this.options.minLength,\n      limit: this.options.limit\n    });\n\n    this.setRenderFunction(this.options.render);\n    this._typeahead.getItemValue = this.options.getItemValue;\n\n    this.mapMarker = null;\n    this._handleMarker = this._handleMarker.bind(this);\n    if (this._map){\n      if (this.options.trackProximity ) {\n        this._updateProximity();\n        this._map.on('moveend', this._updateProximity);\n      }\n      this._mapboxgl = this.options.mapboxgl;\n      if (!this._mapboxgl && this.options.marker) {\n        // eslint-disable-next-line no-console\n        console.error(\"No mapboxgl detected in options. Map markers are disabled. Please set options.mapboxgl.\");\n        this.options.marker = false;\n      }\n    }\n    return el;\n  },\n\n  createIcon: function(name, path) {\n    var icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    icon.setAttribute('class', 'mapboxgl-ctrl-geocoder--icon mapboxgl-ctrl-geocoder--icon-' + name);\n    icon.setAttribute('viewBox', '0 0 18 18');\n    icon.setAttribute('xml:space','preserve');\n    icon.setAttribute('width', 18);\n    icon.setAttribute('height', 18);\n    // IE does not have innerHTML for SVG nodes\n    if (!('innerHTML' in icon)) {\n      var SVGNodeContainer = document.createElement('div');\n      SVGNodeContainer.innerHTML = '<svg>' + path.valueOf().toString() + '</svg>';\n      var SVGNode = SVGNodeContainer.firstChild,\n        SVGPath = SVGNode.firstChild;\n      icon.appendChild(SVGPath);\n    } else {\n      icon.innerHTML = path;\n    }\n    return icon;\n  },\n\n  onRemove: function() {\n    this.container.parentNode.removeChild(this.container);\n\n    if (this.options.trackProximity && this._map) {\n      this._map.off('moveend', this._updateProximity);\n    }\n\n    this._removeMarker();\n\n    this._map = null;\n\n    return this;\n  },\n\n  _onPaste: function(e){\n    var value = (e.clipboardData || window.clipboardData).getData('text');\n    if (value.length >= this.options.minLength) {\n      this._geocode(value);\n    }\n  },\n\n  _onKeyDown: function(e) {\n    var ESC_KEY_CODE = 27,\n      TAB_KEY_CODE = 9;\n\n    if (e.keyCode === ESC_KEY_CODE && this.options.clearAndBlurOnEsc) {\n      this._clear(e);\n      return this._inputEl.blur();\n    }\n\n    // if target has shadowRoot, then get the actual active element inside the shadowRoot\n    var target = e.target && e.target.shadowRoot\n      ? e.target.shadowRoot.activeElement\n      : e.target;\n    var value = target ? target.value : '';\n\n    if (!value) {\n      this.fresh = true;\n      // the user has removed all the text\n      if (e.keyCode !== TAB_KEY_CODE) this.clear(e);\n      return (this._clearEl.style.display = 'none');\n    }\n\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if ((e.metaKey || [TAB_KEY_CODE, ESC_KEY_CODE, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1))\n      return;\n\n    if (target.value.length >= this.options.minLength) {\n      this._geocode(target.value);\n    }\n  },\n\n  _showButton: function() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'block';\n  },\n\n  _hideButton: function() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'none';\n  },\n\n  _onBlur: function(e) {\n    if (this.options.clearOnBlur) {\n      this._clearOnBlur(e);\n    }\n    if (this.options.collapsed) {\n      this._collapse();\n    }\n  },\n  _onChange: function() {\n    var selected = this._typeahead.selected;\n    if (selected  && JSON.stringify(selected) !== this.lastSelected) {\n      this._clearEl.style.display = 'none';\n      if (this.options.flyTo) {\n        var flyOptions;\n        if (selected.properties && exceptions[selected.properties.short_code]) {\n          // Certain geocoder search results return (and therefore zoom to fit)\n          // an unexpectedly large bounding box: for example, both Russia and the\n          // USA span both sides of -180/180, or France includes the island of\n          // Reunion in the Indian Ocean. An incomplete list of these exceptions\n          // at ./exceptions.json provides \"reasonable\" bounding boxes as a\n          // short-term solution; this may be amended as necessary.\n          flyOptions = extend({}, this.options.flyTo);\n          if (this._map){\n            this._map.fitBounds(exceptions[selected.properties.short_code].bbox, flyOptions);\n          }\n        } else if (selected.bbox) {\n          var bbox = selected.bbox;\n          flyOptions = extend({}, this.options.flyTo);\n          if (this._map){\n            this._map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], flyOptions);\n          }\n        } else {\n          var defaultFlyOptions = {\n            zoom: this.options.zoom\n          }\n          flyOptions = extend({}, defaultFlyOptions, this.options.flyTo);\n          //  ensure that center is not overriden by custom options\n          flyOptions.center = selected.center;\n          if (this._map){\n            this._map.flyTo(flyOptions);\n          }\n        }\n      }\n      if (this.options.marker && this._mapboxgl){\n        this._handleMarker(selected);\n      }\n\n      // After selecting a feature, re-focus the textarea and set\n      // cursor at start.\n      this._inputEl.focus();\n      this._inputEl.scrollLeft = 0;\n      this._inputEl.setSelectionRange(0, 0);\n      this.lastSelected = JSON.stringify(selected);\n      this._eventEmitter.emit('result', { result: selected });\n      this.eventManager.select(selected, this);\n    }\n  },\n\n  _geocode: function(searchInput) {\n    this._loadingEl.style.display = 'block';\n    this._eventEmitter.emit('loading', { query: searchInput });\n    this.inputString = searchInput;\n    // Possible config proprerties to pass to client\n    var keys = [\n      'bbox',\n      'limit',\n      'proximity',\n      'countries',\n      'types',\n      'language',\n      'reverseMode',\n      'mode'\n    ];\n    var self = this;\n    // Create config object\n    var config = keys.reduce(function(config, key) {\n      if (self.options[key]) {\n        // countries, types, and language need to be passed in as arrays to client\n        // https://github.com/mapbox/mapbox-sdk-js/blob/master/services/geocoding.js#L38-L47\n        ['countries', 'types', 'language'].indexOf(key) > -1\n          ? (config[key] = self.options[key].split(/[\\s,]+/))\n          : (config[key] = self.options[key]);\n\n        if (key === 'proximity' && self.options[key] && typeof self.options[key].longitude === 'number' && typeof self.options[key].latitude === 'number') {\n          config[key] = [self.options[key].longitude, self.options[key].latitude]\n        }\n      }\n      return config;\n    }, {});\n\n    var request;\n    if (this.options.localGeocoderOnly){\n      request = Promise.resolve();\n    }\n    // check if searchInput resembles coordinates, and if it does,\n    // make the request a reverseGeocode\n    else if (\n      this.options.reverseGeocode &&\n      /(-?\\d+\\.?\\d*)[, ]+(-?\\d+\\.?\\d*)[ ]*$/.test(searchInput)\n    ) {\n      // parse coordinates\n      var coords = searchInput.split(/[\\s(,)?]+/).map(function(c) {\n        return parseFloat(c, 10);\n      }).reverse();\n\n      // client only accepts one type for reverseGeocode, so\n      // use first config type if one, if not default to poi\n      config.types ? [config.types[0]] : [\"poi\"];\n      config = extend(config, { query: coords, limit: 1 });\n\n      // drop proximity which may have been set by trackProximity since it's not supported by the reverseGeocoder\n      if ('proximity' in config) {\n        delete config.proximity;\n      }\n\n      request = this.geocoderService.reverseGeocode(config).send();\n    } else {\n      config = extend(config, { query: searchInput });\n      request = this.geocoderService.forwardGeocode(config).send();\n    }\n\n    var localGeocoderRes = [];\n    if (this.options.localGeocoder) {\n      localGeocoderRes = this.options.localGeocoder(searchInput);\n      if (!localGeocoderRes) {\n        localGeocoderRes = [];\n      }\n    }\n\n    request.then(\n      function(response) {\n        this._loadingEl.style.display = 'none';\n\n        var res = {};\n\n        if (!response){\n          res = {\n            type: 'FeatureCollection',\n            features: []\n          }\n        }else if (response.statusCode == '200') {\n          res = response.body;\n          res.request = response.request\n          res.headers = response.headers\n        }\n\n        res.config = config;\n        if (this.fresh){\n          this.eventManager.start(this);\n          this.fresh = false;\n        }\n        // supplement Mapbox Geocoding API results with locally populated results\n        res.features = res.features\n          ? localGeocoderRes.concat(res.features)\n          : localGeocoderRes;\n\n        // apply results filter if provided\n        if (this.options.filter && res.features.length) {\n          res.features = res.features.filter(this.options.filter);\n        }\n\n        if (res.features.length) {\n          this._clearEl.style.display = 'block';\n          this._eventEmitter.emit('results', res);\n          this._typeahead.update(res.features);\n        } else {\n          this._clearEl.style.display = 'none';\n          this._typeahead.selected = null;\n          this._renderNoResults();\n          this._eventEmitter.emit('results', res);\n        }\n\n      }.bind(this)\n    );\n\n    request.catch(\n      function(err) {\n        this._loadingEl.style.display = 'none';\n\n        // in the event of an error in the Mapbox Geocoding API still display results from the localGeocoder\n        if (localGeocoderRes.length && this.options.localGeocoder) {\n          this._clearEl.style.display = 'block';\n          this._typeahead.update(localGeocoderRes);\n        } else {\n          this._clearEl.style.display = 'none';\n          this._typeahead.selected = null;\n          this._renderError();\n        }\n\n        this._eventEmitter.emit('results', { features: localGeocoderRes });\n        this._eventEmitter.emit('error', { error: err });\n      }.bind(this)\n    );\n\n    return request;\n  },\n\n  /**\n   * Shared logic for clearing input\n   * @param {Event} [ev] the event that triggered the clear, if available\n   * @private\n   *\n   */\n  _clear: function(ev) {\n    if (ev) ev.preventDefault();\n    this._inputEl.value = '';\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._onChange();\n    this._clearEl.style.display = 'none';\n    this._removeMarker();\n    this.lastSelected = null;\n    this._eventEmitter.emit('clear');\n    this.fresh = true;\n  },\n\n  /**\n   * Clear and then focus the input.\n   * @param {Event} [ev] the event that triggered the clear, if available\n   *\n   */\n  clear: function(ev) {\n    this._clear(ev);\n    this._inputEl.focus();\n  },\n\n\n  /**\n   * Clear the input, without refocusing it. Used to implement clearOnBlur\n   * constructor option.\n   * @param {Event} [ev] the blur event\n   * @private\n   */\n  _clearOnBlur: function(ev) {\n    var ctx = this;\n\n    /*\n     * If relatedTarget is not found, assume user targeted the suggestions list.\n     * In that case, do not clear on blur. There are other edge cases where\n     * ev.relatedTarget could be null. Clicking on list always results in null\n     * relatedtarget because of upstream behavior in `suggestions`.\n     *\n     * The ideal solution would be to check if ev.relatedTarget is a child of\n     * the list. See issue #258 for details on why we can't do that yet.\n     */\n    if (ev.relatedTarget) {\n      ctx._clear(ev);\n    }\n  },\n\n  _onQueryResult: function(response) {\n    var results = response.body;\n    if (!results.features.length) return;\n    var result = results.features[0];\n    this._typeahead.selected = result;\n    this._inputEl.value = result.place_name;\n    this._onChange();\n  },\n\n  _updateProximity: function() {\n    // proximity is designed for local scale, if the user is looking at the whole world,\n    // it doesn't make sense to factor in the arbitrary centre of the map\n    if (!this._map){\n      return;\n    }\n    if (this._map.getZoom() > 9) {\n      var center = this._map.getCenter().wrap();\n      this.setProximity({ longitude: center.lng, latitude: center.lat });\n    } else {\n      this.setProximity(null);\n    }\n  },\n\n  _collapse: function() {\n    // do not collapse if input is in focus\n    if (!this._inputEl.value && this._inputEl !== document.activeElement) this.container.classList.add('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  _unCollapse: function() {\n    this.container.classList.remove('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  /**\n   * Set & query the input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  query: function(searchInput) {\n    this._geocode(searchInput).then(this._onQueryResult);\n    return this;\n  },\n\n  _renderError: function(){\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error'>There was an error reaching the server</div>\"\n    this._renderMessage(errorMessage);\n  },\n\n  _renderNoResults: function(){\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error mapbox-gl-geocoder--no-results'>No results found</div>\";\n    this._renderMessage(errorMessage);\n  },\n\n  _renderMessage: function(msg){\n    this._typeahead.update([]);\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._typeahead.renderError(msg);\n  },\n\n  /**\n   * Get the text to use as the search bar placeholder\n   *\n   * If placeholder is provided in options, then use options.placeholder\n   * Otherwise, if language is provided in options, then use the localized string of the first language if available\n   * Otherwise use the default\n   *\n   * @returns {String} the value to use as the search bar placeholder\n   * @private\n   */\n  _getPlaceholderText: function(){\n    if (this.options.placeholder) return this.options.placeholder;\n    if (this.options.language){\n      var firstLanguage = this.options.language.split(\",\")[0];\n      var language = subtag.language(firstLanguage);\n      var localizedValue = localization.placeholder[language];\n      if (localizedValue)  return localizedValue;\n    }\n    return 'Search';\n  },\n\n  /**\n   * Set input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  setInput: function(searchInput) {\n    // Set input value to passed value and clear everything else.\n    this._inputEl.value = searchInput;\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    if (searchInput.length >= this.options.minLength) {\n      this._geocode(searchInput);\n    }\n    return this;\n  },\n\n  /**\n   * Set proximity\n   * @param {Object} proximity The new `options.proximity` value. This is a geographical point given as an object with `latitude` and `longitude` properties.\n   * @returns {MapboxGeocoder} this\n   */\n  setProximity: function(proximity) {\n    this.options.proximity = proximity;\n    return this;\n  },\n\n  /**\n   * Get proximity\n   * @returns {Object} The geocoder proximity\n   */\n  getProximity: function() {\n    return this.options.proximity;\n  },\n\n  /**\n   * Set the render function used in the results dropdown\n   * @param {Function} fn The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n   * @returns {MapboxGeocoder} this\n   */\n  setRenderFunction: function(fn){\n    if (fn && typeof(fn) == \"function\"){\n      this._typeahead.render = fn;\n    }\n    return this;\n  },\n\n  /**\n   * Get the function used to render the results dropdown\n   *\n   * @returns {Function} the render function\n   */\n  getRenderFunction: function(){\n    return this._typeahead.render;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   *\n   * Look first at the explicitly set options otherwise use the browser's language settings\n   * @param {String} language Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas.\n   * @returns {MapboxGeocoder} this\n   */\n  setLanguage: function(language){\n    var browserLocale = navigator.language || navigator.userLanguage || navigator.browserLanguage;\n    this.options.language = language || this.options.language || browserLocale;\n    return this;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   * @returns {String} The language(s) used by the plugin, if any\n   */\n  getLanguage: function(){\n    return this.options.language;\n  },\n\n  /**\n   * Get the zoom level the map will move to when there is no bounding box on the selected result\n   * @returns {Number} the map zoom\n   */\n  getZoom: function(){\n    return this.options.zoom;\n  },\n\n  /**\n   * Set the zoom level\n   * @param {Number} zoom The zoom level that the map should animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n   * @returns {MapboxGeocoder} this\n   */\n  setZoom: function(zoom){\n    this.options.zoom = zoom;\n    return this;\n  },\n\n  /**\n   * Get the parameters used to fly to the selected response, if any\n   * @returns {Boolean|Object} The `flyTo` option\n   */\n  getFlyTo: function(){\n    return this.options.flyTo;\n  },\n\n  /**\n   * Set the flyTo options\n   * @param {Boolean|Object} flyTo If false, animating the map to a selected result is disabled. If true, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n   */\n  setFlyTo: function(flyTo){\n    this.options.flyTo = flyTo;\n    return this;\n  },\n\n  /**\n   * Get the value of the placeholder string\n   * @returns {String} The input element's placeholder value\n   */\n  getPlaceholder: function(){\n    return this.options.placeholder;\n  },\n\n  /**\n   * Set the value of the input element's placeholder\n   * @param {String} placeholder the text to use as the input element's placeholder\n   * @returns {MapboxGeocoder} this\n   */\n  setPlaceholder: function(placeholder){\n    this.placeholder = (placeholder) ? placeholder : this._getPlaceholderText();\n    this._inputEl.placeholder = this.placeholder;\n    this._inputEl.setAttribute('aria-label', this.placeholder);\n    return this\n  },\n\n  /**\n   * Get the bounding box used by the plugin\n   * @returns {Array<Number>} the bounding box, if any\n   */\n  getBbox: function(){\n    return this.options.bbox;\n  },\n\n  /**\n   * Set the bounding box to limit search results to\n   * @param {Array<Number>} bbox a bounding box given as an array in the format [minX, minY, maxX, maxY].\n   * @returns {MapboxGeocoder} this\n   */\n  setBbox: function(bbox){\n    this.options.bbox = bbox;\n    return this;\n  },\n\n  /**\n   * Get a list of the countries to limit search results to\n   * @returns {String} a comma separated list of countries to limit to, if any\n   */\n  getCountries: function(){\n    return this.options.countries;\n  },\n\n  /**\n   * Set the countries to limit search results to\n   * @param {String} countries a comma separated list of countries to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setCountries: function(countries){\n    this.options.countries = countries;\n    return this;\n  },\n\n  /**\n   * Get a list of the types to limit search results to\n   * @returns {String} a comma separated list of types to limit to\n   */\n  getTypes: function(){\n    return this.options.types;\n  },\n\n  /**\n   * Set the types to limit search results to\n   * @param {String} countries a comma separated list of types to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setTypes: function(types){\n    this.options.types = types;\n    return this;\n  },\n\n  /**\n   * Get the minimum number of characters typed to trigger results used in the plugin\n   * @returns {Number} The minimum length in characters before a search is triggered\n   */\n  getMinLength: function(){\n    return this.options.minLength;\n  },\n\n  /**\n   * Set the minimum number of characters typed to trigger results used by the plugin\n   * @param {Number} minLength the minimum length in characters\n   * @returns {MapboxGeocoder} this\n   */\n  setMinLength: function(minLength){\n    this.options.minLength = minLength;\n    if (this._typeahead)  this._typeahead.minLength = minLength;\n    return this;\n  },\n\n  /**\n   * Get the limit value for the number of results to display used by the plugin\n   * @returns {Number} The limit value for the number of results to display used by the plugin\n   */\n  getLimit: function(){\n    return this.options.limit;\n  },\n\n  /**\n   * Set the limit value for the number of results to display used by the plugin\n   * @param {Number} limit the number of search results to return\n   * @returns {MapboxGeocoder}\n   */\n  setLimit: function(limit){\n    this.options.limit = limit;\n    if (this._typeahead) this._typeahead.options.limit = limit;\n    return this;\n  },\n\n  /**\n   * Get the filter function used by the plugin\n   * @returns {Function} the filter function\n   */\n  getFilter: function(){\n    return this.options.filter;\n  },\n\n  /**\n   * Set the filter function used by the plugin.\n   * @param {Function} filter A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n   * @returns {MapboxGeocoder} this\n   */\n  setFilter: function(filter){\n    this.options.filter = filter;\n    return this;\n  },\n\n  /**\n   * Set the geocoding endpoint used by the plugin.\n   * @param {Function} origin A function which accepts an HTTPS URL to specify the endpoint to query results from.\n   * @returns {MapboxGeocoder} this\n   */\n  setOrigin: function(origin){\n    this.options.origin = origin;\n    this.geocoderService = mbxGeocoder(\n      MapboxClient({\n        accessToken: this.options.accessToken,\n        origin: this.options.origin\n      })\n    );\n    return this;\n  },\n\n  /**\n   * Get the geocoding endpoint the plugin is currently set to\n   * @returns {Function} the endpoint URL\n   */\n  getOrigin: function(){\n    return this.options.origin;\n  },\n\n  /**\n   * Handle the placement of a result marking the selected result\n   * @private\n   * @param {Object} selected the selected geojson feature\n   * @returns {MapboxGeocoder} this\n   */\n  _handleMarker: function(selected){\n    // clean up any old marker that might be present\n    if (!this._map){\n      return;\n    }\n    this._removeMarker();\n    var defaultMarkerOptions = {\n      color: '#4668F2'\n    }\n    var markerOptions = extend({}, defaultMarkerOptions, this.options.marker)\n    this.mapMarker = new this._mapboxgl.Marker(markerOptions);\n    if (selected.center) {\n      this.mapMarker\n        .setLngLat(selected.center)\n        .addTo(this._map);\n    } else if (selected.geometry && selected.geometry.type && selected.geometry.type === 'Point' && selected.geometry.coordinates) {\n      this.mapMarker\n        .setLngLat(selected.geometry.coordinates)\n        .addTo(this._map);\n    }\n    return this;\n  },\n\n  /**\n   * Handle the removal of a result marker\n   * @private\n   */\n  _removeMarker: function(){\n    if (this.mapMarker){\n      this.mapMarker.remove();\n      this.mapMarker = null;\n    }\n  },\n\n  /**\n   * Subscribe to events that happen within the plugin.\n   * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n   *\n   * - __clear__ `Emitted when the input is cleared`\n   * - __loading__ `{ query } Emitted when the geocoder is looking up a query`\n   * - __results__ `{ results } Fired when the geocoder returns a response`\n   * - __result__ `{ result } Fired when input is set`\n   * - __error__ `{ error } Error as string`\n   * @param {Function} fn function that's called when the event is emitted.\n   * @returns {MapboxGeocoder} this;\n   */\n  on: function(type, fn) {\n    this._eventEmitter.on(type, fn);\n    return this;\n  },\n\n  /**\n   * Remove an event\n   * @returns {MapboxGeocoder} this\n   * @param {String} type Event name.\n   * @param {Function} fn Function that should unsubscribe to the event emitted.\n   */\n  off: function(type, fn) {\n    this._eventEmitter.removeListener(type, fn);\n    this.eventManager.remove();\n    return this;\n  }\n};\n\nmodule.exports = MapboxGeocoder;\n"]},"metadata":{},"sourceType":"script"}