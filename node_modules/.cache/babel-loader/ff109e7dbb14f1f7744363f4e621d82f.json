{"ast":null,"code":"const ModeHandler = function (mode, DrawContext) {\n  const handlers = {\n    drag: [],\n    click: [],\n    mousemove: [],\n    mousedown: [],\n    mouseup: [],\n    mouseout: [],\n    keydown: [],\n    keyup: [],\n    touchstart: [],\n    touchmove: [],\n    touchend: [],\n    tap: []\n  };\n  const ctx = {\n    on(event, selector, fn) {\n      if (handlers[event] === undefined) {\n        throw new Error(`Invalid event type: ${event}`);\n      }\n\n      handlers[event].push({\n        selector,\n        fn\n      });\n    },\n\n    render(id) {\n      DrawContext.store.featureChanged(id);\n    }\n\n  };\n\n  const delegate = function (eventName, event) {\n    const handles = handlers[eventName];\n    let iHandle = handles.length;\n\n    while (iHandle--) {\n      const handle = handles[iHandle];\n\n      if (handle.selector(event)) {\n        handle.fn.call(ctx, event);\n        DrawContext.store.render();\n        DrawContext.ui.updateMapClasses(); // ensure an event is only handled once\n        // we do this to let modes have multiple overlapping selectors\n        // and relay on order of oppertations to filter\n\n        break;\n      }\n    }\n  };\n\n  mode.start.call(ctx);\n  return {\n    render: mode.render,\n\n    stop() {\n      if (mode.stop) mode.stop();\n    },\n\n    trash() {\n      if (mode.trash) {\n        mode.trash();\n        DrawContext.store.render();\n      }\n    },\n\n    combineFeatures() {\n      if (mode.combineFeatures) {\n        mode.combineFeatures();\n      }\n    },\n\n    uncombineFeatures() {\n      if (mode.uncombineFeatures) {\n        mode.uncombineFeatures();\n      }\n    },\n\n    drag(event) {\n      delegate('drag', event);\n    },\n\n    click(event) {\n      delegate('click', event);\n    },\n\n    mousemove(event) {\n      delegate('mousemove', event);\n    },\n\n    mousedown(event) {\n      delegate('mousedown', event);\n    },\n\n    mouseup(event) {\n      delegate('mouseup', event);\n    },\n\n    mouseout(event) {\n      delegate('mouseout', event);\n    },\n\n    keydown(event) {\n      delegate('keydown', event);\n    },\n\n    keyup(event) {\n      delegate('keyup', event);\n    },\n\n    touchstart(event) {\n      delegate('touchstart', event);\n    },\n\n    touchmove(event) {\n      delegate('touchmove', event);\n    },\n\n    touchend(event) {\n      delegate('touchend', event);\n    },\n\n    tap(event) {\n      delegate('tap', event);\n    }\n\n  };\n};\n\nexport default ModeHandler;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-gl-draw/src/lib/mode_handler.js"],"names":["ModeHandler","mode","DrawContext","handlers","drag","click","mousemove","mousedown","mouseup","mouseout","keydown","keyup","touchstart","touchmove","touchend","tap","ctx","on","event","selector","fn","undefined","Error","push","render","id","store","featureChanged","delegate","eventName","handles","iHandle","length","handle","call","ui","updateMapClasses","start","stop","trash","combineFeatures","uncombineFeatures"],"mappings":"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","sourcesContent":["\nconst ModeHandler = function(mode, DrawContext) {\n\n  const handlers = {\n    drag: [],\n    click: [],\n    mousemove: [],\n    mousedown: [],\n    mouseup: [],\n    mouseout: [],\n    keydown: [],\n    keyup: [],\n    touchstart: [],\n    touchmove: [],\n    touchend: [],\n    tap: []\n  };\n\n  const ctx = {\n    on(event, selector, fn) {\n      if (handlers[event] === undefined) {\n        throw new Error(`Invalid event type: ${event}`);\n      }\n      handlers[event].push({\n        selector,\n        fn\n      });\n    },\n    render(id) {\n      DrawContext.store.featureChanged(id);\n    }\n  };\n\n  const delegate = function (eventName, event) {\n    const handles = handlers[eventName];\n    let iHandle = handles.length;\n    while (iHandle--) {\n      const handle = handles[iHandle];\n      if (handle.selector(event)) {\n        handle.fn.call(ctx, event);\n        DrawContext.store.render();\n        DrawContext.ui.updateMapClasses();\n\n        // ensure an event is only handled once\n        // we do this to let modes have multiple overlapping selectors\n        // and relay on order of oppertations to filter\n        break;\n      }\n    }\n  };\n\n  mode.start.call(ctx);\n\n  return {\n    render: mode.render,\n    stop() {\n      if (mode.stop) mode.stop();\n    },\n    trash() {\n      if (mode.trash) {\n        mode.trash();\n        DrawContext.store.render();\n      }\n    },\n    combineFeatures() {\n      if (mode.combineFeatures) {\n        mode.combineFeatures();\n      }\n    },\n    uncombineFeatures() {\n      if (mode.uncombineFeatures) {\n        mode.uncombineFeatures();\n      }\n    },\n    drag(event) {\n      delegate('drag', event);\n    },\n    click(event) {\n      delegate('click', event);\n    },\n    mousemove(event) {\n      delegate('mousemove', event);\n    },\n    mousedown(event) {\n      delegate('mousedown', event);\n    },\n    mouseup(event) {\n      delegate('mouseup', event);\n    },\n    mouseout(event) {\n      delegate('mouseout', event);\n    },\n    keydown(event) {\n      delegate('keydown', event);\n    },\n    keyup(event) {\n      delegate('keyup', event);\n    },\n    touchstart(event) {\n      delegate('touchstart', event);\n    },\n    touchmove(event) {\n      delegate('touchmove', event);\n    },\n    touchend(event) {\n      delegate('touchend', event);\n    },\n    tap(event) {\n      delegate('tap', event);\n    }\n  };\n};\n\nexport default ModeHandler;\n"]},"metadata":{},"sourceType":"module"}