{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getGlobalLoaderState } from '../loader-utils/merge-options';\n\nvar getGlobalLoaderRegistry = function getGlobalLoaderRegistry() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  var loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  var _iterator = _createForOfIteratorHelper(loaders),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var loader = _step.value;\n      var normalizedLoader = normalizeLoader(loader);\n\n      if (!loaderRegistry.find(function (registeredLoader) {\n        return normalizedLoader === registeredLoader;\n      })) {\n        loaderRegistry.unshift(normalizedLoader);\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\nexport function _unregisterLoaders() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}","map":{"version":3,"sources":["../../../../src/lib/api/register-loaders.js"],"names":["getGlobalLoaderRegistry","state","getGlobalLoaderState","loaderRegistry","loaders","Array","loader","normalizedLoader","normalizeLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,eAAA,QAAA,kCAAA;AACA,SAAA,oBAAA,QAAA,+BAAA;;AAIA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,MAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAuBA,KAAK,CAALA,cAAAA,IAAvBA,EAAAA;AACA,SAAOA,KAAK,CAAZ,cAAA;AAHF,CAAA;;AAMA,OAAO,SAAA,eAAA,CAAA,OAAA,EAAkC;AACvC,MAAME,cAAc,GAAGH,uBAAvB,EAAA;AAEAI,EAAAA,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA7CD,OAA6C,CAA7CA;;AAHuC,MAAA,SAAA,GAAA,0BAAA,CAAA,OAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AAAA,QAAA,KAAA,GAAA,SAAA,KAAA,GAAA;AAAA,UAK5BE,MAL4B,GAAA,KAAA,CAAA,KAAA;AAMrC,UAAMC,gBAAgB,GAAGC,eAAe,CAAxC,MAAwC,CAAxC;;AACA,UAAI,CAAC,cAAc,CAAd,IAAA,CAAoB,UAAA,gBAAA,EAAgB;AAAA,eAAID,gBAAgB,KAApB,gBAAA;AAAzC,OAAK,CAAL,EAAqF;AAEnFJ,QAAAA,cAAc,CAAdA,OAAAA,CAAAA,gBAAAA;AACD;AAVoC,KAAA;;AAKvC,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA8B;AAAA,MAAA,KAAA;AAM7B;AAXsC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;AAYxC;AAED,OAAO,SAAA,oBAAA,GAAgC;AACrC,SAAOH,uBAAP,EAAA;AACD;AAGD,OAAO,SAAA,kBAAA,GAA8B;AACnC,MAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAAA,EAAAA;AACD","sourcesContent":["import {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/merge-options';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\n\n// For testing\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n"]},"metadata":{},"sourceType":"module"}