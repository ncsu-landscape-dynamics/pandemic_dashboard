{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\nexport var MapState = function (_ViewState) {\n  _inherits(MapState, _ViewState);\n\n  function MapState() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState);\n\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapState).call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    }));\n    _this._interactiveState = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var _ref5$deltaScaleX = _ref5.deltaScaleX,\n          deltaScaleX = _ref5$deltaScaleX === void 0 ? 0 : _ref5$deltaScaleX,\n          _ref5$deltaScaleY = _ref5.deltaScaleY,\n          deltaScaleY = _ref5$deltaScaleY === void 0 ? 0 : _ref5$deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n          startBearing = _this$_interactiveSta.startBearing,\n          startPitch = _this$_interactiveSta.startPitch;\n\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var _this$_calculateNewPi = this._calculateNewPitchAndBearing({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY,\n        startBearing: startBearing,\n        startPitch: startPitch\n      }),\n          pitch = _this$_calculateNewPi.pitch,\n          bearing = _this$_calculateNewPi.bearing;\n\n      return this._getUpdatedState({\n        bearing: bearing,\n        pitch: pitch\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_interactiveSta2 = this._interactiveState,\n          startZoom = _this$_interactiveSta2.startZoom,\n          startZoomLngLat = _this$_interactiveSta2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread({}, this._viewportProps, {\n        zoom: zoom\n      }));\n\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n          longitude = _zoomedViewport$getMa2[0],\n          latitude = _zoomedViewport$getMa2[1];\n\n      return this._getUpdatedState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this._zoomFromCenter(2);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this._zoomFromCenter(0.5);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      return this._panFromCenter([100, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      return this._panFromCenter([-100, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      return this._panFromCenter([0, 100]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      return this._panFromCenter([0, -100]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - 10\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps, {}, this._interactiveState, {}, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos;\n      var viewport = this.makeViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n          minPitch = _this$_viewportProps4.minPitch,\n          maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }]);\n\n  return MapState;\n}(ViewState);\n\nvar MapController = function (_Controller) {\n  _inherits(MapController, _Controller);\n\n  function MapController(props) {\n    var _this2;\n\n    _classCallCheck(this, MapController);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MapController).call(this, MapState, props));\n    _this2.invertPan = true;\n    return _this2;\n  }\n\n  _createClass(MapController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return LINEAR_TRANSITION_PROPS;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var deltaX = event.deltaX,\n          deltaY = event.deltaY;\n\n      var _this$getCenter = this.getCenter(event),\n          _this$getCenter2 = _slicedToArray(_this$getCenter, 2),\n          centerY = _this$getCenter2[1];\n\n      var startY = centerY - deltaY;\n\n      var _this$controllerState = this.controllerState.getViewportProps(),\n          width = _this$controllerState.width,\n          height = _this$controllerState.height;\n\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      var newControllerState = this.controllerState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n    }\n  }]);\n\n  return MapController;\n}(Controller);\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","NO_TRANSITION_PROPS","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","assert","Number","pos","startPos","deltaScaleX","deltaScaleY","scale","zoomedViewport","lngLat","fromProps","viewState","props","Object","Math","offset","clamp","normalizeViewportProps","viewport","MapController","Controller","event","deltaX","deltaY","centerY","startY","newControllerState","isDragging","isRotating"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._interactiveState,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    super(MapState, props);\n    this.invertPan = true;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}