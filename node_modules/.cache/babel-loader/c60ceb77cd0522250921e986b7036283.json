{"ast":null,"code":"import { isResponse, isBlob } from '../../javascript-utils/is-type';\nimport { parseMIMEType, parseMIMETypeFromURL } from './mime-type-utils';\nvar QUERY_STRING_PATTERN = /\\?.*/;\nexport function getResourceUrlAndType(resource) {\n  if (isResponse(resource)) {\n    var contentType = parseMIMEType(resource.headers.get('content-type'));\n    var urlType = parseMIMETypeFromURL(resource.url);\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: contentType || urlType || null\n    };\n  }\n\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  return {\n    url: '',\n    type: ''\n  };\n}\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}","map":{"version":3,"sources":["../../../../src/lib/utils/resource-utils.js"],"names":["QUERY_STRING_PATTERN","isResponse","contentType","parseMIMEType","resource","urlType","parseMIMETypeFromURL","url","stripQueryString","type","isBlob","ArrayBuffer"],"mappings":"AAAA,SAAA,UAAA,EAAA,MAAA,QAAA,gCAAA;AACA,SAAA,aAAA,EAAA,oBAAA,QAAA,mBAAA;AAEA,IAAMA,oBAAoB,GAA1B,MAAA;AAEA,OAAO,SAAA,qBAAA,CAAA,QAAA,EAAyC;AAE9C,MAAIC,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,QAAMC,WAAW,GAAGC,aAAa,CAACC,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,CAAlC,cAAkCA,CAAD,CAAjC;AACA,QAAMC,OAAO,GAAGC,oBAAoB,CAACF,QAAQ,CAA7C,GAAoC,CAApC;AAEA,WAAO;AACLG,MAAAA,GAAG,EAAEC,gBAAgB,CAACJ,QAAQ,CAARA,GAAAA,IADjB,EACgB,CADhB;AAELK,MAAAA,IAAI,EAAEP,WAAW,IAAXA,OAAAA,IAA0B;AAF3B,KAAP;AAID;;AAED,MAAIQ,MAAM,CAAV,QAAU,CAAV,EAAsB;AACpB,WAAO;AACLH,MAAAA,GAAG,EAAEC,gBAAgB,CAACJ,QAAQ,CAARA,GAAAA,IADjB,EACgB,CADhB;AAELK,MAAAA,IAAI,EAAEL,QAAQ,CAARA,IAAAA,IAAiB;AAFlB,KAAP;AAID;;AAED,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,WAAO;AAELG,MAAAA,GAAG,EAAEC,gBAAgB,CAFhB,QAEgB,CAFhB;AAILC,MAAAA,IAAI,EAAEH,oBAAoB,CAAA,QAAA;AAJrB,KAAP;AAMD;;AAGD,SAAO;AACLC,IAAAA,GAAG,EADE,EAAA;AAELE,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID;AAED,OAAO,SAAA,wBAAA,CAAA,QAAA,EAA4C;AACjD,MAAIR,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,WAAOG,QAAQ,CAARA,OAAAA,CAAAA,gBAAAA,KAAsC,CAA7C,CAAA;AACD;;AACD,MAAIM,MAAM,CAAV,QAAU,CAAV,EAAsB;AACpB,WAAON,QAAQ,CAAf,IAAA;AACD;;AACD,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAEhC,WAAOA,QAAQ,CAAf,MAAA;AACD;;AACD,MAAIA,QAAQ,YAAZ,WAAA,EAAqC;AACnC,WAAOA,QAAQ,CAAf,UAAA;AACD;;AACD,MAAIO,WAAW,CAAXA,MAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChC,WAAOP,QAAQ,CAAf,UAAA;AACD;;AAED,SAAO,CAAP,CAAA;AACD;;AAED,SAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,SAAOG,GAAG,CAAHA,OAAAA,CAAAA,oBAAAA,EAAP,EAAOA,CAAP;AACD","sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\nexport function getResourceUrlAndType(resource) {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const contentType = parseMIMEType(resource.headers.get('content-type'));\n    const urlType = parseMIMETypeFromURL(resource.url);\n\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: contentType || urlType || null\n    };\n  }\n\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"]},"metadata":{},"sourceType":"module"}