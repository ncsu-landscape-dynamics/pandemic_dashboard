{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Stats } from '@probe.gl/stats';\nvar STAT_QUEUED_REQUESTS = 'Queued Requests';\nvar STAT_ACTIVE_REQUESTS = 'Active Requests';\nvar STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nvar STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nvar STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nvar DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\n\nvar RequestScheduler = function () {\n  function RequestScheduler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestScheduler);\n\n    this.props = _objectSpread(_objectSpread({}, DEFAULT_PROPS), props);\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = new Map();\n    this.stats = new Stats({\n      id: props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n    this._deferredUpdate = null;\n  }\n\n  _createClass(RequestScheduler, [{\n    key: \"scheduleRequest\",\n    value: function scheduleRequest(handle) {\n      var getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return 0;\n      };\n\n      if (!this.props.throttleRequests) {\n        return Promise.resolve({\n          done: function done() {}\n        });\n      }\n\n      if (this.requestMap.has(handle)) {\n        return this.requestMap.get(handle);\n      }\n\n      var request = {\n        handle: handle,\n        getPriority: getPriority\n      };\n      var promise = new Promise(function (resolve) {\n        request.resolve = resolve;\n        return request;\n      });\n      this.requestQueue.push(request);\n      this.requestMap.set(handle, promise);\n\n      this._issueNewRequests();\n\n      return promise;\n    }\n  }, {\n    key: \"_issueRequest\",\n    value: function _issueRequest(request) {\n      var _this = this;\n\n      var handle = request.handle,\n          resolve = request.resolve;\n      var isDone = false;\n\n      var done = function done() {\n        if (!isDone) {\n          isDone = true;\n\n          _this.requestMap[\"delete\"](handle);\n\n          _this.activeRequestCount--;\n\n          _this._issueNewRequests();\n        }\n      };\n\n      this.activeRequestCount++;\n      return resolve ? resolve({\n        done: done\n      }) : Promise.resolve({\n        done: done\n      });\n    }\n  }, {\n    key: \"_issueNewRequests\",\n    value: function _issueNewRequests() {\n      var _this2 = this;\n\n      if (!this._deferredUpdate) {\n        this._deferredUpdate = setTimeout(function () {\n          return _this2._issueNewRequestsAsync();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"_issueNewRequestsAsync\",\n    value: function _issueNewRequestsAsync() {\n      this._deferredUpdate = null;\n      var freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n      if (freeSlots === 0) {\n        return;\n      }\n\n      this._updateAllRequests();\n\n      for (var i = 0; i < freeSlots; ++i) {\n        if (this.requestQueue.length > 0) {\n          var request = this.requestQueue.shift();\n\n          this._issueRequest(request);\n        }\n      }\n    }\n  }, {\n    key: \"_updateAllRequests\",\n    value: function _updateAllRequests() {\n      var requestQueue = this.requestQueue;\n\n      for (var i = 0; i < requestQueue.length; ++i) {\n        var request = requestQueue[i];\n\n        if (!this._updateRequest(request)) {\n          requestQueue.splice(i, 1);\n          this.requestMap[\"delete\"](request.handle);\n          i--;\n        }\n      }\n\n      requestQueue.sort(function (a, b) {\n        return a.priority - b.priority;\n      });\n    }\n  }, {\n    key: \"_updateRequest\",\n    value: function _updateRequest(request) {\n      request.priority = request.getPriority(request.handle);\n\n      if (request.priority < 0) {\n        request.resolve(null);\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return RequestScheduler;\n}();\n\nexport { RequestScheduler as default };","map":{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.js"],"names":["STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","props","handle","getPriority","done","request","promise","resolve","isDone","setTimeout","freeSlots","Math","i","requestQueue","a","b"],"mappings":"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","sourcesContent":["// TODO - this should move to core when test cases are more complete\n\n/* global setTimeout */\nimport {Stats} from '@probe.gl/stats';\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n// TODO - Track requests globally, across multiple servers\nexport default class RequestScheduler {\n  constructor(props = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Tracks the number of active requests and prioritizes/cancels queued requests.\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = new Map();\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n\n    this._deferredUpdate = null;\n  }\n\n  // Called by an application that wants to issue a request, without having it deeply queued\n  // Parameter `getPriority` will be called when request \"slots\" open up,\n  //    allowing the caller to update priority or cancel the request\n  //    Highest priority executes first, priority < 0 cancels the request\n  // Returns: a promise that resolves to a request token when the request can be issued without queueing,\n  //    or `false` if the request has been cancelled (by getPriority)\n  scheduleRequest(handle, getPriority = () => 0) {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n\n    const request = {handle, getPriority};\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request) {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  // We check requests asynchronously, to prevent multiple updates\n  _issueNewRequests() {\n    if (!this._deferredUpdate) {\n      this._deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  // Refresh all requests and\n  _issueNewRequestsAsync() {\n    this._deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      if (this.requestQueue.length > 0) {\n        const request = this.requestQueue.shift();\n        this._issueRequest(request);\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  // Ensure all requests have updated priorities, and that no longer valid requests are cancelled\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  // Update a single request by calling the callback\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}