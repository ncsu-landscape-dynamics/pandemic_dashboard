{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, fp64LowPart, project32, gouraudLighting, picking } from '@deck.gl/core';\nimport { Model, CubeGeometry } from '@luma.gl/core';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\nvar COLOR_DATA_UBO_INDEX = 0;\nvar ELEVATION_DATA_UBO_INDEX = 1;\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  gridSize: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  gridOrigin: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  gridOffset: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: true,\n  material: true\n};\n\nvar GPUGridCellLayer = function (_Layer) {\n  _inherits(GPUGridCellLayer, _Layer);\n\n  function GPUGridCellLayer() {\n    _classCallCheck(this, GPUGridCellLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridCellLayer).apply(this, arguments));\n  }\n\n  _createClass(GPUGridCellLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(GPUGridCellLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking, fp64arithmetic]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        colors: {\n          size: 4,\n          noAlloc: true\n        },\n        elevations: {\n          size: 4,\n          noAlloc: true\n        }\n      });\n\n      var model = this._getModel(gl);\n\n      this._setupUniformBuffer(model);\n\n      this.setState({\n        model: model\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n          cellSize = _this$props.cellSize,\n          offset = _this$props.offset,\n          extruded = _this$props.extruded,\n          elevationScale = _this$props.elevationScale,\n          coverage = _this$props.coverage,\n          gridSize = _this$props.gridSize,\n          gridOrigin = _this$props.gridOrigin,\n          gridOffset = _this$props.gridOffset,\n          elevationRange = _this$props.elevationRange,\n          colorMaxMinBuffer = _this$props.colorMaxMinBuffer,\n          elevationMaxMinBuffer = _this$props.elevationMaxMinBuffer;\n      var gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n      var gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n      var domainUniforms = this.getDomainUniforms();\n      var colorRange = colorRangeToFlatArray(this.props.colorRange);\n      this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n      this.state.model.setUniforms(Object.assign({}, uniforms, domainUniforms, {\n        cellSize: cellSize,\n        offset: offset,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        coverage: coverage,\n        gridSize: gridSize,\n        gridOrigin: gridOrigin,\n        gridOriginLow: gridOriginLow,\n        gridOffset: gridOffset,\n        gridOffsetLow: gridOffsetLow,\n        colorRange: colorRange,\n        elevationRange: elevationRange\n      })).draw();\n      this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    }\n  }, {\n    key: \"bindUniformBuffers\",\n    value: function bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.bind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.bind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"unbindUniformBuffers\",\n    value: function unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.unbind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.unbind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"getDomainUniforms\",\n    value: function getDomainUniforms() {\n      var _this$props2 = this.props,\n          colorDomain = _this$props2.colorDomain,\n          elevationDomain = _this$props2.elevationDomain;\n      var domainUniforms = {};\n\n      if (colorDomain !== null) {\n        domainUniforms.colorDomainValid = true;\n        domainUniforms.colorDomain = colorDomain;\n      } else {\n        domainUniforms.colorDomainValid = false;\n      }\n\n      if (elevationDomain !== null) {\n        domainUniforms.elevationDomainValid = true;\n        domainUniforms.elevationDomain = elevationDomain;\n      } else {\n        domainUniforms.elevationDomainValid = false;\n      }\n\n      return domainUniforms;\n    }\n  }, {\n    key: \"_setupUniformBuffer\",\n    value: function _setupUniformBuffer(model) {\n      var gl = this.context.gl;\n      var programHandle = model.program.handle;\n      var colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n      var elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n      gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n      gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n    }\n  }]);\n\n  return GPUGridCellLayer;\n}(Layer);\n\nexport { GPUGridCellLayer as default };\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","Layer","vs","fs","modules","gl","attributeManager","colors","size","noAlloc","elevations","model","id","geometry","isInstanced","uniforms","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","fp64LowPart","gridOffsetLow","domainUniforms","colorRangeToFlatArray","target","index","programHandle","colorIndex","elevationIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}