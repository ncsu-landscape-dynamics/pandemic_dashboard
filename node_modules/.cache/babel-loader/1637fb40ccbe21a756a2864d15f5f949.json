{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  var data = props.data,\n      radius = props.radius;\n  var viewport = aggregationParams.viewport,\n      attributes = aggregationParams.attributes;\n  var centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  var radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  var screenPoints = [];\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var positions = attributes.positions.value;\n\n  var _attributes$positions = attributes.positions.getAccessor(),\n      size = _attributes$positions.size;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var object = _step.value;\n      objectInfo.index++;\n      var posIndex = objectInfo.index * size;\n      var position = [positions[posIndex], positions[posIndex + 1]];\n      var arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n\n      if (arrayIsFinite) {\n        screenPoints.push(Object.assign({\n          screenCoord: viewport.projectFlat(position)\n        }, object));\n      } else {\n        log.warn('HexagonLayer: invalid position')();\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var newHexbin = hexbin().radius(radiusCommon).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        position: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    }),\n    radiusCommon: radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  var attributes = aggregationParams.attributes;\n  var positions = attributes.positions.value;\n\n  var _attributes$positions2 = attributes.positions.getAccessor(),\n      size = _attributes$positions2.size;\n\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  var i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    var arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  var _viewport$getDistance = viewport.getDistanceScales(center),\n      unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["data","radius","props","viewport","attributes","aggregationParams","centerLngLat","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","createIterable","positions","size","object","posIndex","position","arrayIsFinite","Number","screenCoord","log","newHexbin","d","hexagonBins","hexagons","hex","points","index","minX","minY","maxX","maxY","i","x","y","Math","unitsPerMeter"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push(\n        Object.assign(\n          {\n            screenCoord: viewport.projectFlat(position)\n          },\n          object\n        )\n      );\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"]},"metadata":{},"sourceType":"module"}