{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport DRACOBuilder from './lib/draco-builder';\nexport default {\n  name: 'DRACO',\n  extensions: ['drc'],\n  encode: encode,\n  options: {\n    draco: {\n      pointcloud: false\n    }\n  }\n};\n\nfunction encode(_x, _x2) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options) {\n    var dracoOptions, _yield$loadDracoEncod, draco, dracoBuilder;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dracoOptions = options && options.draco || options || {};\n            _context.next = 3;\n            return loadDracoEncoderModule(options || {});\n\n          case 3:\n            _yield$loadDracoEncod = _context.sent;\n            draco = _yield$loadDracoEncod.draco;\n            dracoBuilder = new DRACOBuilder(draco);\n            _context.prev = 6;\n            return _context.abrupt(\"return\", dracoBuilder.encodeSync(data, dracoOptions));\n\n          case 8:\n            _context.prev = 8;\n            dracoBuilder.destroy();\n            return _context.finish(8);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6,, 8, 11]]);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/draco-writer.js"],"names":["name","extensions","encode","options","draco","pointcloud","dracoOptions","loadDracoEncoderModule","dracoBuilder"],"mappings":";;AAAA,SAAA,sBAAA,QAAA,2BAAA;AACA,OAAA,YAAA,MAAA,qBAAA;AAEA,eAAe;AACbA,EAAAA,IAAI,EADS,OAAA;AAEbC,EAAAA,UAAU,EAAE,CAFC,KAED,CAFC;AAGbC,EAAAA,MAAM,EAHO,MAAA;AAIbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AADP;AADA;AAJI,CAAf;;SAiBeH,M;;;;;uDAAf,SAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AAAA,QAAA,YAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,YAAA;;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAEQI,YAAAA,YAFR,GAEwBH,OAAO,IAAIA,OAAO,CAAnB,KAACA,IAAD,OAACA,IAFxB,EAEQG;AAFR,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAKwBC,sBAAsB,CAACJ,OAAO,IALtD,EAK8C,CAL9C;;AAAA,eAAA,CAAA;AAAA,YAAA,qBAAA,GAAA,QAAA,CAAA,IAAA;AAKSC,YAAAA,KALT,GAAA,qBAAA,CAAA,KAKSA;AACDI,YAAAA,YANR,GAMuB,IAAA,YAAA,CANvB,KAMuB,CAAfA;AANR,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EASWA,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,EATX,YASWA,CATX,CAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAWIA,YAAAA,YAAY,CAAZA,OAAAA;AAXJ,mBAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA","sourcesContent":["import {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport DRACOBuilder from './lib/draco-builder';\n\nexport default {\n  name: 'DRACO',\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: {\n      pointcloud: false // Set to true if pointcloud (mode: 0, no indices)\n      // Draco Compression Parameters\n      // method: 'MESH_EDGEBREAKER_ENCODING',\n      // speed: [5, 5],\n      // quantization: {\n      //   POSITION: 10\n      // }\n    }\n  }\n};\n\nasync function encode(data, options) {\n  // DEPRECATED - remove support for options\n  const dracoOptions = (options && options.draco) || options || {};\n\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options || {});\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, dracoOptions);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}