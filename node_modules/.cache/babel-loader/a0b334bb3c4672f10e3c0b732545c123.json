{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_PARAMETERS;\n\nimport { Framebuffer, Texture2D, isWebGL2 } from '@luma.gl/core';\nvar DEFAULT_PARAMETERS = (_DEFAULT_PARAMETERS = {}, _defineProperty(_DEFAULT_PARAMETERS, 10240, 9728), _defineProperty(_DEFAULT_PARAMETERS, 10241, 9728), _DEFAULT_PARAMETERS);\nexport function getFloatTexture(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$width = opts.width,\n      width = _opts$width === void 0 ? 1 : _opts$width,\n      _opts$height = opts.height,\n      height = _opts$height === void 0 ? 1 : _opts$height,\n      _opts$data = opts.data,\n      data = _opts$data === void 0 ? null : _opts$data,\n      _opts$unpackFlipY = opts.unpackFlipY,\n      unpackFlipY = _opts$unpackFlipY === void 0 ? true : _opts$unpackFlipY,\n      _opts$parameters = opts.parameters,\n      parameters = _opts$parameters === void 0 ? DEFAULT_PARAMETERS : _opts$parameters;\n  var texture = new Texture2D(gl, {\n    data: data,\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    parameters: parameters,\n    dataFormat: 6408,\n    width: width,\n    height: height,\n    unpackFlipY: unpackFlipY\n  });\n  return texture;\n}\nexport function getFramebuffer(gl, opts) {\n  var id = opts.id,\n      _opts$width2 = opts.width,\n      width = _opts$width2 === void 0 ? 1 : _opts$width2,\n      _opts$height2 = opts.height,\n      height = _opts$height2 === void 0 ? 1 : _opts$height2,\n      texture = opts.texture;\n  var fb = new Framebuffer(gl, {\n    id: id,\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n  return fb;\n}\nexport function getFloatArray(array, size) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["../../../src/utils/resource-utils.js"],"names":["DEFAULT_PARAMETERS","opts","width","height","data","unpackFlipY","parameters","texture","format","isWebGL2","type","border","mipmaps","dataFormat","id","fb","attachments","fillValue","array"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\n\nconst DEFAULT_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n};\n\nexport function getFloatTexture(gl, opts = {}) {\n  const {\n    width = 1,\n    height = 1,\n    data = null,\n    unpackFlipY = true,\n    parameters = DEFAULT_PARAMETERS\n  } = opts;\n  const texture = new Texture2D(gl, {\n    data,\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters,\n    dataFormat: GL.RGBA,\n    width,\n    height,\n    unpackFlipY\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}