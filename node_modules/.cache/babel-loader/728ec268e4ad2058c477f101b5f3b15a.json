{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport TransitionInterpolator from './transition-interpolator';\nimport { lerp } from 'math.gl';\nvar DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nvar DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\nvar LinearInterpolator = function (_TransitionInterpolat) {\n  _inherits(LinearInterpolator, _TransitionInterpolat);\n\n  function LinearInterpolator(transitionProps) {\n    _classCallCheck(this, LinearInterpolator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LinearInterpolator).call(this, transitionProps || {\n      compare: DEFAULT_PROPS,\n      extract: DEFAULT_PROPS,\n      required: DEFAULT_REQUIRED_PROPS\n    }));\n  }\n\n  _createClass(LinearInterpolator, [{\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      var viewport = {};\n\n      for (var key in endProps) {\n        viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n      }\n\n      return viewport;\n    }\n  }]);\n\n  return LinearInterpolator;\n}(TransitionInterpolator);\n\nexport { LinearInterpolator as default };","map":{"version":3,"sources":["../../../src/transitions/linear-interpolator.js"],"names":["DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","LinearInterpolator","TransitionInterpolator","transitionProps","compare","extract","required","startProps","endProps","t","viewport","lerp"],"mappings":";;;;;AAAA,OAAA,sBAAA,MAAA,2BAAA;AACA,SAAA,IAAA,QAAA,SAAA;AAEA,IAAMA,aAAa,GAAG,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAtB,OAAsB,CAAtB;AACA,IAAMC,sBAAsB,GAAG,CAAA,WAAA,EAAA,UAAA,EAA/B,MAA+B,CAA/B;;IAKqBC,kB;;;AAInB,WAAA,kBAAA,CAAA,eAAA,EAA6B;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,kBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAEzBE,eAAe,IAAI;AACjBC,MAAAA,OAAO,EADU,aAAA;AAEjBC,MAAAA,OAAO,EAFU,aAAA;AAGjBC,MAAAA,QAAQ,EAAEN;AAHO,KAFM,CAAA,CAAA;AAQ5B;;;;qCAEgBO,U,EAAYC,Q,EAAUC,C,EAAG;AACxC,UAAMC,QAAQ,GAAd,EAAA;;AACA,WAAK,IAAL,GAAA,IAAA,QAAA,EAA4B;AAC1BA,QAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgBC,IAAI,CAACJ,UAAU,CAAVA,GAAU,CAAVA,IAAD,CAAA,EAAuBC,QAAQ,CAARA,GAAQ,CAARA,IAAvB,CAAA,EAApBE,CAAoB,CAApBA;AACD;;AACD,aAAA,QAAA;AACD;;;;EApB6CR,sB;;SAA3BD,kB","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param {Array} transitionProps - list of props to apply linear transition to.\n   */\n  constructor(transitionProps) {\n    super(\n      transitionProps || {\n        compare: DEFAULT_PROPS,\n        extract: DEFAULT_PROPS,\n        required: DEFAULT_REQUIRED_PROPS\n      }\n    );\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = {};\n    for (const key in endProps) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n    return viewport;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}