{"ast":null,"code":"import xtend from 'xtend';\nimport * as Constants from './constants';\nconst classTypes = ['mode', 'feature', 'mouse'];\nexport default function (ctx) {\n  const buttonElements = {};\n  let activeButton = null;\n  let currentMapClasses = {\n    mode: null,\n    // e.g. mode-direct_select\n    feature: null,\n    // e.g. feature-vertex\n    mouse: null // e.g. mouse-move\n\n  };\n  let nextMapClasses = {\n    mode: null,\n    feature: null,\n    mouse: null\n  };\n\n  function clearMapClasses() {\n    queueMapClasses({\n      mode: null,\n      feature: null,\n      mouse: null\n    });\n    updateMapClasses();\n  }\n\n  function queueMapClasses(options) {\n    nextMapClasses = xtend(nextMapClasses, options);\n  }\n\n  function updateMapClasses() {\n    if (!ctx.container) return;\n    const classesToRemove = [];\n    const classesToAdd = [];\n    classTypes.forEach(type => {\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\n\n      if (nextMapClasses[type] !== null) {\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\n      }\n    });\n\n    if (classesToRemove.length > 0) {\n      ctx.container.classList.remove(...classesToRemove);\n    }\n\n    if (classesToAdd.length > 0) {\n      ctx.container.classList.add(...classesToAdd);\n    }\n\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\n  }\n\n  function createControlButton(id, options = {}) {\n    const button = document.createElement('button');\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\n    button.setAttribute('title', options.title);\n    options.container.appendChild(button);\n    button.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const clickedButton = e.target;\n\n      if (clickedButton === activeButton) {\n        deactivateButtons();\n        options.onDeactivate();\n        return;\n      }\n\n      setActiveButton(id);\n      options.onActivate();\n    }, true);\n    return button;\n  }\n\n  function deactivateButtons() {\n    if (!activeButton) return;\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\n    activeButton = null;\n  }\n\n  function setActiveButton(id) {\n    deactivateButtons();\n    const button = buttonElements[id];\n    if (!button) return;\n\n    if (button && id !== 'trash') {\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\n      activeButton = button;\n    }\n  }\n\n  function addButtons() {\n    const controls = ctx.options.controls;\n    const controlGroup = document.createElement('div');\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\n    if (!controls) return controlGroup;\n\n    if (controls[Constants.types.LINE]) {\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_LINE,\n        title: `LineString tool ${ctx.options.keybindings ? '(l)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls[Constants.types.POLYGON]) {\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\n        title: `Polygon tool ${ctx.options.keybindings ? '(p)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls[Constants.types.POINT]) {\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POINT,\n        title: `Marker tool ${ctx.options.keybindings ? '(m)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls.trash) {\n      buttonElements.trash = createControlButton('trash', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\n        title: 'Delete',\n        onActivate: () => {\n          ctx.events.trash();\n        }\n      });\n    }\n\n    if (controls.combine_features) {\n      buttonElements.combine_features = createControlButton('combineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\n        title: 'Combine',\n        onActivate: () => {\n          ctx.events.combineFeatures();\n        }\n      });\n    }\n\n    if (controls.uncombine_features) {\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\n        title: 'Uncombine',\n        onActivate: () => {\n          ctx.events.uncombineFeatures();\n        }\n      });\n    }\n\n    return controlGroup;\n  }\n\n  function removeButtons() {\n    Object.keys(buttonElements).forEach(buttonId => {\n      const button = buttonElements[buttonId];\n\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n\n      delete buttonElements[buttonId];\n    });\n  }\n\n  return {\n    setActiveButton,\n    queueMapClasses,\n    updateMapClasses,\n    clearMapClasses,\n    addButtons,\n    removeButtons\n  };\n}","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-gl-draw/src/ui.js"],"names":["xtend","Constants","classTypes","ctx","buttonElements","activeButton","currentMapClasses","mode","feature","mouse","nextMapClasses","clearMapClasses","queueMapClasses","updateMapClasses","options","container","classesToRemove","classesToAdd","forEach","type","push","length","classList","remove","add","createControlButton","id","button","document","createElement","className","classes","CONTROL_BUTTON","setAttribute","title","appendChild","addEventListener","e","preventDefault","stopPropagation","clickedButton","target","deactivateButtons","onDeactivate","setActiveButton","onActivate","ACTIVE_BUTTON","addButtons","controls","controlGroup","CONTROL_GROUP","CONTROL_BASE","types","LINE","CONTROL_BUTTON_LINE","keybindings","events","changeMode","modes","DRAW_LINE_STRING","trash","POLYGON","CONTROL_BUTTON_POLYGON","DRAW_POLYGON","POINT","CONTROL_BUTTON_POINT","DRAW_POINT","CONTROL_BUTTON_TRASH","combine_features","CONTROL_BUTTON_COMBINE_FEATURES","combineFeatures","uncombine_features","CONTROL_BUTTON_UNCOMBINE_FEATURES","uncombineFeatures","removeButtons","Object","keys","buttonId","parentNode","removeChild"],"mappings":"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","sourcesContent":["import xtend from 'xtend';\nimport * as Constants from './constants';\n\nconst classTypes = ['mode', 'feature', 'mouse'];\n\nexport default function(ctx) {\n\n\n  const buttonElements = {};\n  let activeButton = null;\n\n  let currentMapClasses = {\n    mode: null, // e.g. mode-direct_select\n    feature: null, // e.g. feature-vertex\n    mouse: null // e.g. mouse-move\n  };\n\n  let nextMapClasses = {\n    mode: null,\n    feature: null,\n    mouse: null\n  };\n\n  function clearMapClasses() {\n    queueMapClasses({mode:null, feature:null, mouse:null});\n    updateMapClasses();\n  }\n\n  function queueMapClasses(options) {\n    nextMapClasses = xtend(nextMapClasses, options);\n  }\n\n  function updateMapClasses() {\n    if (!ctx.container) return;\n\n    const classesToRemove = [];\n    const classesToAdd = [];\n\n    classTypes.forEach((type) => {\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\n\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\n      if (nextMapClasses[type] !== null) {\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\n      }\n    });\n\n    if (classesToRemove.length > 0) {\n      ctx.container.classList.remove(...classesToRemove);\n    }\n\n    if (classesToAdd.length > 0) {\n      ctx.container.classList.add(...classesToAdd);\n    }\n\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\n  }\n\n  function createControlButton(id, options = {}) {\n    const button = document.createElement('button');\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\n    button.setAttribute('title', options.title);\n    options.container.appendChild(button);\n\n    button.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const clickedButton = e.target;\n      if (clickedButton === activeButton) {\n        deactivateButtons();\n        options.onDeactivate();\n        return;\n      }\n\n      setActiveButton(id);\n      options.onActivate();\n    }, true);\n\n    return button;\n  }\n\n  function deactivateButtons() {\n    if (!activeButton) return;\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\n    activeButton = null;\n  }\n\n  function setActiveButton(id) {\n    deactivateButtons();\n\n    const button = buttonElements[id];\n    if (!button) return;\n\n    if (button && id !== 'trash') {\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\n      activeButton = button;\n    }\n  }\n\n  function addButtons() {\n    const controls = ctx.options.controls;\n    const controlGroup = document.createElement('div');\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\n\n    if (!controls) return controlGroup;\n\n    if (controls[Constants.types.LINE]) {\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_LINE,\n        title: `LineString tool ${ctx.options.keybindings ? '(l)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls[Constants.types.POLYGON]) {\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\n        title: `Polygon tool ${ctx.options.keybindings ? '(p)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls[Constants.types.POINT]) {\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POINT,\n        title: `Marker tool ${ctx.options.keybindings ? '(m)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT),\n        onDeactivate: () => ctx.events.trash()\n      });\n    }\n\n    if (controls.trash) {\n      buttonElements.trash = createControlButton('trash', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\n        title: 'Delete',\n        onActivate: () => {\n          ctx.events.trash();\n        }\n      });\n    }\n\n    if (controls.combine_features) {\n      buttonElements.combine_features = createControlButton('combineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\n        title: 'Combine',\n        onActivate: () => {\n          ctx.events.combineFeatures();\n        }\n      });\n    }\n\n    if (controls.uncombine_features) {\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\n        title: 'Uncombine',\n        onActivate: () => {\n          ctx.events.uncombineFeatures();\n        }\n      });\n    }\n\n    return controlGroup;\n  }\n\n  function removeButtons() {\n    Object.keys(buttonElements).forEach((buttonId) => {\n      const button = buttonElements[buttonId];\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n      delete buttonElements[buttonId];\n    });\n  }\n\n  return {\n    setActiveButton,\n    queueMapClasses,\n    updateMapClasses,\n    clearMapClasses,\n    addButtons,\n    removeButtons\n  };\n}\n"]},"metadata":{},"sourceType":"module"}