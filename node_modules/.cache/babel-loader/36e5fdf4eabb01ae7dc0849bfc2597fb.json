{"ast":null,"code":"export var defaultColorRange = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [240, 59, 32], [189, 0, 38]];\nexport function colorRangeToFlatArray(colorRange) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ArrayType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float32Array;\n  var flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    flatArray = new ArrayType(colorRange);\n  } else {\n    flatArray = new ArrayType(colorRange.length * 4);\n    var index = 0;\n\n    for (var i = 0; i < colorRange.length; i++) {\n      var color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (var _i = 0; _i < flatArray.length; _i++) {\n      flatArray[_i] /= 255;\n    }\n  }\n\n  return flatArray;\n}","map":{"version":3,"sources":["../../../src/utils/color-utils.js"],"names":["defaultColorRange","normalize","ArrayType","Float32Array","Number","colorRange","flatArray","index","i","color"],"mappings":"AAoBA,OAAO,IAAMA,iBAAiB,GAAG,CAC/B,CAAA,GAAA,EAAA,GAAA,EAD+B,GAC/B,CAD+B,EAE/B,CAAA,GAAA,EAAA,GAAA,EAF+B,GAE/B,CAF+B,EAG/B,CAAA,GAAA,EAAA,GAAA,EAH+B,EAG/B,CAH+B,EAI/B,CAAA,GAAA,EAAA,GAAA,EAJ+B,EAI/B,CAJ+B,EAK/B,CAAA,GAAA,EAAA,EAAA,EAL+B,EAK/B,CAL+B,EAM/B,CAAA,GAAA,EAAA,CAAA,EANK,EAML,CAN+B,CAA1B;AAUP,OAAO,SAAA,qBAAA,CAAA,UAAA,EAAwF;AAAA,MAA7CC,SAA6C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAjC,KAAiC;AAAA,MAA1BC,SAA0B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAdC,YAAc;AAC7F,MAAA,SAAA;;AAEA,MAAIC,MAAM,CAANA,QAAAA,CAAgBC,UAAU,CAA9B,CAA8B,CAA1BD,CAAJ,EAAoC;AAElCE,IAAAA,SAAS,GAAG,IAAA,SAAA,CAAZA,UAAY,CAAZA;AAFF,GAAA,MAGO;AAELA,IAAAA,SAAS,GAAG,IAAA,SAAA,CAAcD,UAAU,CAAVA,MAAAA,GAA1BC,CAAY,CAAZA;AACA,QAAIC,KAAK,GAAT,CAAA;;AAEA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGH,UAAU,CAA9B,MAAA,EAAuCG,CAAvC,EAAA,EAA4C;AAC1C,UAAMC,KAAK,GAAGJ,UAAU,CAAxB,CAAwB,CAAxB;AACAC,MAAAA,SAAS,CAACC,KAAVD,EAAS,CAATA,GAAqBG,KAAK,CAA1BH,CAA0B,CAA1BA;AACAA,MAAAA,SAAS,CAACC,KAAVD,EAAS,CAATA,GAAqBG,KAAK,CAA1BH,CAA0B,CAA1BA;AACAA,MAAAA,SAAS,CAACC,KAAVD,EAAS,CAATA,GAAqBG,KAAK,CAA1BH,CAA0B,CAA1BA;AACAA,MAAAA,SAAS,CAACC,KAAVD,EAAS,CAATA,GAAqBF,MAAM,CAANA,QAAAA,CAAgBK,KAAK,CAArBL,CAAqB,CAArBA,IAA4BK,KAAK,CAAjCL,CAAiC,CAAjCA,GAArBE,GAAAA;AACD;AACF;;AAED,MAAA,SAAA,EAAe;AACb,SAAK,IAAIE,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAGF,SAAS,CAA7B,MAAA,EAAsCE,EAAtC,EAAA,EAA2C;AACzCF,MAAAA,SAAS,CAATA,EAAS,CAATA,IAAAA,GAAAA;AACD;AACF;;AACD,SAAA,SAAA;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n"]},"metadata":{},"sourceType":"module"}