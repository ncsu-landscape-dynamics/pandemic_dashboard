{"ast":null,"code":"'use strict'; // Like https://github.com/thlorenz/lib/parse-link-header but without any\n// additional dependencies.\n\nfunction parseParam(param) {\n  var parts = param.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/);\n  if (!parts) return null;\n  return {\n    key: parts[1],\n    value: parts[2]\n  };\n}\n\nfunction parseLink(link) {\n  var parts = link.match(/<?([^>]*)>(.*)/);\n  if (!parts) return null;\n  var linkUrl = parts[1];\n  var linkParams = parts[2].split(';');\n  var rel = null;\n  var parsedLinkParams = linkParams.reduce(function (result, param) {\n    var parsed = parseParam(param);\n    if (!parsed) return result;\n\n    if (parsed.key === 'rel') {\n      if (!rel) {\n        rel = parsed.value;\n      }\n\n      return result;\n    }\n\n    result[parsed.key] = parsed.value;\n    return result;\n  }, {});\n  if (!rel) return null;\n  return {\n    url: linkUrl,\n    rel: rel,\n    params: parsedLinkParams\n  };\n}\n/**\n * Parse a Link header.\n *\n * @param {string} linkHeader\n * @returns {{\n *   [string]: {\n *     url: string,\n *     params: { [string]: string }\n *   }\n * }}\n */\n\n\nfunction parseLinkHeader(linkHeader) {\n  if (!linkHeader) return {};\n  return linkHeader.split(/,\\s*</).reduce(function (result, link) {\n    var parsed = parseLink(link);\n    if (!parsed) return result; // rel value can be multiple whitespace-separated rels.\n\n    var splitRel = parsed.rel.split(/\\s+/);\n    splitRel.forEach(function (rel) {\n      if (!result[rel]) {\n        result[rel] = {\n          url: parsed.url,\n          params: parsed.params\n        };\n      }\n    });\n    return result;\n  }, {});\n}\n\nmodule.exports = parseLinkHeader;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-sdk/lib/helpers/parse-link-header.js"],"names":["parseParam","param","parts","match","key","value","parseLink","link","linkUrl","linkParams","split","rel","parsedLinkParams","reduce","result","parsed","url","params","parseLinkHeader","linkHeader","splitRel","forEach","module","exports"],"mappings":"AAAA,a,CAEA;AACA;;AAEA,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,2BAAZ,CAAZ;AACA,MAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AAEZ,SAAO;AACLE,IAAAA,GAAG,EAAEF,KAAK,CAAC,CAAD,CADL;AAELG,IAAAA,KAAK,EAAEH,KAAK,CAAC,CAAD;AAFP,GAAP;AAID;;AAED,SAASI,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIL,KAAK,GAAGK,IAAI,CAACJ,KAAL,CAAW,gBAAX,CAAZ;AACA,MAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAIM,OAAO,GAAGN,KAAK,CAAC,CAAD,CAAnB;AACA,MAAIO,UAAU,GAAGP,KAAK,CAAC,CAAD,CAAL,CAASQ,KAAT,CAAe,GAAf,CAAjB;AACA,MAAIC,GAAG,GAAG,IAAV;AACA,MAAIC,gBAAgB,GAAGH,UAAU,CAACI,MAAX,CAAkB,UAASC,MAAT,EAAiBb,KAAjB,EAAwB;AAC/D,QAAIc,MAAM,GAAGf,UAAU,CAACC,KAAD,CAAvB;AACA,QAAI,CAACc,MAAL,EAAa,OAAOD,MAAP;;AACb,QAAIC,MAAM,CAACX,GAAP,KAAe,KAAnB,EAA0B;AACxB,UAAI,CAACO,GAAL,EAAU;AACRA,QAAAA,GAAG,GAAGI,MAAM,CAACV,KAAb;AACD;;AACD,aAAOS,MAAP;AACD;;AACDA,IAAAA,MAAM,CAACC,MAAM,CAACX,GAAR,CAAN,GAAqBW,MAAM,CAACV,KAA5B;AACA,WAAOS,MAAP;AACD,GAXsB,EAWpB,EAXoB,CAAvB;AAYA,MAAI,CAACH,GAAL,EAAU,OAAO,IAAP;AAEV,SAAO;AACLK,IAAAA,GAAG,EAAER,OADA;AAELG,IAAAA,GAAG,EAAEA,GAFA;AAGLM,IAAAA,MAAM,EAAEL;AAHH,GAAP;AAKD;AAED;;;;;;;;;;;;;AAWA,SAASM,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,MAAI,CAACA,UAAL,EAAiB,OAAO,EAAP;AAEjB,SAAOA,UAAU,CAACT,KAAX,CAAiB,OAAjB,EAA0BG,MAA1B,CAAiC,UAASC,MAAT,EAAiBP,IAAjB,EAAuB;AAC7D,QAAIQ,MAAM,GAAGT,SAAS,CAACC,IAAD,CAAtB;AACA,QAAI,CAACQ,MAAL,EAAa,OAAOD,MAAP,CAFgD,CAG7D;;AACA,QAAIM,QAAQ,GAAGL,MAAM,CAACJ,GAAP,CAAWD,KAAX,CAAiB,KAAjB,CAAf;AACAU,IAAAA,QAAQ,CAACC,OAAT,CAAiB,UAASV,GAAT,EAAc;AAC7B,UAAI,CAACG,MAAM,CAACH,GAAD,CAAX,EAAkB;AAChBG,QAAAA,MAAM,CAACH,GAAD,CAAN,GAAc;AACZK,UAAAA,GAAG,EAAED,MAAM,CAACC,GADA;AAEZC,UAAAA,MAAM,EAAEF,MAAM,CAACE;AAFH,SAAd;AAID;AACF,KAPD;AAQA,WAAOH,MAAP;AACD,GAdM,EAcJ,EAdI,CAAP;AAeD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBL,eAAjB","sourcesContent":["'use strict';\n\n// Like https://github.com/thlorenz/lib/parse-link-header but without any\n// additional dependencies.\n\nfunction parseParam(param) {\n  var parts = param.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/);\n  if (!parts) return null;\n\n  return {\n    key: parts[1],\n    value: parts[2]\n  };\n}\n\nfunction parseLink(link) {\n  var parts = link.match(/<?([^>]*)>(.*)/);\n  if (!parts) return null;\n\n  var linkUrl = parts[1];\n  var linkParams = parts[2].split(';');\n  var rel = null;\n  var parsedLinkParams = linkParams.reduce(function(result, param) {\n    var parsed = parseParam(param);\n    if (!parsed) return result;\n    if (parsed.key === 'rel') {\n      if (!rel) {\n        rel = parsed.value;\n      }\n      return result;\n    }\n    result[parsed.key] = parsed.value;\n    return result;\n  }, {});\n  if (!rel) return null;\n\n  return {\n    url: linkUrl,\n    rel: rel,\n    params: parsedLinkParams\n  };\n}\n\n/**\n * Parse a Link header.\n *\n * @param {string} linkHeader\n * @returns {{\n *   [string]: {\n *     url: string,\n *     params: { [string]: string }\n *   }\n * }}\n */\nfunction parseLinkHeader(linkHeader) {\n  if (!linkHeader) return {};\n\n  return linkHeader.split(/,\\s*</).reduce(function(result, link) {\n    var parsed = parseLink(link);\n    if (!parsed) return result;\n    // rel value can be multiple whitespace-separated rels.\n    var splitRel = parsed.rel.split(/\\s+/);\n    splitRel.forEach(function(rel) {\n      if (!result[rel]) {\n        result[rel] = {\n          url: parsed.url,\n          params: parsed.params\n        };\n      }\n    });\n    return result;\n  }, {});\n}\n\nmodule.exports = parseLinkHeader;\n"]},"metadata":{},"sourceType":"script"}