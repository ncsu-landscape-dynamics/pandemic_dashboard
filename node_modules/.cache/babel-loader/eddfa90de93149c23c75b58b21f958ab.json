{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { log } from '@deck.gl/core';\n\nvar Tile2DHeader = function () {\n  function Tile2DHeader(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        onTileLoad = _ref.onTileLoad,\n        onTileError = _ref.onTileError;\n\n    _classCallCheck(this, Tile2DHeader);\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this.onTileLoad = onTileLoad;\n    this.onTileError = onTileError;\n  }\n\n  _createClass(Tile2DHeader, [{\n    key: \"_loadData\",\n    value: function () {\n      var _loadData2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(getTileData, requestScheduler) {\n        var x, y, z, bbox, requestToken, tileData, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                x = this.x, y = this.y, z = this.z, bbox = this.bbox;\n                _context.next = 3;\n                return requestScheduler.scheduleRequest(this, function (tile) {\n                  return tile.isSelected ? 1 : -1;\n                });\n\n              case 3:\n                requestToken = _context.sent;\n\n                if (requestToken) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this._isCancelled = true;\n                return _context.abrupt(\"return\");\n\n              case 7:\n                this._isCancelled = false;\n                _context.prev = 8;\n                _context.next = 11;\n                return getTileData({\n                  x: x,\n                  y: y,\n                  z: z,\n                  bbox: bbox\n                });\n\n              case 11:\n                tileData = _context.sent;\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](8);\n                error = _context.t0 || true;\n\n              case 17:\n                _context.prev = 17;\n                requestToken.done();\n                this._isLoaded = true;\n                return _context.finish(17);\n\n              case 21:\n                if (error) {\n                  this.onTileError(error, this);\n                } else {\n                  this.content = tileData;\n                  this.onTileLoad(this);\n                }\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 14, 17, 21]]);\n      }));\n\n      function _loadData(_x, _x2) {\n        return _loadData2.apply(this, arguments);\n      }\n\n      return _loadData;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function loadData(getTileData, requestScheduler) {\n      if (!getTileData) {\n        return;\n      }\n\n      this._loader = this._loadData(getTileData, requestScheduler);\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._isLoaded ? this.content : this._loader;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._isLoaded;\n    }\n  }, {\n    key: \"isCancelled\",\n    get: function get() {\n      return this._isCancelled;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var result = this.content ? this.content.byteLength : 0;\n\n      if (!Number.isFinite(result)) {\n        log.error('byteLength not defined in tile data')();\n      }\n\n      return result;\n    }\n  }]);\n\n  return Tile2DHeader;\n}();\n\nexport { Tile2DHeader as default };","map":{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["Tile2DHeader","x","y","z","onTileLoad","onTileError","result","Number","log","getTileData","requestScheduler","bbox","requestToken","tile","tileData","error"],"mappings":";;;;AAAA,SAAA,GAAA,QAAA,eAAA;;IAEqBA,Y;AACnB,WAAA,YAAA,CAAA,IAAA,EAAgD;AAAA,QAAnCC,CAAmC,GAAA,IAAA,CAAnCA,CAAmC;AAAA,QAAhCC,CAAgC,GAAA,IAAA,CAAhCA,CAAgC;AAAA,QAA7BC,CAA6B,GAAA,IAAA,CAA7BA,CAA6B;AAAA,QAA1BC,UAA0B,GAAA,IAAA,CAA1BA,UAA0B;AAAA,QAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAC9C,SAAA,CAAA,GAAA,CAAA;AACA,SAAA,CAAA,GAAA,CAAA;AACA,SAAA,CAAA,GAAA,CAAA;AACA,SAAA,SAAA,GAAA,KAAA;AACA,SAAA,UAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,QAAA,GAAA,EAAA;AAEA,SAAA,OAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,KAAA;AACA,SAAA,YAAA,GAAA,KAAA;AAEA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACD;;;;;mFAsBeI,W,EAAaC,gB;;;;;;AACpBT,gBAAAA,C,GAAiB,KAAjBA,CAAAA,EAAGC,C,GAAc,KAAdA,CAAHD,EAAME,C,GAAW,KAAXA,CAANF,EAASU,I,GAAQ,KAARA,IAATV;;uBAEoB,gBAAgB,CAAhB,eAAA,CAAA,IAAA,EAAuC,UAAA,IAAA,EAAQ;AACxE,yBAAOY,IAAI,CAAJA,UAAAA,GAAAA,CAAAA,GAAsB,CAA7B,CAAA;AADyB,iBAAA,C;;;AAArBD,gBAAAA,Y,gBAAAA;;oBAIDA,Y;;;;;AACH,qBAAA,YAAA,GAAA,IAAA;;;;AAIF,qBAAA,YAAA,GAAA,KAAA;;;uBAImBH,WAAW,CAAC;AAACR,kBAAAA,CAAC,EAAF,CAAA;AAAIC,kBAAAA,CAAC,EAAL,CAAA;AAAOC,kBAAAA,CAAC,EAAR,CAAA;AAAUQ,kBAAAA,IAAI,EAAJA;AAAV,iBAAD,C;;;AAA5BG,gBAAAA,Q,gBAAAA;;;;;;;AAEAC,gBAAAA,KAAK,GAAG,QAAA,CAAA,EAAA,IAARA,IAAAA;;;;AAEAH,gBAAAA,YAAY,CAAZA,IAAAA;AACA,qBAAA,SAAA,GAAA,IAAA;;;;AAGF,oBAAA,KAAA,EAAW;AACT,uBAAA,WAAA,CAAA,KAAA,EAAA,IAAA;AADF,iBAAA,MAEO;AACL,uBAAA,OAAA,GAAA,QAAA;AACA,uBAAA,UAAA,CAAA,IAAA;AACD;;;;;;;;;;;;;;;;;;6BAGMH,W,EAAaC,gB,EAAkB;AACtC,UAAI,CAAJ,WAAA,EAAkB;AAChB;AACD;;AAED,WAAA,OAAA,GAAe,KAAA,SAAA,CAAA,WAAA,EAAf,gBAAe,CAAf;AACD;;;wBA1DU;AACT,aAAO,KAAA,SAAA,GAAiB,KAAjB,OAAA,GAAgC,KAAvC,OAAA;AACD;;;wBAEc;AACb,aAAO,KAAP,SAAA;AACD;;;wBAEiB;AAChB,aAAO,KAAP,YAAA;AACD;;;wBAEgB;AACf,UAAMJ,MAAM,GAAG,KAAA,OAAA,GAAe,KAAA,OAAA,CAAf,UAAA,GAAf,CAAA;;AACA,UAAI,CAACC,MAAM,CAANA,QAAAA,CAAL,MAAKA,CAAL,EAA8B;AAC5BC,QAAAA,GAAG,CAAHA,KAAAA,CAAAA,qCAAAA;AACD;;AACD,aAAA,MAAA;AACD;;;;;;SApCkBR,Y","sourcesContent":["import {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z, onTileLoad, onTileError}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n    this._isLoaded = false;\n    this._isCancelled = false;\n\n    this.onTileLoad = onTileLoad;\n    this.onTileError = onTileError;\n  }\n\n  get data() {\n    return this._isLoaded ? this.content : this._loader;\n  }\n\n  get isLoaded() {\n    return this._isLoaded;\n  }\n\n  get isCancelled() {\n    return this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  async _loadData(getTileData, requestScheduler) {\n    const {x, y, z, bbox} = this;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n\n    this._isCancelled = false;\n    let tileData;\n    let error;\n    try {\n      tileData = await getTileData({x, y, z, bbox});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n      this._isLoaded = true;\n    }\n\n    if (error) {\n      this.onTileError(error, this);\n    } else {\n      this.content = tileData;\n      this.onTileLoad(this);\n    }\n  }\n\n  loadData(getTileData, requestScheduler) {\n    if (!getTileData) {\n      return;\n    }\n\n    this._loader = this._loadData(getTileData, requestScheduler);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}