{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE } from '@loaders.gl/tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  var contentUrl = tile.contentUrl;\n  var fileExtension = contentUrl.split('.').pop();\n\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n\n    case 'i3dm':\n    case 'b3dm':\n      return TILE_TYPE.SCENEGRAPH;\n\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (tile.content) {\n    var contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = \"\".concat(options.basePath, \"/\").concat(contentUri);\n  }\n\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n  return tile;\n}\nexport function normalizeTileHeaders(tileset) {\n  var basePath = tileset.basePath;\n  var root = normalizeTileData(tileset.root, tileset);\n  var stack = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    var tile = stack.pop();\n    var children = tile.children || [];\n\n    var _iterator = _createForOfIteratorHelper(children),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var childHeader = _step.value;\n        normalizeTileData(childHeader, {\n          basePath: basePath\n        });\n        stack.push(childHeader);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return root;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-header.js"],"names":["tile","TILE_TYPE","contentUrl","fileExtension","TILE_REFINEMENT","contentUri","options","LOD_METRIC_TYPE","getTileType","getRefine","basePath","tileset","root","normalizeTileData","stack","children","childHeader"],"mappings":"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","sourcesContent":["import {LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE} from '@loaders.gl/tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl;\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = `${options.basePath}/${contentUri}`;\n  }\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n  return tile;\n}\n\n// normalize tile headers\nexport function normalizeTileHeaders(tileset) {\n  const basePath = tileset.basePath;\n  const root = normalizeTileData(tileset.root, tileset);\n\n  const stack = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop();\n    const children = tile.children || [];\n    for (const childHeader of children) {\n      normalizeTileData(childHeader, {basePath});\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}\n"]},"metadata":{},"sourceType":"module"}