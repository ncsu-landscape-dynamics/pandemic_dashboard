{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterator-utils/make-iterator/make-iterator';\nimport { concatenateChunksAsync } from '../../iterator-utils/async-iteration';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport { checkFetchResponseStatus } from './check-errors';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getUrlFromData(data, url) {\n  if (isResponse(data)) {\n    url = url || data.url;\n  } else if (isBlob(url)) {\n    url = url.name;\n  }\n\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    var arrayBuffer = data;\n\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    if (loader.text && !loader.binary) {\n      var _textDecoder = new TextDecoder('utf8');\n\n      return _textDecoder.decode(data);\n    }\n\n    var _arrayBuffer = data.buffer;\n    var byteLength = data.byteLength || data.length;\n\n    if (data.byteOffset !== 0 || byteLength !== _arrayBuffer.byteLength) {\n      _arrayBuffer = _arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n\n    return _arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {\n    var isArrayBuffer, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return data;\n\n          case 2:\n            data = _context3.sent;\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader));\n\n          case 6:\n            if (!isBlob(data)) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 9;\n            return fetchFileReadable(data);\n\n          case 9:\n            data = _context3.sent;\n\n          case 10:\n            if (!isResponse(data)) {\n              _context3.next = 24;\n              break;\n            }\n\n            response = data;\n            _context3.next = 14;\n            return checkFetchResponseStatus(response);\n\n          case 14:\n            if (!loader.binary) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 17;\n            return response.arrayBuffer();\n\n          case 17:\n            _context3.t0 = _context3.sent;\n            _context3.next = 23;\n            break;\n\n          case 20:\n            _context3.next = 22;\n            return response.text();\n\n          case 22:\n            _context3.t0 = _context3.sent;\n\n          case 23:\n            return _context3.abrupt(\"return\", _context3.t0);\n\n          case 24:\n            if (isReadableStream(data)) {\n              data = makeIterator(data);\n            }\n\n            if (!(isIterable(data) || isAsyncIterable(data))) {\n              _context3.next = 27;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", concatenateChunksAsync(data));\n\n          case 27:\n            throw new Error(ERR_DATA);\n\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nexport function getAsyncIteratorFromData(_x3) {\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\n\nfunction _getAsyncIteratorFromData() {\n  _getAsyncIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!isIterator(data)) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data);\n\n          case 2:\n            if (!isResponse(data)) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 5;\n            return checkFetchResponseStatus(data);\n\n          case 5:\n            return _context4.abrupt(\"return\", makeIterator(data.body));\n\n          case 6:\n            if (!(isBlob(data) || isReadableStream(data))) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", makeIterator(data));\n\n          case 8:\n            if (!isAsyncIterable(data)) {\n              _context4.next = 10;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data[Symbol.asyncIterator]());\n\n          case 10:\n            return _context4.abrupt(\"return\", getIteratorFromData(data));\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\n\nexport function getIteratorFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return _regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return data.buffer;\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return _regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return data;\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["ERR_DATA","isResponse","url","data","isBlob","loader","arrayBuffer","textDecoder","ArrayBuffer","isBuffer","byteLength","isArrayBuffer","getArrayBufferOrStringFromDataSync","fetchFileReadable","response","checkFetchResponseStatus","isReadableStream","makeIterator","isIterable","isAsyncIterable","concatenateChunksAsync","isIterator","Symbol","getIteratorFromData"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterator-utils/make-iterator/make-iterator';\nimport {concatenateChunksAsync} from '../../iterator-utils/async-iteration';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport {checkFetchResponseStatus} from './check-errors';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// Extract a URL from `parse` arguments if possible\n// If a fetch Response object or File/Blob were passed in get URL from those objects\nexport function getUrlFromData(data, url) {\n  if (isResponse(data)) {\n    url = url || data.url;\n  } else if (isBlob(url)) {\n    // File or Blob\n    url = url.name;\n  }\n  // Strip any query string\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkFetchResponseStatus(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeIterator(data);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateChunksAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkFetchResponseStatus(data);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    return makeIterator(data.body);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nexport function getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"]},"metadata":{},"sourceType":"module"}