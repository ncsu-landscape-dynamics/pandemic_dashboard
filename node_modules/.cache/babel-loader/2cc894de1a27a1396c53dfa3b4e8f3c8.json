{"ast":null,"code":"'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\n\nvar xtend = require('xtend');\n\nvar EventEmitter = require('eventemitter3');\n\nvar urlUtils = require('../helpers/url-utils');\n\nvar constants = require('../constants');\n\nvar requestId = 1;\n/**\n * A Mapbox API request.\n *\n * Note that creating a `MapiRequest` does *not* send the request automatically.\n * Use the request's `send` method to send it off and get a `Promise`.\n *\n * The `emitter` property is an `EventEmitter` that emits the following events:\n *\n * - `'response'` - Listeners will be called with a `MapiResponse`.\n * - `'error'` - Listeners will be called with a `MapiError`.\n * - `'downloadProgress'` - Listeners will be called with `ProgressEvents`.\n * - `'uploadProgress'` - Listeners will be called with `ProgressEvents`.\n *   Upload events are only available when the request includes a file.\n *\n * @class MapiRequest\n * @property {EventEmitter} emitter - An event emitter. See above.\n * @property {MapiClient} client - This request's `MapiClient`.\n * @property {MapiResponse|null} response - If this request has been sent and received\n *   a response, the response is available on this property.\n * @property {MapiError|Error|null} error - If this request has been sent and\n *   received an error in response, the error is available on this property.\n * @property {boolean} aborted - If the request has been aborted\n *   (via [`abort`](#abort)), this property will be `true`.\n * @property {boolean} sent - If the request has been sent, this property will\n *   be `true`. You cannot send the same request twice, so if you need to create\n *   a new request that is the equivalent of an existing one, use\n *   [`clone`](#clone).\n * @property {string} path - The request's path, including colon-prefixed route\n *   parameters.\n * @property {string} origin - The request's origin.\n * @property {string} method - The request's HTTP method.\n * @property {Object} query - A query object, which will be transformed into\n *   a URL query string.\n * @property {Object} params - A route parameters object, whose values will\n *   be interpolated the path.\n * @property {Object} headers - The request's headers.\n * @property {Object|string|null} body - Data to send with the request.\n *   If the request has a body, it will also be sent with the header\n *   `'Content-Type: application/json'`.\n * @property {Blob|ArrayBuffer|string|ReadStream} file - A file to\n *   send with the request. The browser client accepts Blobs and ArrayBuffers;\n *   the Node client accepts strings (filepaths) and ReadStreams.\n * @property {string} encoding - The encoding of the response.\n * @property {string} sendFileAs - The method to send the `file`. Options are\n *   `data` (x-www-form-urlencoded) or `form` (multipart/form-data).\n */\n\n/**\n * @ignore\n * @param {MapiClient} client\n * @param {Object} options\n * @param {string} options.method\n * @param {string} options.path\n * @param {Object} [options.query={}]\n * @param {Object} [options.params={}]\n * @param {string} [options.origin]\n * @param {Object} [options.headers]\n * @param {Object} [options.body=null]\n * @param {Blob|ArrayBuffer|string|ReadStream} [options.file=null]\n * @param {string} [options.encoding=utf8]\n */\n\nfunction MapiRequest(client, options) {\n  if (!client) {\n    throw new Error('MapiRequest requires a client');\n  }\n\n  if (!options || !options.path || !options.method) {\n    throw new Error('MapiRequest requires an options object with path and method properties');\n  }\n\n  var defaultHeaders = {};\n\n  if (options.body) {\n    defaultHeaders['content-type'] = 'application/json';\n  }\n\n  var headersWithDefaults = xtend(defaultHeaders, options.headers); // Disallows duplicate header names of mixed case,\n  // e.g. Content-Type and content-type.\n\n  var headers = Object.keys(headersWithDefaults).reduce(function (memo, name) {\n    memo[name.toLowerCase()] = headersWithDefaults[name];\n    return memo;\n  }, {});\n  this.id = requestId++;\n  this._options = options;\n  this.emitter = new EventEmitter();\n  this.client = client;\n  this.response = null;\n  this.error = null;\n  this.sent = false;\n  this.aborted = false;\n  this.path = options.path;\n  this.method = options.method;\n  this.origin = options.origin || client.origin;\n  this.query = options.query || {};\n  this.params = options.params || {};\n  this.body = options.body || null;\n  this.file = options.file || null;\n  this.encoding = options.encoding || 'utf8';\n  this.sendFileAs = options.sendFileAs || null;\n  this.headers = headers;\n}\n/**\n * Get the URL of the request.\n *\n * @param {string} [accessToken] - By default, the access token of the request's\n *   client is used.\n * @return {string}\n */\n\n\nMapiRequest.prototype.url = function url(accessToken) {\n  var url = urlUtils.prependOrigin(this.path, this.origin);\n  url = urlUtils.appendQueryObject(url, this.query);\n  var routeParams = this.params;\n  var actualAccessToken = accessToken == null ? this.client.accessToken : accessToken;\n\n  if (actualAccessToken) {\n    url = urlUtils.appendQueryParam(url, 'access_token', actualAccessToken);\n    var accessTokenOwnerId = parseToken(actualAccessToken).user;\n    routeParams = xtend({\n      ownerId: accessTokenOwnerId\n    }, routeParams);\n  }\n\n  url = urlUtils.interpolateRouteParams(url, routeParams);\n  return url;\n};\n/**\n * Send the request. Returns a Promise that resolves with a `MapiResponse`.\n * You probably want to use `response.body`.\n *\n * `send` only retrieves the first page of paginated results. You can get\n * the next page by using the `MapiResponse`'s [`nextPage`](#nextpage)\n * function, or iterate through all pages using [`eachPage`](#eachpage)\n * instead of `send`.\n *\n * @returns {Promise<MapiResponse>}\n */\n\n\nMapiRequest.prototype.send = function send() {\n  var self = this;\n\n  if (self.sent) {\n    throw new Error('This request has already been sent. Check the response and error properties. Create a new request with clone().');\n  }\n\n  self.sent = true;\n  return self.client.sendRequest(self).then(function (response) {\n    self.response = response;\n    self.emitter.emit(constants.EVENT_RESPONSE, response);\n    return response;\n  }, function (error) {\n    self.error = error;\n    self.emitter.emit(constants.EVENT_ERROR, error);\n    throw error;\n  });\n};\n/**\n * Abort the request.\n *\n * Any pending `Promise` returned by [`send`](#send) will be rejected with\n * an error with `type: 'RequestAbortedError'`. If you've created a request\n * that might be aborted, you need to catch and handle such errors.\n *\n * This method will also abort any requests created while fetching subsequent\n * pages via [`eachPage`](#eachpage).\n *\n * If the request has not been sent or has already been aborted, nothing\n * will happen.\n */\n\n\nMapiRequest.prototype.abort = function abort() {\n  if (this._nextPageRequest) {\n    this._nextPageRequest.abort();\n\n    delete this._nextPageRequest;\n  }\n\n  if (this.response || this.error || this.aborted) return;\n  this.aborted = true;\n  this.client.abortRequest(this);\n};\n/**\n * Invoke a callback for each page of a paginated API response.\n *\n * The callback should have the following signature:\n *\n * ```js\n * (\n *   error: MapiError,\n *   response: MapiResponse,\n *   next: () => void\n * ) => void\n * ```\n *\n * **The next page will not be fetched until you've invoked the\n * `next` callback**, indicating that you're ready for it.\n *\n * @param {Function} callback\n */\n\n\nMapiRequest.prototype.eachPage = function eachPage(callback) {\n  var self = this;\n\n  function handleResponse(response) {\n    function getNextPage() {\n      delete self._nextPageRequest;\n      var nextPageRequest = response.nextPage();\n\n      if (nextPageRequest) {\n        self._nextPageRequest = nextPageRequest;\n        getPage(nextPageRequest);\n      }\n    }\n\n    callback(null, response, getNextPage);\n  }\n\n  function handleError(error) {\n    callback(error, null, function () {});\n  }\n\n  function getPage(request) {\n    request.send().then(handleResponse, handleError);\n  }\n\n  getPage(this);\n};\n/**\n * Clone this request.\n *\n * Each request can only be sent *once*. So if you'd like to send the\n * same request again, clone it and send away.\n *\n * @returns {MapiRequest} - A new `MapiRequest` configured just like this one.\n */\n\n\nMapiRequest.prototype.clone = function clone() {\n  return this._extend();\n};\n/**\n * @ignore\n */\n\n\nMapiRequest.prototype._extend = function _extend(options) {\n  var extendedOptions = xtend(this._options, options);\n  return new MapiRequest(this.client, extendedOptions);\n};\n\nmodule.exports = MapiRequest;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/mapbox-sdk/lib/classes/mapi-request.js"],"names":["parseToken","require","xtend","EventEmitter","urlUtils","constants","requestId","MapiRequest","client","options","Error","path","method","defaultHeaders","body","headersWithDefaults","headers","Object","keys","reduce","memo","name","toLowerCase","id","_options","emitter","response","error","sent","aborted","origin","query","params","file","encoding","sendFileAs","prototype","url","accessToken","prependOrigin","appendQueryObject","routeParams","actualAccessToken","appendQueryParam","accessTokenOwnerId","user","ownerId","interpolateRouteParams","send","self","sendRequest","then","emit","EVENT_RESPONSE","EVENT_ERROR","abort","_nextPageRequest","abortRequest","eachPage","callback","handleResponse","getNextPage","nextPageRequest","nextPage","getPage","handleError","request","clone","_extend","extendedOptions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\nvar xtend = require('xtend');\nvar EventEmitter = require('eventemitter3');\nvar urlUtils = require('../helpers/url-utils');\nvar constants = require('../constants');\n\nvar requestId = 1;\n\n/**\n * A Mapbox API request.\n *\n * Note that creating a `MapiRequest` does *not* send the request automatically.\n * Use the request's `send` method to send it off and get a `Promise`.\n *\n * The `emitter` property is an `EventEmitter` that emits the following events:\n *\n * - `'response'` - Listeners will be called with a `MapiResponse`.\n * - `'error'` - Listeners will be called with a `MapiError`.\n * - `'downloadProgress'` - Listeners will be called with `ProgressEvents`.\n * - `'uploadProgress'` - Listeners will be called with `ProgressEvents`.\n *   Upload events are only available when the request includes a file.\n *\n * @class MapiRequest\n * @property {EventEmitter} emitter - An event emitter. See above.\n * @property {MapiClient} client - This request's `MapiClient`.\n * @property {MapiResponse|null} response - If this request has been sent and received\n *   a response, the response is available on this property.\n * @property {MapiError|Error|null} error - If this request has been sent and\n *   received an error in response, the error is available on this property.\n * @property {boolean} aborted - If the request has been aborted\n *   (via [`abort`](#abort)), this property will be `true`.\n * @property {boolean} sent - If the request has been sent, this property will\n *   be `true`. You cannot send the same request twice, so if you need to create\n *   a new request that is the equivalent of an existing one, use\n *   [`clone`](#clone).\n * @property {string} path - The request's path, including colon-prefixed route\n *   parameters.\n * @property {string} origin - The request's origin.\n * @property {string} method - The request's HTTP method.\n * @property {Object} query - A query object, which will be transformed into\n *   a URL query string.\n * @property {Object} params - A route parameters object, whose values will\n *   be interpolated the path.\n * @property {Object} headers - The request's headers.\n * @property {Object|string|null} body - Data to send with the request.\n *   If the request has a body, it will also be sent with the header\n *   `'Content-Type: application/json'`.\n * @property {Blob|ArrayBuffer|string|ReadStream} file - A file to\n *   send with the request. The browser client accepts Blobs and ArrayBuffers;\n *   the Node client accepts strings (filepaths) and ReadStreams.\n * @property {string} encoding - The encoding of the response.\n * @property {string} sendFileAs - The method to send the `file`. Options are\n *   `data` (x-www-form-urlencoded) or `form` (multipart/form-data).\n */\n\n/**\n * @ignore\n * @param {MapiClient} client\n * @param {Object} options\n * @param {string} options.method\n * @param {string} options.path\n * @param {Object} [options.query={}]\n * @param {Object} [options.params={}]\n * @param {string} [options.origin]\n * @param {Object} [options.headers]\n * @param {Object} [options.body=null]\n * @param {Blob|ArrayBuffer|string|ReadStream} [options.file=null]\n * @param {string} [options.encoding=utf8]\n */\nfunction MapiRequest(client, options) {\n  if (!client) {\n    throw new Error('MapiRequest requires a client');\n  }\n  if (!options || !options.path || !options.method) {\n    throw new Error(\n      'MapiRequest requires an options object with path and method properties'\n    );\n  }\n\n  var defaultHeaders = {};\n  if (options.body) {\n    defaultHeaders['content-type'] = 'application/json';\n  }\n\n  var headersWithDefaults = xtend(defaultHeaders, options.headers);\n\n  // Disallows duplicate header names of mixed case,\n  // e.g. Content-Type and content-type.\n  var headers = Object.keys(headersWithDefaults).reduce(function(memo, name) {\n    memo[name.toLowerCase()] = headersWithDefaults[name];\n    return memo;\n  }, {});\n\n  this.id = requestId++;\n  this._options = options;\n\n  this.emitter = new EventEmitter();\n  this.client = client;\n  this.response = null;\n  this.error = null;\n  this.sent = false;\n  this.aborted = false;\n  this.path = options.path;\n  this.method = options.method;\n  this.origin = options.origin || client.origin;\n  this.query = options.query || {};\n  this.params = options.params || {};\n  this.body = options.body || null;\n  this.file = options.file || null;\n  this.encoding = options.encoding || 'utf8';\n  this.sendFileAs = options.sendFileAs || null;\n  this.headers = headers;\n}\n\n/**\n * Get the URL of the request.\n *\n * @param {string} [accessToken] - By default, the access token of the request's\n *   client is used.\n * @return {string}\n */\nMapiRequest.prototype.url = function url(accessToken) {\n  var url = urlUtils.prependOrigin(this.path, this.origin);\n  url = urlUtils.appendQueryObject(url, this.query);\n  var routeParams = this.params;\n  var actualAccessToken =\n    accessToken == null ? this.client.accessToken : accessToken;\n  if (actualAccessToken) {\n    url = urlUtils.appendQueryParam(url, 'access_token', actualAccessToken);\n    var accessTokenOwnerId = parseToken(actualAccessToken).user;\n    routeParams = xtend({ ownerId: accessTokenOwnerId }, routeParams);\n  }\n  url = urlUtils.interpolateRouteParams(url, routeParams);\n  return url;\n};\n\n/**\n * Send the request. Returns a Promise that resolves with a `MapiResponse`.\n * You probably want to use `response.body`.\n *\n * `send` only retrieves the first page of paginated results. You can get\n * the next page by using the `MapiResponse`'s [`nextPage`](#nextpage)\n * function, or iterate through all pages using [`eachPage`](#eachpage)\n * instead of `send`.\n *\n * @returns {Promise<MapiResponse>}\n */\nMapiRequest.prototype.send = function send() {\n  var self = this;\n\n  if (self.sent) {\n    throw new Error(\n      'This request has already been sent. Check the response and error properties. Create a new request with clone().'\n    );\n  }\n  self.sent = true;\n\n  return self.client.sendRequest(self).then(\n    function(response) {\n      self.response = response;\n      self.emitter.emit(constants.EVENT_RESPONSE, response);\n      return response;\n    },\n    function(error) {\n      self.error = error;\n      self.emitter.emit(constants.EVENT_ERROR, error);\n      throw error;\n    }\n  );\n};\n\n/**\n * Abort the request.\n *\n * Any pending `Promise` returned by [`send`](#send) will be rejected with\n * an error with `type: 'RequestAbortedError'`. If you've created a request\n * that might be aborted, you need to catch and handle such errors.\n *\n * This method will also abort any requests created while fetching subsequent\n * pages via [`eachPage`](#eachpage).\n *\n * If the request has not been sent or has already been aborted, nothing\n * will happen.\n */\nMapiRequest.prototype.abort = function abort() {\n  if (this._nextPageRequest) {\n    this._nextPageRequest.abort();\n    delete this._nextPageRequest;\n  }\n\n  if (this.response || this.error || this.aborted) return;\n\n  this.aborted = true;\n  this.client.abortRequest(this);\n};\n\n/**\n * Invoke a callback for each page of a paginated API response.\n *\n * The callback should have the following signature:\n *\n * ```js\n * (\n *   error: MapiError,\n *   response: MapiResponse,\n *   next: () => void\n * ) => void\n * ```\n *\n * **The next page will not be fetched until you've invoked the\n * `next` callback**, indicating that you're ready for it.\n *\n * @param {Function} callback\n */\nMapiRequest.prototype.eachPage = function eachPage(callback) {\n  var self = this;\n\n  function handleResponse(response) {\n    function getNextPage() {\n      delete self._nextPageRequest;\n      var nextPageRequest = response.nextPage();\n      if (nextPageRequest) {\n        self._nextPageRequest = nextPageRequest;\n        getPage(nextPageRequest);\n      }\n    }\n    callback(null, response, getNextPage);\n  }\n\n  function handleError(error) {\n    callback(error, null, function() {});\n  }\n\n  function getPage(request) {\n    request.send().then(handleResponse, handleError);\n  }\n  getPage(this);\n};\n\n/**\n * Clone this request.\n *\n * Each request can only be sent *once*. So if you'd like to send the\n * same request again, clone it and send away.\n *\n * @returns {MapiRequest} - A new `MapiRequest` configured just like this one.\n */\nMapiRequest.prototype.clone = function clone() {\n  return this._extend();\n};\n\n/**\n * @ignore\n */\nMapiRequest.prototype._extend = function _extend(options) {\n  var extendedOptions = xtend(this._options, options);\n  return new MapiRequest(this.client, extendedOptions);\n};\n\nmodule.exports = MapiRequest;\n"]},"metadata":{},"sourceType":"script"}