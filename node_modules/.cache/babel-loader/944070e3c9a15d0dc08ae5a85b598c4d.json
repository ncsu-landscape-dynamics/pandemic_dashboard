{"ast":null,"code":"var lowerCase = require('lower-case');\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp');\n\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp');\n\nvar TRAILING_DIGIT_REGEXP = require('./vendor/trailing-digit-regexp');\n/**\n * Sentence case a string.\n *\n * @param  {String} str\n * @param  {String} locale\n * @param  {String} replacement\n * @return {String}\n */\n\n\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return '';\n  }\n\n  replacement = replacement || ' ';\n\n  function replace(match, index, string) {\n    if (index === 0 || index === string.length - match.length) {\n      return '';\n    }\n\n    return replacement;\n  }\n\n  str = String(str) // Support camel case (\"camelCase\" -> \"camel Case\").\n  .replace(CAMEL_CASE_REGEXP, '$1 $2') // Support digit groups (\"test2012\" -> \"test 2012\").\n  .replace(TRAILING_DIGIT_REGEXP, '$1 $2') // Remove all non-word characters and replace with a single space.\n  .replace(NON_WORD_REGEXP, replace); // Lower case the entire string.\n\n  return lowerCase(str, locale);\n};","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/sentence-case/sentence-case.js"],"names":["lowerCase","require","NON_WORD_REGEXP","CAMEL_CASE_REGEXP","TRAILING_DIGIT_REGEXP","module","exports","str","locale","replacement","replace","match","index","string","length","String"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIC,eAAe,GAAGD,OAAO,CAAC,0BAAD,CAA7B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAA/B;;AACA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,gCAAD,CAAnC;AAEA;;;;;;;;;;AAQAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,WAAvB,EAAoC;AACnD,MAAIF,GAAG,IAAI,IAAX,EAAiB;AACf,WAAO,EAAP;AACD;;AAEDE,EAAAA,WAAW,GAAGA,WAAW,IAAI,GAA7B;;AAEA,WAASC,OAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AACtC,QAAID,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAMC,MAAM,CAACC,MAAP,GAAgBH,KAAK,CAACG,MAApD,EAA6D;AAC3D,aAAO,EAAP;AACD;;AAED,WAAOL,WAAP;AACD;;AAEDF,EAAAA,GAAG,GAAGQ,MAAM,CAACR,GAAD,CAAN,CACJ;AADI,GAEHG,OAFG,CAEKP,iBAFL,EAEwB,OAFxB,EAGJ;AAHI,GAIHO,OAJG,CAIKN,qBAJL,EAI4B,OAJ5B,EAKJ;AALI,GAMHM,OANG,CAMKR,eANL,EAMsBQ,OANtB,CAAN,CAfmD,CAuBnD;;AACA,SAAOV,SAAS,CAACO,GAAD,EAAMC,MAAN,CAAhB;AACD,CAzBD","sourcesContent":["var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar TRAILING_DIGIT_REGEXP = require('./vendor/trailing-digit-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {String} str\n * @param  {String} locale\n * @param  {String} replacement\n * @return {String}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = replacement || ' '\n\n  function replace (match, index, string) {\n    if (index === 0 || index === (string.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support digit groups (\"test2012\" -> \"test 2012\").\n    .replace(TRAILING_DIGIT_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n"]},"metadata":{},"sourceType":"script"}