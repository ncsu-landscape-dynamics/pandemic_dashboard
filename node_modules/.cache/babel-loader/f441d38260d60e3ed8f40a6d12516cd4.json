{"ast":null,"code":"/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n/** Detect free variable `exports`. */\n\nvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;\n/** Detect free variable `module`. */\n\nvar freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n/** Detect free variable `self`. */\n\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n/** Detect free variable `window`. */\n\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n/** Detect `this` as the global object. */\n\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\n\nvar root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();\n/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\n\nfunction checkGlobal(value) {\n  return value && value.Object === Object ? value : null;\n}\n\nmodule.exports = root;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/lodash._root/index.js"],"names":["objectTypes","freeExports","exports","nodeType","undefined","freeModule","module","freeGlobal","checkGlobal","global","freeSelf","self","freeWindow","window","thisGlobal","root","Function","value","Object"],"mappings":"AAAA;;;;;;;;;AASA;AACA,IAAIA,WAAW,GAAG;AAChB,cAAY,IADI;AAEhB,YAAU;AAFM,CAAlB;AAKA;;AACA,IAAIC,WAAW,GAAID,WAAW,CAAC,OAAOE,OAAR,CAAX,IAA+BA,OAA/B,IAA0C,CAACA,OAAO,CAACC,QAApD,GACdD,OADc,GAEdE,SAFJ;AAIA;;AACA,IAAIC,UAAU,GAAIL,WAAW,CAAC,OAAOM,MAAR,CAAX,IAA8BA,MAA9B,IAAwC,CAACA,MAAM,CAACH,QAAjD,GACbG,MADa,GAEbF,SAFJ;AAIA;;AACA,IAAIG,UAAU,GAAGC,WAAW,CAACP,WAAW,IAAII,UAAf,IAA6B,OAAOI,MAAP,IAAiB,QAA9C,IAA0DA,MAA3D,CAA5B;AAEA;;AACA,IAAIC,QAAQ,GAAGF,WAAW,CAACR,WAAW,CAAC,OAAOW,IAAR,CAAX,IAA4BA,IAA7B,CAA1B;AAEA;;AACA,IAAIC,UAAU,GAAGJ,WAAW,CAACR,WAAW,CAAC,OAAOa,MAAR,CAAX,IAA8BA,MAA/B,CAA5B;AAEA;;AACA,IAAIC,UAAU,GAAGN,WAAW,CAACR,WAAW,CAAC,OAAO,IAAR,CAAX,IAA4B,IAA7B,CAA5B;AAEA;;;;;;;AAMA,IAAIe,IAAI,GAAGR,UAAU,IACjBK,UAAU,MAAME,UAAU,IAAIA,UAAU,CAACD,MAA/B,CAAX,IAAsDD,UAD9C,IAEPF,QAFO,IAEKI,UAFL,IAEmBE,QAAQ,CAAC,aAAD,CAAR,EAF9B;AAIA;;;;;;;;AAOA,SAASR,WAAT,CAAqBS,KAArB,EAA4B;AAC1B,SAAQA,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiBA,MAA3B,GAAqCD,KAArC,GAA6C,IAApD;AACD;;AAEDX,MAAM,CAACJ,OAAP,GAAiBa,IAAjB","sourcesContent":["/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n  ? exports\n  : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n  ? module\n  : undefined;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n/** Detect free variable `self`. */\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n/** Detect free variable `window`. */\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n/** Detect `this` as the global object. */\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\nvar root = freeGlobal ||\n  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n    freeSelf || thisGlobal || Function('return this')();\n\n/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\nfunction checkGlobal(value) {\n  return (value && value.Object === Object) ? value : null;\n}\n\nmodule.exports = root;\n"]},"metadata":{},"sourceType":"script"}