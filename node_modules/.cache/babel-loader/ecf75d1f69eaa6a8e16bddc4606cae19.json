{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures, isWebGL2 } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log, _mergeShaders as mergeShaders, project32 } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nvar RESOLUTION = 2;\nvar SIZE_2K = 2048;\nvar ZOOM_DEBOUNCE = 500;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nvar DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nvar HeatmapLayer = function (_AggregationLayer) {\n  _inherits(HeatmapLayer, _AggregationLayer);\n\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeatmapLayer).apply(this, arguments));\n  }\n\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"initializeState\", this).call(this, DIMENSIONS);\n\n      this.setState({\n        supported: true\n      });\n\n      this._setupTextureParams();\n\n      this._setupAttributes();\n\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n\n      var props = opts.props,\n          oldProps = opts.oldProps;\n\n      var changeFlags = this._getChangeFlags(opts);\n\n      if (changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds();\n      }\n\n      if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n        this._updateWeightmap();\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n\n      if (changeFlags.viewportChanged) {\n        this._updateTextureRenderingBounds();\n      }\n\n      if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n        var viewport = this.context.viewport;\n        var weightsScale = this.state.weightsScale;\n        var domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n        var colorDomain = props.colorDomain ? props.colorDomain.map(function (x) {\n          return x * domainScale;\n        }) : DEFAULT_COLOR_DOMAIN;\n\n        if (colorDomain[1] > 0 && weightsScale < 1) {\n          var max = Math.min(colorDomain[1], 1);\n          colorDomain[0] *= max / colorDomain[1];\n          colorDomain[1] = max;\n        }\n\n        this.setState({\n          colorDomain: colorDomain\n        });\n      }\n\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          weightsTexture = _this$state.weightsTexture,\n          triPositionBuffer = _this$state.triPositionBuffer,\n          triTexCoordBuffer = _this$state.triTexCoordBuffer,\n          maxWeightsTexture = _this$state.maxWeightsTexture,\n          colorTexture = _this$state.colorTexture,\n          colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n          updateTriggers = _this$props.updateTriggers,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold;\n      var TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n      return new TriangleLayerClass(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          weightsTransform = _this$state2.weightsTransform,\n          weightsTexture = _this$state2.weightsTexture,\n          maxWeightTransform = _this$state2.maxWeightTransform,\n          maxWeightsTexture = _this$state2.maxWeightsTexture,\n          triPositionBuffer = _this$state2.triPositionBuffer,\n          triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n          colorTexture = _this$state2.colorTexture,\n          updateTimer = _this$state2.updateTimer;\n      weightsTransform && weightsTransform[\"delete\"]();\n      weightsTexture && weightsTexture[\"delete\"]();\n      maxWeightTransform && maxWeightTransform[\"delete\"]();\n      maxWeightsTexture && maxWeightsTexture[\"delete\"]();\n      triPositionBuffer && triPositionBuffer[\"delete\"]();\n      triTexCoordBuffer && triTexCoordBuffer[\"delete\"]();\n      colorTexture && colorTexture[\"delete\"]();\n      updateTimer && clearTimeout(updateTimer);\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var changeFlags = {};\n      var dimensions = this.state.dimensions;\n      changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n\n      return changeFlags;\n    }\n  }, {\n    key: \"_createTextures\",\n    value: function _createTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n          textureSize = _this$state3.textureSize,\n          format = _this$state3.format,\n          type = _this$state3.type;\n      this.setState({\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      });\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n      this.setState({\n        positionAttributeName: 'positions'\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var textureSize = Math.min(SIZE_2K, getParameters(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n\n      var _getTextureParams = getTextureParams({\n        gl: gl,\n        floatTargetSupport: floatTargetSupport\n      }),\n          format = _getTextureParams.format,\n          type = _getTextureParams.type;\n\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"_createWeightsTransform\",\n    value: function _createWeightsTransform() {\n      var shaderOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gl = this.context.gl;\n      var weightsTransform = this.state.weightsTransform;\n      var weightsTexture = this.state.weightsTexture;\n\n      if (weightsTransform) {\n        weightsTransform[\"delete\"]();\n      }\n\n      var shaders = mergeShaders({\n        vs: weights_vs,\n        _fs: weights_fs,\n        modules: [project32]\n      }, shaderOptions);\n      weightsTransform = new Transform(gl, _objectSpread({\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      }, shaders));\n      this.setState({\n        weightsTransform: weightsTransform\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n\n      this._createTextures();\n\n      var _this$state4 = this.state,\n          textureSize = _this$state4.textureSize,\n          weightsTexture = _this$state4.weightsTexture,\n          maxWeightsTexture = _this$state4.maxWeightsTexture;\n\n      this._createWeightsTransform();\n\n      var maxWeightTransform = new Transform(gl, {\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture',\n        vs: vs_max,\n        elementCount: textureSize * textureSize\n      });\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaderOptions) {\n      this._createWeightsTransform(shaderOptions);\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])];\n      var visibleWorldBounds = getBounds(viewportCorners);\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state5 = this.state,\n          triPositionBuffer = _this$state5.triPositionBuffer,\n          triTexCoordBuffer = _this$state5.triTexCoordBuffer,\n          normalizedCommonBounds = _this$state5.normalizedCommonBounds,\n          viewportCorners = _this$state5.viewportCorners;\n      var viewport = this.context.viewport;\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, true);\n\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1,\n          format: isWebGL2(this.context.gl) ? 34836 : 6408,\n          type: 5126\n        }, TEXTURE_OPTIONS));\n      }\n\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n\n      var radiusPixels = this.props.radiusPixels;\n      var _this$state6 = this.state,\n          weightsTransform = _this$state6.weightsTransform,\n          worldBounds = _this$state6.worldBounds,\n          textureSize = _this$state6.textureSize,\n          weightsTexture = _this$state6.weightsTexture,\n          weightsScale = _this$state6.weightsScale;\n\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true\n      });\n\n      var uniforms = {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      };\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n\n      this._updateMaxWeightValue();\n\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n      this.setState({\n        lastUpdate: Date.now()\n      });\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n      if (fromTimer) {\n        updateTimer = null;\n      }\n\n      if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n        this._updateBounds(true);\n\n        this._updateWeightmap();\n\n        this._updateTextureRenderingBounds();\n      } else if (!updateTimer) {\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE - timeSinceLastUpdate);\n      }\n\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n          useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin;\n\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n          minLong = _worldBounds[0],\n          minLat = _worldBounds[1],\n          maxLong = _worldBounds[2],\n          maxLat = _worldBounds[3];\n\n      var viewport = this.context.viewport;\n      var textureSize = this.state.textureSize;\n      var size = textureSize * RESOLUTION / viewport.scale;\n      var bottomLeftCommon;\n      var topRightCommon;\n\n      if (useLayerCoordinateSystem) {\n        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n      } else {\n        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n      }\n\n      var commonBounds = bottomLeftCommon.slice(0, 2).concat(topRightCommon.slice(0, 2));\n      commonBounds = scaleToAspectRatio(commonBounds, size, size);\n      return commonBounds;\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n          xMin = _commonBounds[0],\n          yMin = _commonBounds[1],\n          xMax = _commonBounds[2],\n          yMax = _commonBounds[3];\n\n      var viewport = this.context.viewport;\n      var bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n      var topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n  }]);\n\n  return HeatmapLayer;\n}(AggregationLayer);\n\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["_mergeShaders","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","defaultProps","getPosition","type","value","x","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","REQUIRED_FEATURES","FEATURES","DIMENSIONS","data","props","HeatmapLayer","AggregationLayer","gl","hasFeatures","supported","log","changeFlags","opts","oldProps","viewport","weightsScale","domainScale","Math","zoom","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","id","attributes","positions","texCoords","vertexCount","maxTexture","texture","weightsTransform","maxWeightTransform","updateTimer","clearTimeout","stats","dimensions","compareAll","dimension","textureSize","format","width","height","attributeManager","size","accessor","weights","positionAttributeName","getParameters","floatTargetSupport","getTextureParams","shaderOptions","shaders","mergeShaders","vs","_fs","modules","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","byteLength","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","visibleWorldBounds","getBounds","newState","boundsChanged","boundsContain","scaledCommonBounds","worldBounds","COORDINATE_SYSTEM","normalizedCommonBounds","packVertices","textureBounds","getTextureCoordinates","colors","colorRangeToFlatArray","length","isWebGL2","commonBounds","useLayerCoordinateSystem","uniforms","textureWidth","clearRenderTarget","moduleSettings","lastUpdate","Date","fromTimer","timeSinceLastUpdate","setTimeout","minLong","minLat","maxLong","maxLat","bottomLeftCommon","topRightCommon","scaleToAspectRatio","xMin","yMin","xMax","yMax","bottomLeftWorld","topRightWorld"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAA,SAAA,EAAA,aAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,qBAAA,EAAA,gBAAA,QAAA,uBAAA;AAQA,SAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,QAAA,eAAA;AASA,SAAA,gBAAA,EAAA,iBAAA,EAAA,GAAA,EAIEA,aAAa,IAJf,YAAA,EAAA,SAAA,QAAA,eAAA;AAOA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,gBAAA,MAAA,sBAAA;AACA,SAAA,iBAAA,EAAA,qBAAA,QAAA,sBAAA;AACA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,MAAA,MAAA,eAAA;AAEA,IAAMC,UAAU,GAAhB,CAAA;AACA,IAAMC,OAAO,GAAb,IAAA;AACA,IAAMC,aAAa,GAAnB,GAAA;AACA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EADe,KAAA;AAEtBC,EAAAA,UAAU,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAFY,WAEZ,CAFY;AAQtBC,EAAAA,UAAU,EAAA;AARY,CAAxB;AAUA,IAAMC,oBAAoB,GAAG,CAAA,CAAA,EAA7B,CAA6B,CAA7B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAAL,QAAA;AAAA;AAA3B,GADM;AAEnBC,EAAAA,SAAS,EAAE;AAACH,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAFQ;AAGnBG,EAAAA,SAAS,EAAE;AAACJ,IAAAA,IAAI,EAAL,QAAA;AAAiBK,IAAAA,GAAG,EAApB,CAAA;AAAyBJ,IAAAA,KAAK,EAAE;AAAhC,GAHQ;AAInBK,EAAAA,YAAY,EAAE;AAACN,IAAAA,IAAI,EAAL,QAAA;AAAiBK,IAAAA,GAAG,EAApB,CAAA;AAAyBE,IAAAA,GAAG,EAA5B,GAAA;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAJK;AAKnBO,EAAAA,UAAU,EALS,iBAAA;AAMnBC,EAAAA,SAAS,EAAE;AAACT,IAAAA,IAAI,EAAL,QAAA;AAAiBK,IAAAA,GAAG,EAApB,CAAA;AAAyBE,IAAAA,GAAG,EAA5B,CAAA;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GANQ;AAOnBS,EAAAA,WAAW,EAAE;AAACV,IAAAA,IAAI,EAAL,OAAA;AAAgBC,IAAAA,KAAK,EAArB,IAAA;AAA6BU,IAAAA,QAAQ,EAAE;AAAvC;AAPM,CAArB;AAUA,IAAMC,iBAAiB,GAAG,CACxBC,QAAQ,CADgB,qBAAA,EAExBA,QAAQ,CAFV,aAA0B,CAA1B;AAMA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,CAAA,cAAA;AADH;AADW,CAAnB;;IAMqBC,Y;;;;;;;;;;;sCACD;AAAA,UACTE,EADS,GACH,KADG,OACH,CADG,EAAA;;AAEhB,UAAI,CAACC,WAAW,CAAA,EAAA,EAAhB,iBAAgB,CAAhB,EAAyC;AACvC,aAAA,QAAA,CAAc;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACAC,QAAAA,GAAG,CAAHA,KAAAA,CAAAA,iBAAAA,MAAAA,CAA2B,KAA3BA,EAAAA,EAAAA,mCAAAA,CAAAA;AACA;AACD;;AACD,MAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,iBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,UAAA;;AACA,WAAA,QAAA,CAAc;AAACD,QAAAA,SAAS,EAAE;AAAZ,OAAd;;AACA,WAAA,mBAAA;;AACA,WAAA,gBAAA;;AACA,WAAA,eAAA;AACD;;;4CAEgC;AAAA,UAAdE,WAAc,GAAA,IAAA,CAAdA,WAAc;AAE/B,aAAOA,WAAW,CAAlB,gBAAA;AACD;;;gCAGWC,I,EAAM;AAChB,UAAI,CAAC,KAAA,KAAA,CAAL,SAAA,EAA2B;AACzB;AACD;;AACD,MAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA;;AAJgB,UAKTR,KALS,GAKUQ,IALV,CAAA,KAAA;AAAA,UAKFC,QALE,GAKUD,IALV,CAAA,QAAA;;AAMhB,UAAMD,WAAW,GAAG,KAAA,eAAA,CAApB,IAAoB,CAApB;;AAEA,UAAIA,WAAW,CAAf,eAAA,EAAiC;AAC/BA,QAAAA,WAAW,CAAXA,aAAAA,GAA4B,KAA5BA,aAA4B,EAA5BA;AACD;;AAED,UAAIA,WAAW,CAAXA,WAAAA,IAA2BA,WAAW,CAA1C,aAAA,EAA0D;AACxD,aAAA,gBAAA;AADF,OAAA,MAEO,IAAIA,WAAW,CAAf,mBAAA,EAAqC;AAC1C,aAAA,yBAAA;AACD;;AAED,UAAIP,KAAK,CAALA,UAAAA,KAAqBS,QAAQ,CAAjC,UAAA,EAA8C;AAC5C,aAAA,mBAAA,CAAA,IAAA;AACD;;AAED,UAAIF,WAAW,CAAf,eAAA,EAAiC;AAC/B,aAAA,6BAAA;AACD;;AAED,UAAIE,QAAQ,CAARA,WAAAA,KAAyBT,KAAK,CAA9BS,WAAAA,IAA8CF,WAAW,CAA7D,eAAA,EAA+E;AAAA,YACtEG,QADsE,GAC1D,KAD0D,OAC1D,CAD0D,QAAA;AAAA,YAEtEC,YAFsE,GAEtD,KAFsD,KAEtD,CAFsD,YAAA;AAG7E,YAAMC,WAAW,GAAG,CAACF,QAAQ,GAAG,OAAOA,QAAQ,CAAlB,KAAA,GAAT,CAAA,IAApB,YAAA;AACA,YAAMhB,WAAW,GAAG,KAAK,CAAL,WAAA,GAChB,KAAK,CAAL,WAAA,CAAA,GAAA,CAAsB,UAAA,CAAA,EAAC;AAAA,iBAAIR,CAAC,GAAL,WAAA;AADP,SAChB,CADgB,GAApB,oBAAA;;AAGA,YAAIQ,WAAW,CAAXA,CAAW,CAAXA,GAAAA,CAAAA,IAAsBiB,YAAY,GAAtC,CAAA,EAA4C;AAG1C,cAAMpB,GAAG,GAAGsB,IAAI,CAAJA,GAAAA,CAASnB,WAAW,CAApBmB,CAAoB,CAApBA,EAAZ,CAAYA,CAAZ;AACAnB,UAAAA,WAAW,CAAXA,CAAW,CAAXA,IAAkBH,GAAG,GAAGG,WAAW,CAAnCA,CAAmC,CAAnCA;AACAA,UAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAAA,GAAAA;AACD;;AACD,aAAA,QAAA,CAAc;AAACA,UAAAA,WAAW,EAAXA;AAAD,SAAd;AACD;;AAED,WAAA,QAAA,CAAc;AAACoB,QAAAA,IAAI,EAAEN,IAAI,CAAJA,OAAAA,CAAAA,QAAAA,CAAsBM;AAA7B,OAAd;AACD;;;mCAGc;AACb,UAAI,CAAC,KAAA,KAAA,CAAL,SAAA,EAA2B;AACzB,eAAA,EAAA;AACD;;AAHY,UAAA,WAAA,GAWT,KAXS,KAAA;AAAA,UAKXC,cALW,GAAA,WAAA,CAAA,cAAA;AAAA,UAMXC,iBANW,GAAA,WAAA,CAAA,iBAAA;AAAA,UAOXC,iBAPW,GAAA,WAAA,CAAA,iBAAA;AAAA,UAQXC,iBARW,GAAA,WAAA,CAAA,iBAAA;AAAA,UASXC,YATW,GAAA,WAAA,CAAA,YAAA;AAAA,UAUXzB,WAVW,GAAA,WAAA,CAAA,WAAA;AAAA,UAAA,WAAA,GAYkC,KAZlC,KAAA;AAAA,UAYN0B,cAZM,GAAA,WAAA,CAAA,cAAA;AAAA,UAYUhC,SAZV,GAAA,WAAA,CAAA,SAAA;AAAA,UAYqBK,SAZrB,GAAA,WAAA,CAAA,SAAA;AAcb,UAAM4B,kBAAkB,GAAG,KAAA,gBAAA,CAAA,UAAA,EAA3B,aAA2B,CAA3B;AAEA,aAAO,IAAA,kBAAA,CACL,KAAA,gBAAA,CAAsB;AACpBC,QAAAA,EAAE,EADkB,gBAAA;AAEpBF,QAAAA,cAAc,EAAdA;AAFoB,OAAtB,CADK,EAKL;AACErB,QAAAA,IAAI,EAAE;AACJwB,UAAAA,UAAU,EAAE;AACVC,YAAAA,SAAS,EADC,iBAAA;AAEVC,YAAAA,SAAS,EAAER;AAFD;AADR,SADR;AAOES,QAAAA,WAAW,EAPb,CAAA;AAQEC,QAAAA,UAAU,EARZ,iBAAA;AASER,QAAAA,YAAY,EATd,YAAA;AAUES,QAAAA,OAAO,EAVT,cAAA;AAWExC,QAAAA,SAAS,EAXX,SAAA;AAYEK,QAAAA,SAAS,EAZX,SAAA;AAaEC,QAAAA,WAAW,EAAXA;AAbF,OALK,CAAP;AAqBD;;;oCAEe;AACd,MAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,eAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA;;AADc,UAAA,YAAA,GAWV,KAXU,KAAA;AAAA,UAGZmC,gBAHY,GAAA,YAAA,CAAA,gBAAA;AAAA,UAIZd,cAJY,GAAA,YAAA,CAAA,cAAA;AAAA,UAKZe,kBALY,GAAA,YAAA,CAAA,kBAAA;AAAA,UAMZZ,iBANY,GAAA,YAAA,CAAA,iBAAA;AAAA,UAOZF,iBAPY,GAAA,YAAA,CAAA,iBAAA;AAAA,UAQZC,iBARY,GAAA,YAAA,CAAA,iBAAA;AAAA,UASZE,YATY,GAAA,YAAA,CAAA,YAAA;AAAA,UAUZY,WAVY,GAAA,YAAA,CAAA,WAAA;AAadF,MAAAA,gBAAgB,IAAIA,gBAAgB,CAApCA,QAAoC,CAAhBA,EAApBA;AACAd,MAAAA,cAAc,IAAIA,cAAc,CAAhCA,QAAgC,CAAdA,EAAlBA;AACAe,MAAAA,kBAAkB,IAAIA,kBAAkB,CAAxCA,QAAwC,CAAlBA,EAAtBA;AACAZ,MAAAA,iBAAiB,IAAIA,iBAAiB,CAAtCA,QAAsC,CAAjBA,EAArBA;AACAF,MAAAA,iBAAiB,IAAIA,iBAAiB,CAAtCA,QAAsC,CAAjBA,EAArBA;AACAC,MAAAA,iBAAiB,IAAIA,iBAAiB,CAAtCA,QAAsC,CAAjBA,EAArBA;AACAE,MAAAA,YAAY,IAAIA,YAAY,CAA5BA,QAA4B,CAAZA,EAAhBA;AACAY,MAAAA,WAAW,IAAIC,YAAY,CAA3BD,WAA2B,CAA3BA;AAED;;;2CAKsB;AACrB,aAAO,IAAA,gBAAA,CAAqB,KAAA,OAAA,CAArB,EAAA,EAAsC;AAC3CT,QAAAA,EAAE,EAAE,KAAA,KAAA,CADuC,EAAA;AAE3CW,QAAAA,KAAK,EAAE,KAAA,OAAA,CAAaA;AAFuB,OAAtC,CAAP;AAID;;;oCAEezB,I,EAAM;AACpB,UAAMD,WAAW,GAAjB,EAAA;AADoB,UAEb2B,UAFa,GAEC,KAFD,KAEC,CAFD,UAAA;AAGpB3B,MAAAA,WAAW,CAAXA,WAAAA,GACE,KAAA,kBAAA,MACA,KAAA,kBAAA,CAAA,IAAA,EAA8B;AAC5B4B,QAAAA,UAAU,EADkB,IAAA;AAE5BC,QAAAA,SAAS,EAAEF,UAAU,CAACnC;AAFM,OAA9B,CAFFQ;AAMAA,MAAAA,WAAW,CAAXA,eAAAA,GAA8BC,IAAI,CAAJA,WAAAA,CAA9BD,eAAAA;AAToB,UAWbO,IAXa,GAWL,KAXK,KAWL,CAXK,IAAA;;AAYpB,UAAI,CAACN,IAAI,CAAJA,OAAAA,CAAD,QAAA,IAA0BA,IAAI,CAAJA,OAAAA,CAAAA,QAAAA,CAAAA,IAAAA,KAA9B,IAAA,EAAmE;AACjED,QAAAA,WAAW,CAAXA,mBAAAA,GAAAA,IAAAA;AACD;;AAED,aAAA,WAAA;AACD;;;sCAEiB;AAAA,UACTJ,EADS,GACH,KADG,OACH,CADG,EAAA;AAAA,UAAA,YAAA,GAEoB,KAFpB,KAAA;AAAA,UAETkC,WAFS,GAAA,YAAA,CAAA,WAAA;AAAA,UAEIC,MAFJ,GAAA,YAAA,CAAA,MAAA;AAAA,UAEYtD,IAFZ,GAAA,YAAA,CAAA,IAAA;AAIhB,WAAA,QAAA,CAAc;AACZ+B,QAAAA,cAAc,EAAE,IAAA,SAAA,CAAA,EAAA,EAAA,aAAA,CAAA;AACdwB,UAAAA,KAAK,EADS,WAAA;AAEdC,UAAAA,MAAM,EAFQ,WAAA;AAGdF,UAAAA,MAAM,EAHQ,MAAA;AAIdtD,UAAAA,IAAI,EAAJA;AAJc,SAAA,EADJ,eACI,CAAA,CADJ;AAQZkC,QAAAA,iBAAiB,EAAE,IAAA,SAAA,CAAA,EAAA,EAAA,aAAA,CAAA;AAAmBoB,UAAAA,MAAM,EAAzB,MAAA;AAA2BtD,UAAAA,IAAI,EAAJA;AAA3B,SAAA,EAAA,eAAA,CAAA;AARP,OAAd;AAUD;;;uCAEkB;AACjB,UAAMyD,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACAA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBjB,QAAAA,SAAS,EAAE;AAACkB,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,QAAQ,EAAE;AAApB,SADQ;AAEnBC,QAAAA,OAAO,EAAE;AAACF,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,QAAQ,EAAE;AAApB;AAFU,OAArBF;AAIA,WAAA,QAAA,CAAc;AAACI,QAAAA,qBAAqB,EAAE;AAAxB,OAAd;AACD;;;0CAEqB;AAAA,UACb1C,EADa,GACP,KADO,OACP,CADO,EAAA;AAEpB,UAAMkC,WAAW,GAAGxB,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,EAAkBiC,aAAa,CAAA,EAAA,EAAnD,IAAmD,CAA/BjC,CAApB;AACA,UAAMkC,kBAAkB,GAAG3C,WAAW,CAAA,EAAA,EAAKP,QAAQ,CAAnD,wBAAsC,CAAtC;;AAHoB,UAAA,iBAAA,GAIGmD,gBAAgB,CAAC;AAAC7C,QAAAA,EAAE,EAAH,EAAA;AAAK4C,QAAAA,kBAAkB,EAAlBA;AAAL,OAAD,CAJnB;AAAA,UAIbT,MAJa,GAAA,iBAAA,CAAA,MAAA;AAAA,UAILtD,IAJK,GAAA,iBAAA,CAAA,IAAA;;AAKpB,UAAM2B,YAAY,GAAGoC,kBAAkB,GAAA,CAAA,GAAO,IAA9C,GAAA;AACA,WAAA,QAAA,CAAc;AAACV,QAAAA,WAAW,EAAZ,WAAA;AAAcC,QAAAA,MAAM,EAApB,MAAA;AAAsBtD,QAAAA,IAAI,EAA1B,IAAA;AAA4B2B,QAAAA,YAAY,EAAZA;AAA5B,OAAd;;AACA,UAAI,CAAJ,kBAAA,EAAyB;AACvBL,QAAAA,GAAG,CAAHA,IAAAA,CAAAA,iBAAAA,MAAAA,CAEI,KAFJA,EAAAA,EAAAA,iFAAAA,CAAAA;AAKD;AACF;;;8CAE2C;AAAA,UAApB2C,aAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UACnC9C,EADmC,GAC7B,KAD6B,OAC7B,CAD6B,EAAA;AAAA,UAErC0B,gBAFqC,GAEjB,KAFiB,KAEjB,CAFiB,gBAAA;AAAA,UAGnCd,cAHmC,GAGjB,KAHiB,KAGjB,CAHiB,cAAA;;AAI1C,UAAA,gBAAA,EAAsB;AACpBc,QAAAA,gBAAgB,CAAhBA,QAAgB,CAAhBA;AACD;;AACD,UAAMqB,OAAO,GAAGC,YAAY,CAC1B;AACEC,QAAAA,EAAE,EADJ,UAAA;AAEEC,QAAAA,GAAG,EAFL,UAAA;AAGEC,QAAAA,OAAO,EAAE,CAAA,SAAA;AAHX,OAD0B,EAA5B,aAA4B,CAA5B;AASAzB,MAAAA,gBAAgB,GAAG,IAAA,SAAA,CAAA,EAAA,EAAA,aAAA,CAAA;AACjBP,QAAAA,EAAE,EAAA,GAAA,MAAA,CAAK,KAAL,EAAA,EADe,oBACf,CADe;AAEjBiC,QAAAA,YAAY,EAFK,CAAA;AAGjBC,QAAAA,cAAc,EAHG,cAAA;AAIjBC,QAAAA,qBAAqB,EAAE;AAJN,OAAA,EAAnB5B,OAAmB,CAAA,CAAnBA;AAOA,WAAA,QAAA,CAAc;AAACA,QAAAA,gBAAgB,EAAhBA;AAAD,OAAd;AACD;;;sCAEiB;AAAA,UACT1B,EADS,GACH,KADG,OACH,CADG,EAAA;;AAEhB,WAAA,eAAA;;AAFgB,UAAA,YAAA,GAGyC,KAHzC,KAAA;AAAA,UAGTkC,WAHS,GAAA,YAAA,CAAA,WAAA;AAAA,UAGItB,cAHJ,GAAA,YAAA,CAAA,cAAA;AAAA,UAGoBG,iBAHpB,GAAA,YAAA,CAAA,iBAAA;;AAIhB,WAAA,uBAAA;;AACA,UAAMY,kBAAkB,GAAG,IAAA,SAAA,CAAA,EAAA,EAAkB;AAC3CR,QAAAA,EAAE,EAAA,GAAA,MAAA,CAAK,KAAL,EAAA,EADyC,wBACzC,CADyC;AAE3CoC,QAAAA,eAAe,EAAE;AACfC,UAAAA,SAAS,EAAE5C;AADI,SAF0B;AAK3CyC,QAAAA,cAAc,EAL6B,iBAAA;AAM3CC,QAAAA,qBAAqB,EANsB,YAAA;AAO3CL,QAAAA,EAAE,EAPyC,MAAA;AAQ3CG,QAAAA,YAAY,EAAElB,WAAW,GAAGA;AARe,OAAlB,CAA3B;AAWA,WAAA,QAAA,CAAc;AACZtB,QAAAA,cAAc,EADF,cAAA;AAEZG,QAAAA,iBAAiB,EAFL,iBAAA;AAGZY,QAAAA,kBAAkB,EAHN,kBAAA;AAIZhB,QAAAA,IAAI,EAJQ,IAAA;AAKZE,QAAAA,iBAAiB,EAAE,IAAA,MAAA,CAAA,EAAA,EAAe;AAChC4C,UAAAA,UAAU,EADsB,EAAA;AAEhCjB,UAAAA,QAAQ,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFsB,SAAf,CALP;AASZzB,QAAAA,iBAAiB,EAAE,IAAA,MAAA,CAAA,EAAA,EAAe;AAChC2C,UAAAA,UAAU,EADsB,EAAA;AAEhCjB,UAAAA,QAAQ,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFsB,SAAf;AATP,OAAd;AAcD;;;kCAGaO,a,EAAe;AAE3B,WAAA,uBAAA,CAAA,aAAA;AACD;;;4CAEuB;AAAA,UACfnB,kBADe,GACO,KADP,KACO,CADP,kBAAA;AAEtBA,MAAAA,kBAAkB,CAAlBA,GAAAA,CAAuB;AACrBnD,QAAAA,UAAU,EAAE;AACVkF,UAAAA,KAAK,EADK,IAAA;AAEVC,UAAAA,SAAS,EAFC,KAAA;AAGVC,UAAAA,SAAS,EAAE,CAAA,CAAA,EAHD,CAGC,CAHD;AAIVC,UAAAA,aAAa,EAAA;AAJH;AADS,OAAvBlC;AAQD;;;oCAGkC;AAAA,UAArBmC,WAAqB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;AAAA,UAC1BvD,QAD0B,GACd,KADc,OACd,CADc,QAAA;AAKjC,UAAMwD,eAAe,GAAG,CACtBxD,QAAQ,CAARA,SAAAA,CAAmB,CAAA,CAAA,EADG,CACH,CAAnBA,CADsB,EAEtBA,QAAQ,CAARA,SAAAA,CAAmB,CAACA,QAAQ,CAAT,KAAA,EAFG,CAEH,CAAnBA,CAFsB,EAGtBA,QAAQ,CAARA,SAAAA,CAAmB,CAACA,QAAQ,CAAT,KAAA,EAAiBA,QAAQ,CAHtB,MAGH,CAAnBA,CAHsB,EAItBA,QAAQ,CAARA,SAAAA,CAAmB,CAAA,CAAA,EAAIA,QAAQ,CAJjC,MAIqB,CAAnBA,CAJsB,CAAxB;AAQA,UAAMyD,kBAAkB,GAAGC,SAAS,CAApC,eAAoC,CAApC;AAEA,UAAMC,QAAQ,GAAG;AAACF,QAAAA,kBAAkB,EAAnB,kBAAA;AAAqBD,QAAAA,eAAe,EAAfA;AAArB,OAAjB;AACA,UAAII,aAAa,GAAjB,KAAA;;AAEA,UACEL,WAAW,IACX,CAAC,KAAA,KAAA,CADDA,WAAAA,IAEA,CAACM,aAAa,CAAC,KAAA,KAAA,CAAD,WAAA,EAHhB,kBAGgB,CAHhB,EAIE;AAGA,YAAMC,kBAAkB,GAAG,KAAA,oBAAA,CAA3B,kBAA2B,CAA3B;;AAGA,YAAMC,WAAW,GAAG,KAAA,oBAAA,CAApB,kBAAoB,CAApB;;AAGA,YAAI,KAAA,KAAA,CAAA,gBAAA,KAAgCC,iBAAiB,CAArD,MAAA,EAA8D;AAC5DD,UAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiB5D,IAAI,CAAJA,GAAAA,CAAS4D,WAAW,CAApB5D,CAAoB,CAApBA,EAAyB,CAA1C4D,SAAiB5D,CAAjB4D;AACAA,UAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiB5D,IAAI,CAAJA,GAAAA,CAAS4D,WAAW,CAApB5D,CAAoB,CAApBA,EAAjB4D,SAAiB5D,CAAjB4D;AACAA,UAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiB5D,IAAI,CAAJA,GAAAA,CAAS4D,WAAW,CAApB5D,CAAoB,CAApBA,EAAyB,CAA1C4D,GAAiB5D,CAAjB4D;AACAA,UAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiB5D,IAAI,CAAJA,GAAAA,CAAS4D,WAAW,CAApB5D,CAAoB,CAApBA,EAAjB4D,GAAiB5D,CAAjB4D;AACD;;AAGD,YAAME,sBAAsB,GAAG,KAAA,oBAAA,CAA/B,WAA+B,CAA/B;;AAEAN,QAAAA,QAAQ,CAARA,WAAAA,GAAAA,WAAAA;AACAA,QAAAA,QAAQ,CAARA,sBAAAA,GAAAA,sBAAAA;AAEAC,QAAAA,aAAa,GAAbA,IAAAA;AACD;;AACD,WAAA,QAAA,CAAA,QAAA;AACA,aAAA,aAAA;AACD;;;oDAE+B;AAAA,UAAA,YAAA,GAO1B,KAP0B,KAAA;AAAA,UAG5BtD,iBAH4B,GAAA,YAAA,CAAA,iBAAA;AAAA,UAI5BC,iBAJ4B,GAAA,YAAA,CAAA,iBAAA;AAAA,UAK5B0D,sBAL4B,GAAA,YAAA,CAAA,sBAAA;AAAA,UAM5BT,eAN4B,GAAA,YAAA,CAAA,eAAA;AAAA,UASvBxD,QATuB,GASX,KATW,OASX,CATW,QAAA;AAW9BM,MAAAA,iBAAiB,CAAjBA,OAAAA,CAA0B4D,YAAY,CAAA,eAAA,EAAtC5D,CAAsC,CAAtCA;AAEA,UAAM6D,aAAa,GAAG,eAAe,CAAf,GAAA,CAAoB,UAAA,CAAA,EAAC;AAAA,eACzCC,qBAAqB,CAACpE,QAAQ,CAARA,eAAAA,CAAD,CAACA,CAAD,EADoB,sBACpB,CADoB;AAA3C,OAAsB,CAAtB;AAGAO,MAAAA,iBAAiB,CAAjBA,OAAAA,CAA0B2D,YAAY,CAAA,aAAA,EAAtC3D,CAAsC,CAAtCA;AACD;;;wCAEmBT,I,EAAM;AAAA,UACjBhB,UADiB,GACHgB,IAAI,CADD,KACHA,CADG,UAAA;AAAA,UAEnBW,YAFmB,GAEH,KAFG,KAEH,CAFG,YAAA;AAGxB,UAAM4D,MAAM,GAAGC,qBAAqB,CAAA,UAAA,EAApC,IAAoC,CAApC;;AAEA,UAAA,YAAA,EAAkB;AAChB7D,QAAAA,YAAY,CAAZA,YAAAA,CAA0B;AACxBpB,UAAAA,IAAI,EADoB,MAAA;AAExBwC,UAAAA,KAAK,EAAE/C,UAAU,CAACyF;AAFM,SAA1B9D;AADF,OAAA,MAKO;AACLA,QAAAA,YAAY,GAAG,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAAA,aAAA,CAAA;AACbpB,UAAAA,IAAI,EADS,MAAA;AAEbwC,UAAAA,KAAK,EAAE/C,UAAU,CAFJ,MAAA;AAGbgD,UAAAA,MAAM,EAHO,CAAA;AAIbF,UAAAA,MAAM,EAAE4C,QAAQ,CAAC,KAAA,OAAA,CAATA,EAAQ,CAARA,GAAAA,KAAAA,GAJK,IAAA;AAKblG,UAAAA,IAAI,EAAA;AALS,SAAA,EAAfmC,eAAe,CAAA,CAAfA;AAQD;;AACD,WAAA,QAAA,CAAc;AAACA,QAAAA,YAAY,EAAZA;AAAD,OAAd;AACD;;;uCAEkB;AAAA,UAAA,qBAAA;;AAAA,UACV7B,YADU,GACM,KADN,KACM,CADN,YAAA;AAAA,UAAA,YAAA,GAEkE,KAFlE,KAAA;AAAA,UAEVuC,gBAFU,GAAA,YAAA,CAAA,gBAAA;AAAA,UAEQ4C,WAFR,GAAA,YAAA,CAAA,WAAA;AAAA,UAEqBpC,WAFrB,GAAA,YAAA,CAAA,WAAA;AAAA,UAEkCtB,cAFlC,GAAA,YAAA,CAAA,cAAA;AAAA,UAEkDJ,YAFlD,GAAA,YAAA,CAAA,YAAA;;AAKjB,UAAMwE,YAAY,GAAG,KAAA,oBAAA,CAAA,WAAA,EAAuC;AAC1DC,QAAAA,wBAAwB,EAAE;AADgC,OAAvC,CAArB;;AAIA,UAAMC,QAAQ,GAAG;AACf/F,QAAAA,YAAY,EADG,YAAA;AAEf6F,QAAAA,YAAY,EAFG,YAAA;AAGfG,QAAAA,YAAY,EAHG,WAAA;AAIf3E,QAAAA,YAAY,EAAZA;AAJe,OAAjB;AAQAkB,MAAAA,gBAAgB,CAAhBA,MAAAA,CAAwB;AACtB0B,QAAAA,YAAY,EAAE,KAAA,eAAA;AADQ,OAAxB1B;AAGAA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBwD,QAAAA,QAAQ,EADW,QAAA;AAEnB1G,QAAAA,UAAU,EAAE;AACVkF,UAAAA,KAAK,EADK,IAAA;AAEVC,UAAAA,SAAS,EAFC,KAAA;AAGVC,UAAAA,SAAS,EAAE,CAAA,CAAA,EAHD,CAGC,CAHD;AAIVC,UAAAA,aAAa,EAAA;AAJH,SAFO;AAQnBuB,QAAAA,iBAAiB,EARE,IAAA;AASnBhE,QAAAA,UAAU,EAAE,KATO,aASP,EATO;AAUnBiE,QAAAA,cAAc,EAAE,KAAA,iBAAA;AAVG,OAArB3D;;AAYA,WAAA,qBAAA;;AAGAd,MAAAA,cAAc,CAAdA,aAAAA,EAAAA,qBAAAA,GAAAA,EAAAA,EAAAA,eAAAA,CAAAA,qBAAAA,EAAAA,KAAAA,EAAAA,IAAAA,CAAAA,EAAAA,eAAAA,CAAAA,qBAAAA,EAAAA,KAAAA,EAAAA,IAAAA,CAAAA,EAAAA,qBAAAA;AAKA,WAAA,QAAA,CAAc;AAAC0E,QAAAA,UAAU,EAAEC,IAAI,CAAJA,GAAAA;AAAb,OAAd;AACD;;;gDAE4C;AAAA,UAAnBC,SAAmB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;AAAA,UACtC5D,WADsC,GACvB,KADuB,KACvB,CADuB,WAAA;AAE3C,UAAM6D,mBAAmB,GAAGF,IAAI,CAAJA,GAAAA,KAAa,KAAA,KAAA,CAAzC,UAAA;;AAEA,UAAA,SAAA,EAAe;AACb3D,QAAAA,WAAW,GAAXA,IAAAA;AACD;;AAED,UAAI6D,mBAAmB,IAAvB,aAAA,EAA0C;AAExC,aAAA,aAAA,CAAA,IAAA;;AACA,aAAA,gBAAA;;AACA,aAAA,6BAAA;AAJF,OAAA,MAKO,IAAI,CAAJ,WAAA,EAAkB;AACvB7D,QAAAA,WAAW,GAAG8D,UAAU,CACtB,KAAA,yBAAA,CAAA,IAAA,CAAA,IAAA,EADsB,IACtB,CADsB,EAEtBrH,aAAa,GAFfuD,mBAAwB,CAAxBA;AAID;;AAED,WAAA,QAAA,CAAc;AAACA,QAAAA,WAAW,EAAXA;AAAD,OAAd;AACD;;;yCAKoB0C,W,EAAwB;AAAA,UAAXjE,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UAAA,qBAAA,GACAA,IADA,CAAA,wBAAA;AAAA,UACpC4E,wBADoC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,qBAAA;;AAAA,UAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,UAEpCU,OAFoC,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,UAE3BC,MAF2B,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,UAEnBC,OAFmB,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,UAEVC,MAFU,GAAA,YAAA,CAAA,CAAA,CAAA;;AAAA,UAGpCvF,QAHoC,GAGxB,KAHwB,OAGxB,CAHwB,QAAA;AAAA,UAIpC2B,WAJoC,GAIrB,KAJqB,KAIrB,CAJqB,WAAA;AAM3C,UAAMK,IAAI,GAAIL,WAAW,GAAZ,UAACA,GAA4B3B,QAAQ,CAAlD,KAAA;AAEA,UAAA,gBAAA;AACA,UAAA,cAAA;;AAGA,UAAA,wBAAA,EAA8B;AAC5BwF,QAAAA,gBAAgB,GAAG,KAAA,eAAA,CAAqB,CAAA,OAAA,EAAA,MAAA,EAAxCA,CAAwC,CAArB,CAAnBA;AACAC,QAAAA,cAAc,GAAG,KAAA,eAAA,CAAqB,CAAA,OAAA,EAAA,MAAA,EAAtCA,CAAsC,CAArB,CAAjBA;AAFF,OAAA,MAGO;AACLD,QAAAA,gBAAgB,GAAGxF,QAAQ,CAARA,eAAAA,CAAyB,CAAA,OAAA,EAAA,MAAA,EAA5CwF,CAA4C,CAAzBxF,CAAnBwF;AACAC,QAAAA,cAAc,GAAGzF,QAAQ,CAARA,eAAAA,CAAyB,CAAA,OAAA,EAAA,MAAA,EAA1CyF,CAA0C,CAAzBzF,CAAjByF;AACD;;AAED,UAAIhB,YAAY,GAAGe,gBAAgB,CAAhBA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,MAAAA,CAAoCC,cAAc,CAAdA,KAAAA,CAAAA,CAAAA,EAAvD,CAAuDA,CAApCD,CAAnB;AACAf,MAAAA,YAAY,GAAGiB,kBAAkB,CAAA,YAAA,EAAA,IAAA,EAAjCjB,IAAiC,CAAjCA;AACA,aAAA,YAAA;AACD;;;yCAIoBA,Y,EAAc;AAAA,UAAA,aAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,UAC1BkB,IAD0B,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,UACpBC,IADoB,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,UACdC,IADc,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,UACRC,IADQ,GAAA,aAAA,CAAA,CAAA,CAAA;;AAAA,UAE1B9F,QAF0B,GAEd,KAFc,OAEd,CAFc,QAAA;AAGjC,UAAM+F,eAAe,GAAG/F,QAAQ,CAARA,iBAAAA,CAA2B,CAAA,IAAA,EAAnD,IAAmD,CAA3BA,CAAxB;AACA,UAAMgG,aAAa,GAAGhG,QAAQ,CAARA,iBAAAA,CAA2B,CAAA,IAAA,EAAjD,IAAiD,CAA3BA,CAAtB;AAEA,aAAO+F,eAAe,CAAfA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,MAAAA,CAAmCC,aAAa,CAAbA,KAAAA,CAAAA,CAAAA,EAA1C,CAA0CA,CAAnCD,CAAP;AACD;;;;EAzduCvG,gB;;SAArBD,Y;AA4drBA,YAAY,CAAZA,SAAAA,GAAAA,cAAAA;AACAA,YAAY,CAAZA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  FEATURES,\n  hasFeatures,\n  isWebGL2\n} from '@luma.gl/core';\nimport {\n  AttributeManager,\n  COORDINATE_SYSTEM,\n  log,\n  _mergeShaders as mergeShaders,\n  project32\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    updateTimer && clearTimeout(updateTimer);\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    if (weightsTransform) {\n      weightsTransform.delete();\n    }\n    const shaders = mergeShaders(\n      {\n        vs: weights_vs,\n        _fs: weights_fs,\n        modules: [project32]\n      },\n      shaderOptions\n    );\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n    this._createWeightsTransform();\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        format: isWebGL2(this.context.gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = bottomLeftCommon.slice(0, 2).concat(topRightCommon.slice(0, 2));\n    commonBounds = scaleToAspectRatio(commonBounds, size, size);\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}