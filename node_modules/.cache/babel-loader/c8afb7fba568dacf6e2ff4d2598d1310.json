{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport parseQuantizedMesh from './lib/parse-quantized-mesh';\nvar VERSION = typeof \"2.2.7\" !== 'undefined' ? \"2.2.7\" : 'latest';\nexport var QuantizedMeshWorkerLoader = {\n  id: 'quantized-mesh',\n  name: 'Quantized Mesh',\n  version: VERSION,\n  extensions: ['terrain'],\n  mimeTypes: ['application/vnd.quantized-mesh'],\n  options: {\n    'quantized-mesh': {\n      workerUrl: \"https://unpkg.com/@loaders.gl/terrain@\".concat(VERSION, \"/dist/quantized-mesh-loader.worker.js\"),\n      bounds: [0, 0, 1, 1]\n    }\n  }\n};\nexport var QuantizedMeshLoader = _objectSpread(_objectSpread({}, QuantizedMeshWorkerLoader), {}, {\n  parseSync: parseQuantizedMesh,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseQuantizedMesh(arrayBuffer, options));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }()\n});","map":{"version":3,"sources":["../../src/quantized-mesh-loader.js"],"names":["VERSION","QuantizedMeshWorkerLoader","id","name","version","extensions","mimeTypes","options","workerUrl","bounds","QuantizedMeshLoader","parseSync","parse","parseQuantizedMesh"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,kBAAA,MAAA,4BAAA;AAKA,IAAMA,OAAO,GAAG,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAhB,QAAA;AAGA,OAAO,IAAMC,yBAAyB,GAAG;AACvCC,EAAAA,EAAE,EADqC,gBAAA;AAEvCC,EAAAA,IAAI,EAFmC,gBAAA;AAGvCC,EAAAA,OAAO,EAHgC,OAAA;AAIvCC,EAAAA,UAAU,EAAE,CAJ2B,SAI3B,CAJ2B;AAKvCC,EAAAA,SAAS,EAAE,CAL4B,gCAK5B,CAL4B;AAMvCC,EAAAA,OAAO,EAAE;AACP,sBAAkB;AAChBC,MAAAA,SAAS,EAAA,yCAAA,MAAA,CAAA,OAAA,EADO,uCACP,CADO;AAEhBC,MAAAA,MAAM,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAFQ;AADX;AAN8B,CAAlC;AAeP,OAAO,IAAMC,mBAAmB,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,yBAAA,CAAA,EAAA,EAAA,EAAA;AAE9BC,EAAAA,SAAS,EAFqB,kBAAA;AAG9BC,EAAAA,KAAK,EAAA,YAAA;AAAA,QAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAA,WAAA,EAAA,OAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,qBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAgCC,kBAAkB,CAAA,WAAA,EAAlD,OAAkD,CAAlD,CAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AAAF,KAAA,CAAA,CAAA;;AAAA,aAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,aAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,KAAA;AAAA,GAAA;AAHyB,CAAA,CAAzB","sourcesContent":["import parseQuantizedMesh from './lib/parse-quantized-mesh';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {LoaderObject} */\nexport const QuantizedMeshWorkerLoader = {\n  id: 'quantized-mesh',\n  name: 'Quantized Mesh',\n  version: VERSION,\n  extensions: ['terrain'],\n  mimeTypes: ['application/vnd.quantized-mesh'],\n  options: {\n    'quantized-mesh': {\n      workerUrl: `https://unpkg.com/@loaders.gl/terrain@${VERSION}/dist/quantized-mesh-loader.worker.js`,\n      bounds: [0, 0, 1, 1]\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const QuantizedMeshLoader = {\n  ...QuantizedMeshWorkerLoader,\n  parseSync: parseQuantizedMesh,\n  parse: async (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options)\n};\n"]},"metadata":{},"sourceType":"module"}