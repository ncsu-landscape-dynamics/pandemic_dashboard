{"ast":null,"code":"'use strict';\n\nvar base64 = require('base-64');\n\nvar tokenCache = {};\n\nfunction parseToken(token) {\n  if (tokenCache[token]) {\n    return tokenCache[token];\n  }\n\n  var parts = token.split('.');\n  var usage = parts[0];\n  var rawPayload = parts[1];\n\n  if (!rawPayload) {\n    throw new Error('Invalid token');\n  }\n\n  var parsedPayload = parsePaylod(rawPayload);\n  var result = {\n    usage: usage,\n    user: parsedPayload.u\n  };\n  if (has(parsedPayload, 'a')) result.authorization = parsedPayload.a;\n  if (has(parsedPayload, 'exp')) result.expires = parsedPayload.exp * 1000;\n  if (has(parsedPayload, 'iat')) result.created = parsedPayload.iat * 1000;\n  if (has(parsedPayload, 'scopes')) result.scopes = parsedPayload.scopes;\n  if (has(parsedPayload, 'client')) result.client = parsedPayload.client;\n  if (has(parsedPayload, 'll')) result.lastLogin = parsedPayload.ll;\n  if (has(parsedPayload, 'iu')) result.impersonator = parsedPayload.iu;\n  tokenCache[token] = result;\n  return result;\n}\n\nfunction parsePaylod(rawPayload) {\n  try {\n    return JSON.parse(base64.decode(rawPayload));\n  } catch (parseError) {\n    throw new Error('Invalid token');\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nmodule.exports = parseToken;","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/@mapbox/parse-mapbox-token/index.js"],"names":["base64","require","tokenCache","parseToken","token","parts","split","usage","rawPayload","Error","parsedPayload","parsePaylod","result","user","u","has","authorization","a","expires","exp","created","iat","scopes","client","lastLogin","ll","impersonator","iu","JSON","parse","decode","parseError","obj","key","Object","prototype","hasOwnProperty","call","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,UAAU,GAAG,EAAjB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIF,UAAU,CAACE,KAAD,CAAd,EAAuB;AACrB,WAAOF,UAAU,CAACE,KAAD,CAAjB;AACD;;AAED,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAZ;AACA,MAAIC,KAAK,GAAGF,KAAK,CAAC,CAAD,CAAjB;AACA,MAAIG,UAAU,GAAGH,KAAK,CAAC,CAAD,CAAtB;;AACA,MAAI,CAACG,UAAL,EAAiB;AACf,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,MAAIC,aAAa,GAAGC,WAAW,CAACH,UAAD,CAA/B;AAEA,MAAII,MAAM,GAAG;AACXL,IAAAA,KAAK,EAAEA,KADI;AAEXM,IAAAA,IAAI,EAAEH,aAAa,CAACI;AAFT,GAAb;AAIA,MAAIC,GAAG,CAACL,aAAD,EAAgB,GAAhB,CAAP,EAA6BE,MAAM,CAACI,aAAP,GAAuBN,aAAa,CAACO,CAArC;AAC7B,MAAIF,GAAG,CAACL,aAAD,EAAgB,KAAhB,CAAP,EAA+BE,MAAM,CAACM,OAAP,GAAiBR,aAAa,CAACS,GAAd,GAAoB,IAArC;AAC/B,MAAIJ,GAAG,CAACL,aAAD,EAAgB,KAAhB,CAAP,EAA+BE,MAAM,CAACQ,OAAP,GAAiBV,aAAa,CAACW,GAAd,GAAoB,IAArC;AAC/B,MAAIN,GAAG,CAACL,aAAD,EAAgB,QAAhB,CAAP,EAAkCE,MAAM,CAACU,MAAP,GAAgBZ,aAAa,CAACY,MAA9B;AAClC,MAAIP,GAAG,CAACL,aAAD,EAAgB,QAAhB,CAAP,EAAkCE,MAAM,CAACW,MAAP,GAAgBb,aAAa,CAACa,MAA9B;AAClC,MAAIR,GAAG,CAACL,aAAD,EAAgB,IAAhB,CAAP,EAA8BE,MAAM,CAACY,SAAP,GAAmBd,aAAa,CAACe,EAAjC;AAC9B,MAAIV,GAAG,CAACL,aAAD,EAAgB,IAAhB,CAAP,EAA8BE,MAAM,CAACc,YAAP,GAAsBhB,aAAa,CAACiB,EAApC;AAE9BzB,EAAAA,UAAU,CAACE,KAAD,CAAV,GAAoBQ,MAApB;AACA,SAAOA,MAAP;AACD;;AAED,SAASD,WAAT,CAAqBH,UAArB,EAAiC;AAC/B,MAAI;AACF,WAAOoB,IAAI,CAACC,KAAL,CAAW7B,MAAM,CAAC8B,MAAP,CAActB,UAAd,CAAX,CAAP;AACD,GAFD,CAEE,OAAOuB,UAAP,EAAmB;AACnB,UAAM,IAAItB,KAAJ,CAAU,eAAV,CAAN;AACD;AACF;;AAED,SAASM,GAAT,CAAaiB,GAAb,EAAkBC,GAAlB,EAAuB;AACrB,SAAOC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,GAA1C,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBpC,UAAjB","sourcesContent":["'use strict';\n\nvar base64 = require('base-64');\n\nvar tokenCache = {};\n\nfunction parseToken(token) {\n  if (tokenCache[token]) {\n    return tokenCache[token];\n  }\n\n  var parts = token.split('.');\n  var usage = parts[0];\n  var rawPayload = parts[1];\n  if (!rawPayload) {\n    throw new Error('Invalid token');\n  }\n\n  var parsedPayload = parsePaylod(rawPayload);\n\n  var result = {\n    usage: usage,\n    user: parsedPayload.u\n  };\n  if (has(parsedPayload, 'a')) result.authorization = parsedPayload.a;\n  if (has(parsedPayload, 'exp')) result.expires = parsedPayload.exp * 1000;\n  if (has(parsedPayload, 'iat')) result.created = parsedPayload.iat * 1000;\n  if (has(parsedPayload, 'scopes')) result.scopes = parsedPayload.scopes;\n  if (has(parsedPayload, 'client')) result.client = parsedPayload.client;\n  if (has(parsedPayload, 'll')) result.lastLogin = parsedPayload.ll;\n  if (has(parsedPayload, 'iu')) result.impersonator = parsedPayload.iu;\n\n  tokenCache[token] = result;\n  return result;\n}\n\nfunction parsePaylod(rawPayload) {\n  try {\n    return JSON.parse(base64.decode(rawPayload));\n  } catch (parseError) {\n    throw new Error('Invalid token');\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nmodule.exports = parseToken;\n"]},"metadata":{},"sourceType":"script"}