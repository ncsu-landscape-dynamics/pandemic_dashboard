{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\n\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nvar MAX_32_BIT_FLOAT = 3.402823466e38;\n\nvar defaultGetPoints = function defaultGetPoints(bin) {\n  return bin.points;\n};\n\nvar defaultGetIndex = function defaultGetIndex(bin) {\n  return bin.index;\n};\n\nvar ascending = function ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n};\n\nvar defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nvar BinSorter = function () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps;\n\n    _classCallCheck(this, BinSorter);\n\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n\n    this._updateMinMaxValues();\n\n    this.binMap = this.getBinMap();\n  }\n\n  _createClass(BinSorter, [{\n    key: \"getAggregatedBins\",\n    value: function getAggregatedBins(bins, props) {\n      var _props$getValue = props.getValue,\n          getValue = _props$getValue === void 0 ? defaultGetValue : _props$getValue,\n          _props$getPoints = props.getPoints,\n          getPoints = _props$getPoints === void 0 ? defaultGetPoints : _props$getPoints,\n          _props$getIndex = props.getIndex,\n          getIndex = _props$getIndex === void 0 ? defaultGetIndex : _props$getIndex,\n          filterData = props.filterData;\n      var hasFilter = typeof filterData === 'function';\n      var binCount = bins.length;\n      var aggregatedBins = [];\n      var index = 0;\n\n      for (var binIndex = 0; binIndex < binCount; binIndex++) {\n        var bin = bins[binIndex];\n        var points = getPoints(bin);\n        var i = getIndex(bin);\n        var filteredPoints = hasFilter ? points.filter(filterData) : points;\n        bin.filteredPoints = hasFilter ? filteredPoints : null;\n        var value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n        if (value !== null && value !== undefined) {\n          aggregatedBins[index] = {\n            i: Number.isFinite(i) ? i : binIndex,\n            value: value,\n            counts: filteredPoints.length\n          };\n          index++;\n        }\n      }\n\n      return aggregatedBins;\n    }\n  }, {\n    key: \"_percentileToIndex\",\n    value: function _percentileToIndex(percentileRange) {\n      var len = this.sortedBins.length;\n\n      if (len < 2) {\n        return [0, 0];\n      }\n\n      var _percentileRange$map = percentileRange.map(function (n) {\n        return clamp(n, 0, 100);\n      }),\n          _percentileRange$map2 = _slicedToArray(_percentileRange$map, 2),\n          lower = _percentileRange$map2[0],\n          upper = _percentileRange$map2[1];\n\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [lowerIdx, upperIdx];\n    }\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      var binMap = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.aggregatedBins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var bin = _step.value;\n          binMap[bin.i] = bin;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return binMap;\n    }\n  }, {\n    key: \"_updateMinMaxValues\",\n    value: function _updateMinMaxValues() {\n      var maxCount = 0;\n      var maxValue = 0;\n      var minValue = MAX_32_BIT_FLOAT;\n      var totalCount = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.aggregatedBins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var x = _step2.value;\n          maxCount = maxCount > x.counts ? maxCount : x.counts;\n          maxValue = maxValue > x.value ? maxValue : x.value;\n          minValue = minValue < x.value ? minValue : x.value;\n          totalCount += x.counts;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.maxCount = maxCount;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.totalCount = totalCount;\n    }\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(percentileRange) {\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var lowerIdx = 0;\n      var upperIdx = this.sortedBins.length - 1;\n\n      if (Array.isArray(percentileRange)) {\n        var idxRange = this._percentileToIndex(percentileRange);\n\n        lowerIdx = idxRange[0];\n        upperIdx = idxRange[1];\n      }\n\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n  }, {\n    key: \"getValueDomainByScale\",\n    value: function getValueDomainByScale(scale) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [],\n          _ref2 = _slicedToArray(_ref, 2),\n          _ref2$ = _ref2[0],\n          lower = _ref2$ === void 0 ? 0 : _ref2$,\n          _ref2$2 = _ref2[1],\n          upper = _ref2$2 === void 0 ? 100 : _ref2$2;\n\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var indexEdge = this._percentileToIndex([lower, upper]);\n\n      return this._getScaleDomain(scale, indexEdge);\n    }\n  }, {\n    key: \"_getScaleDomain\",\n    value: function _getScaleDomain(scaleType, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          lowerIdx = _ref4[0],\n          upperIdx = _ref4[1];\n\n      var bins = this.sortedBins;\n\n      switch (scaleType) {\n        case 'quantize':\n        case 'linear':\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n\n        case 'quantile':\n          return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), function (d) {\n            return d.value;\n          });\n\n        case 'ordinal':\n          return getOrdinalDomain(bins, function (d) {\n            return d.value;\n          });\n\n        default:\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n      }\n    }\n  }]);\n\n  return BinSorter;\n}();\n\nexport { BinSorter as default };","map":{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","ascending","a","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","bins","props","hasFilter","binCount","aggregatedBins","index","binIndex","i","filteredPoints","value","Number","counts","length","percentileRange","len","lower","upper","clamp","lowerIdx","Math","upperIdx","binMap","maxCount","maxValue","minValue","totalCount","x","b","Array","idxRange","scale","indexEdge","scaleType","getQuantileDomain","d","getOrdinalDomain"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}