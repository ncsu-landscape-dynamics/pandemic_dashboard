{"ast":null,"code":"import { map } from \"d3-collection\";\nimport { dispatch } from \"d3-dispatch\";\nexport default function (url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      _mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest(),\n      _user = null,\n      _password = null,\n      _response,\n      _responseType,\n      _timeout = 0; // If IE does not support CORS, use XDomainRequest.\n\n\n  if (typeof XDomainRequest !== \"undefined\" && !(\"withCredentials\" in xhr) && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest();\n  \"onload\" in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {\n    xhr.readyState > 3 && respond(o);\n  };\n\n  function respond(o) {\n    var status = xhr.status,\n        result;\n\n    if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {\n      if (_response) {\n        try {\n          result = _response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function (e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function header(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);else headers.set(name, value + \"\");\n      return request;\n    },\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function mimeType(value) {\n      if (!arguments.length) return _mimeType;\n      _mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function responseType(value) {\n      if (!arguments.length) return _responseType;\n      _responseType = value;\n      return request;\n    },\n    timeout: function timeout(value) {\n      if (!arguments.length) return _timeout;\n      _timeout = +value;\n      return request;\n    },\n    user: function user(value) {\n      return arguments.length < 1 ? _user : (_user = value == null ? null : value + \"\", request);\n    },\n    password: function password(value) {\n      return arguments.length < 1 ? _password : (_password = value == null ? null : value + \"\", request);\n    },\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function response(value) {\n      _response = value;\n      return request;\n    },\n    // Alias for send(\"GET\", …).\n    get: function get(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n    // Alias for send(\"POST\", …).\n    post: function post(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n    // If callback is non-null, it will be used for error and load events.\n    send: function send(method, data, callback) {\n      xhr.open(method, url, true, _user, _password);\n      if (_mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", _mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function (value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n      if (_mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(_mimeType);\n      if (_responseType != null) xhr.responseType = _responseType;\n      if (_timeout > 0) xhr.timeout = _timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function (xhr) {\n        callback(null, xhr);\n      });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n    abort: function abort() {\n      xhr.abort();\n      return request;\n    },\n    on: function on() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function (error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\" ? xhr.response // null on error\n  : xhr.responseText; // \"\" on error\n}","map":{"version":3,"sources":["/Users/garrettmillar/pandemic_dashboard/node_modules/d3-request/src/request.js"],"names":["map","dispatch","url","callback","request","event","mimeType","headers","xhr","XMLHttpRequest","user","password","response","responseType","timeout","XDomainRequest","test","onload","onerror","ontimeout","respond","onreadystatechange","o","readyState","status","result","hasResponse","call","e","onprogress","header","name","value","toLowerCase","arguments","length","get","remove","set","data","send","post","method","open","has","setRequestHeader","each","overrideMimeType","fixCallback","on","abort","apply","Error","error","type","responseText"],"mappings":"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","sourcesContent":["import {map} from \"d3-collection\";\nimport {dispatch} from \"d3-dispatch\";\n\nexport default function(url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest,\n      user = null,\n      password = null,\n      response,\n      responseType,\n      timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\"\n      && !(\"withCredentials\" in xhr)\n      && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n  \"onload\" in xhr\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n  function respond(o) {\n    var status = xhr.status, result;\n    if (!status && hasResponse(xhr)\n        || status >= 200 && status < 300\n        || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function(e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);\n      else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n\n    timeout: function(value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n\n    user: function(value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n\n    password: function(value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function(value) {\n      response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function(method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function(error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\"\n      ? xhr.response // null on error\n      : xhr.responseText; // \"\" on error\n}\n"]},"metadata":{},"sourceType":"module"}