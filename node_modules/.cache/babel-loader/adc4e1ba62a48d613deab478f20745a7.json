{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { getMeshBoundingBox } from '@loaders.gl/loader-utils';\nimport decode, { DECODING_STEPS } from './decode-quantized-mesh';\n\nfunction getMeshAttributes(vertexData, header, bounds) {\n  var minHeight = header.minHeight,\n      maxHeight = header.maxHeight;\n\n  var _ref = bounds || [0, 0, 1, 1],\n      _ref2 = _slicedToArray(_ref, 4),\n      minX = _ref2[0],\n      minY = _ref2[1],\n      maxX = _ref2[2],\n      maxY = _ref2[3];\n\n  var xScale = maxX - minX;\n  var yScale = maxY - minY;\n  var zScale = maxHeight - minHeight;\n  var nCoords = vertexData.length / 3;\n  var positions = new Float32Array(nCoords * 3);\n  var texCoords = new Float32Array(nCoords * 2);\n\n  for (var i = 0; i < nCoords; i++) {\n    var x = vertexData[i] / 32767;\n    var y = vertexData[i + nCoords] / 32767;\n    var z = vertexData[i + nCoords * 2] / 32767;\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = y * yScale + minY;\n    positions[3 * i + 2] = z * zScale + minHeight;\n    texCoords[2 * i + 0] = x;\n    texCoords[2 * i + 1] = y;\n  }\n\n  return {\n    POSITION: {\n      value: positions,\n      size: 3\n    },\n    TEXCOORD_0: {\n      value: texCoords,\n      size: 2\n    }\n  };\n}\n\nfunction getTileMesh(arrayBuffer, options) {\n  if (!arrayBuffer) {\n    return null;\n  }\n\n  var bounds = options.bounds;\n\n  var _decode = decode(arrayBuffer, DECODING_STEPS.triangleIndices),\n      header = _decode.header,\n      vertexData = _decode.vertexData,\n      triangleIndices = _decode.triangleIndices;\n\n  var attributes = getMeshAttributes(vertexData, header, bounds);\n  return {\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: triangleIndices.length,\n      boundingBox: getMeshBoundingBox(attributes)\n    },\n    mode: 4,\n    indices: {\n      value: triangleIndices,\n      size: 1\n    },\n    attributes: attributes\n  };\n}\n\nexport default function loadQuantizedMesh(arrayBuffer, options) {\n  return getTileMesh(arrayBuffer, options['quantized-mesh']);\n}","map":{"version":3,"sources":["../../../src/lib/parse-quantized-mesh.js"],"names":["minHeight","maxHeight","header","minX","minY","maxX","maxY","bounds","xScale","yScale","zScale","nCoords","vertexData","positions","texCoords","i","x","y","z","POSITION","value","size","TEXCOORD_0","options","triangleIndices","decode","DECODING_STEPS","attributes","getMeshAttributes","loaderData","vertexCount","boundingBox","getMeshBoundingBox","mode","indices","getTileMesh"],"mappings":";AAAA,SAAA,kBAAA,QAAA,0BAAA;AACA,OAAA,MAAA,IAAA,cAAA,QAAA,yBAAA;;AAEA,SAAA,iBAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAuD;AAAA,MAC9CA,SAD8C,GACtBE,MADsB,CAAA,SAAA;AAAA,MACnCD,SADmC,GACtBC,MADsB,CAAA,SAAA;;AAAA,MAAA,IAAA,GAEpBK,MAAM,IAAI,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFU,CAEV,CAFU;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,MAE9CJ,IAF8C,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAExCC,IAFwC,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAElCC,IAFkC,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAE5BC,IAF4B,GAAA,KAAA,CAAA,CAAA,CAAA;;AAGrD,MAAME,MAAM,GAAGH,IAAI,GAAnB,IAAA;AACA,MAAMI,MAAM,GAAGH,IAAI,GAAnB,IAAA;AACA,MAAMI,MAAM,GAAGT,SAAS,GAAxB,SAAA;AAEA,MAAMU,OAAO,GAAGC,UAAU,CAAVA,MAAAA,GAAhB,CAAA;AAEA,MAAMC,SAAS,GAAG,IAAA,YAAA,CAAiBF,OAAO,GAA1C,CAAkB,CAAlB;AAGA,MAAMG,SAAS,GAAG,IAAA,YAAA,CAAiBH,OAAO,GAA1C,CAAkB,CAAlB;;AAGA,OAAK,IAAII,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,OAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,QAAMC,CAAC,GAAGJ,UAAU,CAAVA,CAAU,CAAVA,GAAV,KAAA;AACA,QAAMK,CAAC,GAAGL,UAAU,CAACG,CAAC,GAAZH,OAAU,CAAVA,GAAV,KAAA;AACA,QAAMM,CAAC,GAAGN,UAAU,CAACG,CAAC,GAAGJ,OAAO,GAAtBC,CAAU,CAAVA,GAAV,KAAA;AAEAC,IAAAA,SAAS,CAAC,IAAA,CAAA,GAAVA,CAAS,CAATA,GAAuBG,CAAC,GAADA,MAAAA,GAAvBH,IAAAA;AACAA,IAAAA,SAAS,CAAC,IAAA,CAAA,GAAVA,CAAS,CAATA,GAAuBI,CAAC,GAADA,MAAAA,GAAvBJ,IAAAA;AACAA,IAAAA,SAAS,CAAC,IAAA,CAAA,GAAVA,CAAS,CAATA,GAAuBK,CAAC,GAADA,MAAAA,GAAvBL,SAAAA;AAEAC,IAAAA,SAAS,CAAC,IAAA,CAAA,GAAVA,CAAS,CAATA,GAAAA,CAAAA;AACAA,IAAAA,SAAS,CAAC,IAAA,CAAA,GAAVA,CAAS,CAATA,GAAAA,CAAAA;AACD;;AAED,SAAO;AACLK,IAAAA,QAAQ,EAAE;AAACC,MAAAA,KAAK,EAAN,SAAA;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KADL;AAELC,IAAAA,UAAU,EAAE;AAACF,MAAAA,KAAK,EAAN,SAAA;AAAmBC,MAAAA,IAAI,EAAE;AAAzB;AAFP,GAAP;AAMD;;AAED,SAAA,WAAA,CAAA,WAAA,EAAA,OAAA,EAA2C;AACzC,MAAI,CAAJ,WAAA,EAAkB;AAChB,WAAA,IAAA;AACD;;AAHwC,MAIlCd,MAJkC,GAIxBgB,OAJwB,CAAA,MAAA;;AAAA,MAAA,OAAA,GAMKE,MAAM,CAAA,WAAA,EAAcC,cAAc,CANvC,eAMW,CANX;AAAA,MAMlCxB,MANkC,GAAA,OAAA,CAAA,MAAA;AAAA,MAM1BU,UAN0B,GAAA,OAAA,CAAA,UAAA;AAAA,MAMdY,eANc,GAAA,OAAA,CAAA,eAAA;;AAQzC,MAAMG,UAAU,GAAGC,iBAAiB,CAAA,UAAA,EAAA,MAAA,EAApC,MAAoC,CAApC;AAEA,SAAO;AAELC,IAAAA,UAAU,EAAE;AACV3B,MAAAA,MAAM,EAAE;AADE,KAFP;AAKLA,IAAAA,MAAM,EAAE;AACN4B,MAAAA,WAAW,EAAEN,eAAe,CADtB,MAAA;AAINO,MAAAA,WAAW,EAAEC,kBAAkB,CAAA,UAAA;AAJzB,KALH;AAWLC,IAAAA,IAAI,EAXC,CAAA;AAYLC,IAAAA,OAAO,EAAE;AAACd,MAAAA,KAAK,EAAN,eAAA;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAZJ;AAaLM,IAAAA,UAAU,EAAVA;AAbK,GAAP;AAeD;;AAED,eAAe,SAAA,iBAAA,CAAA,WAAA,EAAA,OAAA,EAAiD;AAC9D,SAAOQ,WAAW,CAAA,WAAA,EAAcZ,OAAO,CAAvC,gBAAuC,CAArB,CAAlB;AACD","sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/loader-utils';\nimport decode, {DECODING_STEPS} from './decode-quantized-mesh';\n\nfunction getMeshAttributes(vertexData, header, bounds) {\n  const {minHeight, maxHeight} = header;\n  const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];\n  const xScale = maxX - minX;\n  const yScale = maxY - minY;\n  const zScale = maxHeight - minHeight;\n\n  const nCoords = vertexData.length / 3;\n  // vec3. x, y defined by bounds, z in meters\n  const positions = new Float32Array(nCoords * 3);\n\n  // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.\n  const texCoords = new Float32Array(nCoords * 2);\n\n  // Data is not interleaved; all u, then all v, then all heights\n  for (let i = 0; i < nCoords; i++) {\n    const x = vertexData[i] / 32767;\n    const y = vertexData[i + nCoords] / 32767;\n    const z = vertexData[i + nCoords * 2] / 32767;\n\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = y * yScale + minY;\n    positions[3 * i + 2] = z * zScale + minHeight;\n\n    texCoords[2 * i + 0] = x;\n    texCoords[2 * i + 1] = y;\n  }\n\n  return {\n    POSITION: {value: positions, size: 3},\n    TEXCOORD_0: {value: texCoords, size: 2}\n    // TODO: Parse normals if they exist in the file\n    // NORMAL: {}, - optional, but creates the high poly look with lighting\n  };\n}\n\nfunction getTileMesh(arrayBuffer, options) {\n  if (!arrayBuffer) {\n    return null;\n  }\n  const {bounds} = options;\n  // Don't parse edge indices or format extensions\n  const {header, vertexData, triangleIndices} = decode(arrayBuffer, DECODING_STEPS.triangleIndices);\n  // TODO: use skirt information from file\n  const attributes = getMeshAttributes(vertexData, header, bounds);\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: triangleIndices.length,\n      // TODO: Find bounding box from header, instead of doing extra pass over\n      // vertices.\n      boundingBox: getMeshBoundingBox(attributes)\n    },\n    mode: 4, // TRIANGLES\n    indices: {value: triangleIndices, size: 1},\n    attributes\n  };\n}\n\nexport default function loadQuantizedMesh(arrayBuffer, options) {\n  return getTileMesh(arrayBuffer, options['quantized-mesh']);\n}\n"]},"metadata":{},"sourceType":"module"}