'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _frontendUtilMaybeAddPeriod = require('@mapbox/frontend-util-maybe-add-period');

var _frontendUtilMaybeAddPeriod2 = _interopRequireDefault(_frontendUtilMaybeAddPeriod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ControlWrapper = function (_React$PureComponent) {
  _inherits(ControlWrapper, _React$PureComponent);

  function ControlWrapper() {
    _classCallCheck(this, ControlWrapper);

    return _possibleConstructorReturn(this, (ControlWrapper.__proto__ || Object.getPrototypeOf(ControlWrapper)).apply(this, arguments));
  }

  _createClass(ControlWrapper, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          themeControlWrapper = _props.themeControlWrapper,
          validationError = _props.validationError;


      var errorEl = null;
      if (validationError) {
        var validationErrorId = this.props.id + '-error';
        var errorBody = typeof validationError === 'string' ? (0, _frontendUtilMaybeAddPeriod2.default)(validationError) : validationError;
        errorEl = _react2.default.createElement(
          'div',
          {
            className: 'bg txt-s mt3 py6 px12 bg-red-faint round border border--red color-red',
            id: validationErrorId,
            'data-test': validationErrorId
          },
          errorBody
        );
      }

      var wrapperClasses = 'relative ' + themeControlWrapper;

      return _react2.default.createElement(
        'div',
        { className: wrapperClasses },
        children,
        _react2.default.createElement(
          'div',
          { role: 'alert' },
          errorEl
        )
      );
    }
  }]);

  return ControlWrapper;
}(_react2.default.PureComponent);

ControlWrapper.propTypes = {
  /** Should correspond to the identifier of the input. */
  id: _propTypes2.default.string.isRequired,
  /**
   * If provided, the value of this property will show up as an error message.
   * Strings will end with periods.
   */
  validationError: _propTypes2.default.node,
  /** The contents the controlWrapper contains */
  children: _propTypes2.default.node,
  /** A space separated list of Assembly class names to override the existing presentation. */
  themeControlWrapper: _propTypes2.default.string
};
ControlWrapper.defaultProps = {
  themeControlWrapper: ''
};
exports.default = ControlWrapper;