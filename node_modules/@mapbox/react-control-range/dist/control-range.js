'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _frontendUtilOmit = require('@mapbox/frontend-util-omit');

var _frontendUtilOmit2 = _interopRequireDefault(_frontendUtilOmit);

var _reactControlLabel = require('@mapbox/react-control-label');

var _reactControlLabel2 = _interopRequireDefault(_reactControlLabel);

var _reactControlWrapper = require('@mapbox/react-control-wrapper');

var _reactControlWrapper2 = _interopRequireDefault(_reactControlWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propNames = ['id', 'value', 'onChange', 'label', 'optional', 'aside', 'validationError', 'themeControlRange', 'themeControlWrapper', 'themeLabel',
// Passed when used with the Form component
'initialValue', 'validator'];

var ControlRange = function (_React$Component) {
  _inherits(ControlRange, _React$Component);

  function ControlRange() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ControlRange);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ControlRange.__proto__ || Object.getPrototypeOf(ControlRange)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (e) {
      return _this.props.onChange(e.target.value, _this.props.id);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ControlRange, [{
    key: 'render',
    value: function render() {
      var extraProps = (0, _frontendUtilOmit2.default)(this.props, propNames);

      var _props = this.props,
          id = _props.id,
          value = _props.value,
          label = _props.label,
          optional = _props.optional,
          aside = _props.aside,
          validationError = _props.validationError,
          themeControlRange = _props.themeControlRange,
          themeControlWrapper = _props.themeControlWrapper,
          themeLabel = _props.themeLabel;


      var inputProps = {
        id: id,
        name: id,
        onChange: this.onChange,
        value: value,
        type: 'range',
        'aria-required': optional ? false : true,
        'data-test': id + '-input'
      };

      if (validationError) {
        inputProps['aria-invalid'] = true;
      }

      return _react2.default.createElement(
        _reactControlWrapper2.default,
        {
          themeControlWrapper: themeControlWrapper,
          id: id,
          validationError: validationError
        },
        label && _react2.default.createElement(_reactControlLabel2.default, {
          text: label,
          id: id,
          aside: aside,
          optional: optional,
          themeLabel: themeLabel
        }),
        _react2.default.createElement(
          'div',
          { className: 'range ' + themeControlRange },
          _react2.default.createElement('input', _extends({}, inputProps, extraProps))
        )
      );
    }
  }]);

  return ControlRange;
}(_react2.default.Component);

ControlRange.propTypes = {
  /** Identifying value for input element. */
  id: _propTypes2.default.string.isRequired,
  /** Input value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /** Called during changes to the input element. */
  onChange: _propTypes2.default.func.isRequired,
  /** Value passed to the label element. */
  label: _propTypes2.default.string,
  /** If provided the text, "(optional)" is appended to the value of the label element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the label element. */
  aside: _propTypes2.default.node,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /** Assembly classes to apply to the range element */
  themeControlRange: _propTypes2.default.string,
  /** Assembly classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** Assembly classes to apply to the label element */
  themeLabel: _propTypes2.default.string
};
ControlRange.defaultProps = {
  value: '',
  optional: false,
  themeControlRange: ''
};
exports.default = ControlRange;