'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ControlLabel = function (_React$PureComponent) {
  _inherits(ControlLabel, _React$PureComponent);

  function ControlLabel() {
    _classCallCheck(this, ControlLabel);

    return _possibleConstructorReturn(this, (ControlLabel.__proto__ || Object.getPrototypeOf(ControlLabel)).apply(this, arguments));
  }

  _createClass(ControlLabel, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          id = _props.id,
          aside = _props.aside,
          optional = _props.optional,
          themeLabel = _props.themeLabel;

      var labelClasses = 'inline-block ' + themeLabel;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'label',
          { htmlFor: id, className: labelClasses },
          text,
          ' ',
          optional && _react2.default.createElement(
            'span',
            { className: 'txt-normal' },
            '(optional)'
          )
        ),
        aside && _react2.default.createElement(
          'span',
          { className: 'inline-block ml12' },
          aside
        )
      );
    }
  }]);

  return ControlLabel;
}(_react2.default.PureComponent);

ControlLabel.propTypes = {
  /** Label text */
  text: _propTypes2.default.string.isRequired,
  /** Value should match the identifying id of the input element. */
  id: _propTypes2.default.string.isRequired,
  /** Additional content to provide aligned to the right of the label. */
  aside: _propTypes2.default.node,
  /** If true, label text adds (optional) alongside it. */
  optional: _propTypes2.default.bool,
  /** A space separated list of Assembly class names to override the existing presentation. */
  themeLabel: _propTypes2.default.string
};
ControlLabel.defaultProps = {
  themeLabel: 'txt-s txt-bold mb6'
};
exports.default = ControlLabel;